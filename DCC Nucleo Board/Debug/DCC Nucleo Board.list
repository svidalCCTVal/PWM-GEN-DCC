
DCC Nucleo Board.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000998c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08009b30  08009b30  0000ab30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009f84  08009f84  0000b1d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009f84  08009f84  0000af84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009f8c  08009f8c  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009f8c  08009f8c  0000af8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009f90  08009f90  0000af90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08009f94  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  200001d4  0800a168  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000580  0800a168  0000b580  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d885  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201c  00000000  00000000  00018a89  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  0001aaa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5a  00000000  00000000  0001b7e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017666  00000000  00000000  0001c242  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f403  00000000  00000000  000338a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090061  00000000  00000000  00042cab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000d2d0c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cb4  00000000  00000000  000d2d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007e  00000000  00000000  000d7a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08009b14 	.word	0x08009b14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08009b14 	.word	0x08009b14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <writeSPI>:
uint32_t  phaseVal=0;  // Phase Tuning Value
uint8_t WKNOWN=0;      // Flag Variable
// -------------------------------- Functions --------------------------------

// ------------------------------------------------ Software SPI Function
void writeSPI(uint16_t word) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	4603      	mov	r3, r0
 8001038:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16 ; i++) {
 800103a:	2300      	movs	r3, #0
 800103c:	73fb      	strb	r3, [r7, #15]
 800103e:	e024      	b.n	800108a <writeSPI+0x5a>
          if(word & 0x8000) HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_SET);   //bit=1, Set High
 8001040:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001044:	2b00      	cmp	r3, #0
 8001046:	da06      	bge.n	8001056 <writeSPI+0x26>
 8001048:	2201      	movs	r2, #1
 800104a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800104e:	4816      	ldr	r0, [pc, #88]	@ (80010a8 <writeSPI+0x78>)
 8001050:	f001 fda0 	bl	8002b94 <HAL_GPIO_WritePin>
 8001054:	e005      	b.n	8001062 <writeSPI+0x32>
		else HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_RESET);        //bit=0, Set Low
 8001056:	2200      	movs	r2, #0
 8001058:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800105c:	4812      	ldr	r0, [pc, #72]	@ (80010a8 <writeSPI+0x78>)
 800105e:	f001 fd99 	bl	8002b94 <HAL_GPIO_WritePin>
		ASM_NOP();
 8001062:	bf00      	nop
		HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_RESET);             //Data is valid on falling edge
 8001064:	2200      	movs	r2, #0
 8001066:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800106a:	480f      	ldr	r0, [pc, #60]	@ (80010a8 <writeSPI+0x78>)
 800106c:	f001 fd92 	bl	8002b94 <HAL_GPIO_WritePin>
		ASM_NOP();
 8001070:	bf00      	nop
		HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_SET);
 8001072:	2201      	movs	r2, #1
 8001074:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001078:	480b      	ldr	r0, [pc, #44]	@ (80010a8 <writeSPI+0x78>)
 800107a:	f001 fd8b 	bl	8002b94 <HAL_GPIO_WritePin>
		word = word<<1; //Shift left by 1 bit
 800107e:	88fb      	ldrh	r3, [r7, #6]
 8001080:	005b      	lsls	r3, r3, #1
 8001082:	80fb      	strh	r3, [r7, #6]
	for (uint8_t i = 0; i < 16 ; i++) {
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	3301      	adds	r3, #1
 8001088:	73fb      	strb	r3, [r7, #15]
 800108a:	7bfb      	ldrb	r3, [r7, #15]
 800108c:	2b0f      	cmp	r3, #15
 800108e:	d9d7      	bls.n	8001040 <writeSPI+0x10>
        }
	HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_RESET);                    //Idle low
 8001090:	2200      	movs	r2, #0
 8001092:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001096:	4804      	ldr	r0, [pc, #16]	@ (80010a8 <writeSPI+0x78>)
 8001098:	f001 fd7c 	bl	8002b94 <HAL_GPIO_WritePin>
	ASM_NOP();
 800109c:	bf00      	nop
}
 800109e:	bf00      	nop
 80010a0:	3710      	adds	r7, #16
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	40020400 	.word	0x40020400

080010ac <AD9833_SetWave>:

// ------------------------------------------------ Sets Output Wave Type
void AD9833_SetWave(uint16_t Wave){
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	4603      	mov	r3, r0
 80010b4:	80fb      	strh	r3, [r7, #6]
  switch(Wave){
 80010b6:	88fb      	ldrh	r3, [r7, #6]
 80010b8:	2b02      	cmp	r3, #2
 80010ba:	d02e      	beq.n	800111a <AD9833_SetWave+0x6e>
 80010bc:	2b02      	cmp	r3, #2
 80010be:	dc40      	bgt.n	8001142 <AD9833_SetWave+0x96>
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d002      	beq.n	80010ca <AD9833_SetWave+0x1e>
 80010c4:	2b01      	cmp	r3, #1
 80010c6:	d014      	beq.n	80010f2 <AD9833_SetWave+0x46>
    writeSPI(0x2002); // Value for Triangle Wave
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
    WKNOWN=2;
    break;
  default:
    break;
 80010c8:	e03b      	b.n	8001142 <AD9833_SetWave+0x96>
  HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 80010ca:	2200      	movs	r2, #0
 80010cc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010d0:	481e      	ldr	r0, [pc, #120]	@ (800114c <AD9833_SetWave+0xa0>)
 80010d2:	f001 fd5f 	bl	8002b94 <HAL_GPIO_WritePin>
    writeSPI(0x2000); // Value for Sinusoidal Wave
 80010d6:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010da:	f7ff ffa9 	bl	8001030 <writeSPI>
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 80010de:	2201      	movs	r2, #1
 80010e0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010e4:	4819      	ldr	r0, [pc, #100]	@ (800114c <AD9833_SetWave+0xa0>)
 80010e6:	f001 fd55 	bl	8002b94 <HAL_GPIO_WritePin>
    WKNOWN=0;
 80010ea:	4b19      	ldr	r3, [pc, #100]	@ (8001150 <AD9833_SetWave+0xa4>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	701a      	strb	r2, [r3, #0]
    break;
 80010f0:	e028      	b.n	8001144 <AD9833_SetWave+0x98>
     HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 80010f2:	2200      	movs	r2, #0
 80010f4:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80010f8:	4814      	ldr	r0, [pc, #80]	@ (800114c <AD9833_SetWave+0xa0>)
 80010fa:	f001 fd4b 	bl	8002b94 <HAL_GPIO_WritePin>
    writeSPI(0x2028); // Value for Square Wave
 80010fe:	f242 0028 	movw	r0, #8232	@ 0x2028
 8001102:	f7ff ff95 	bl	8001030 <writeSPI>
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 8001106:	2201      	movs	r2, #1
 8001108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800110c:	480f      	ldr	r0, [pc, #60]	@ (800114c <AD9833_SetWave+0xa0>)
 800110e:	f001 fd41 	bl	8002b94 <HAL_GPIO_WritePin>
    WKNOWN=1;
 8001112:	4b0f      	ldr	r3, [pc, #60]	@ (8001150 <AD9833_SetWave+0xa4>)
 8001114:	2201      	movs	r2, #1
 8001116:	701a      	strb	r2, [r3, #0]
    break;
 8001118:	e014      	b.n	8001144 <AD9833_SetWave+0x98>
        HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET);
 800111a:	2200      	movs	r2, #0
 800111c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001120:	480a      	ldr	r0, [pc, #40]	@ (800114c <AD9833_SetWave+0xa0>)
 8001122:	f001 fd37 	bl	8002b94 <HAL_GPIO_WritePin>
    writeSPI(0x2002); // Value for Triangle Wave
 8001126:	f242 0002 	movw	r0, #8194	@ 0x2002
 800112a:	f7ff ff81 	bl	8001030 <writeSPI>
    HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001134:	4805      	ldr	r0, [pc, #20]	@ (800114c <AD9833_SetWave+0xa0>)
 8001136:	f001 fd2d 	bl	8002b94 <HAL_GPIO_WritePin>
    WKNOWN=2;
 800113a:	4b05      	ldr	r3, [pc, #20]	@ (8001150 <AD9833_SetWave+0xa4>)
 800113c:	2202      	movs	r2, #2
 800113e:	701a      	strb	r2, [r3, #0]
    break;
 8001140:	e000      	b.n	8001144 <AD9833_SetWave+0x98>
    break;
 8001142:	bf00      	nop
  }
}
 8001144:	bf00      	nop
 8001146:	3708      	adds	r7, #8
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}
 800114c:	40020400 	.word	0x40020400
 8001150:	200001f8 	.word	0x200001f8
 8001154:	00000000 	.word	0x00000000

08001158 <AD9833_SetWaveData>:

// ------------------------------------------------ Sets Wave Frequency & Phase (In Degree) In PHASE0 & FREQ0 Registers
void AD9833_SetWaveData(float Frequency,float Phase){
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001162:	edc7 0a00 	vstr	s1, [r7]
ASM_NOP();
 8001166:	bf00      	nop
 // ---------- Tuning Word for Phase ( 0 - 360 Degree )
 if(Phase<0)Phase=0; // Changing Phase Value to Positive
 8001168:	edd7 7a00 	vldr	s15, [r7]
 800116c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001170:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001174:	d502      	bpl.n	800117c <AD9833_SetWaveData+0x24>
 8001176:	f04f 0300 	mov.w	r3, #0
 800117a:	603b      	str	r3, [r7, #0]
 if(Phase>360)Phase=360; // Maximum value For Phase (In Degree)
 800117c:	edd7 7a00 	vldr	s15, [r7]
 8001180:	ed9f 7a4f 	vldr	s14, [pc, #316]	@ 80012c0 <AD9833_SetWaveData+0x168>
 8001184:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	dd01      	ble.n	8001192 <AD9833_SetWaveData+0x3a>
 800118e:	4b4d      	ldr	r3, [pc, #308]	@ (80012c4 <AD9833_SetWaveData+0x16c>)
 8001190:	603b      	str	r3, [r7, #0]
 phaseVal  = ((int)(Phase*(4096/360)))|0XC000;  // 4096/360 = 11.37 change per Degree for Register And using 0xC000 which is Phase 0 Register Address
 8001192:	edd7 7a00 	vldr	s15, [r7]
 8001196:	eeb2 7a06 	vmov.f32	s14, #38	@ 0x41300000  11.0
 800119a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800119e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80011a2:	ee17 3a90 	vmov	r3, s15
 80011a6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80011aa:	461a      	mov	r2, r3
 80011ac:	4b46      	ldr	r3, [pc, #280]	@ (80012c8 <AD9833_SetWaveData+0x170>)
 80011ae:	601a      	str	r2, [r3, #0]
 
 // ---------- Tuning word for Frequency      
long freq=0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	60fb      	str	r3, [r7, #12]
freq=(int)(((Frequency*pow(2,28))/FMCLK)+1); // Tuning Word
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f7ff f9cf 	bl	8000558 <__aeabi_f2d>
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	4b43      	ldr	r3, [pc, #268]	@ (80012cc <AD9833_SetWaveData+0x174>)
 80011c0:	f7ff fa22 	bl	8000608 <__aeabi_dmul>
 80011c4:	4602      	mov	r2, r0
 80011c6:	460b      	mov	r3, r1
 80011c8:	4610      	mov	r0, r2
 80011ca:	4619      	mov	r1, r3
 80011cc:	a33a      	add	r3, pc, #232	@ (adr r3, 80012b8 <AD9833_SetWaveData+0x160>)
 80011ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011d2:	f7ff fb43 	bl	800085c <__aeabi_ddiv>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	4610      	mov	r0, r2
 80011dc:	4619      	mov	r1, r3
 80011de:	f04f 0200 	mov.w	r2, #0
 80011e2:	4b3b      	ldr	r3, [pc, #236]	@ (80012d0 <AD9833_SetWaveData+0x178>)
 80011e4:	f7ff f85a 	bl	800029c <__adddf3>
 80011e8:	4602      	mov	r2, r0
 80011ea:	460b      	mov	r3, r1
 80011ec:	4610      	mov	r0, r2
 80011ee:	4619      	mov	r1, r3
 80011f0:	f7ff fcba 	bl	8000b68 <__aeabi_d2iz>
 80011f4:	4603      	mov	r3, r0
 80011f6:	60fb      	str	r3, [r7, #12]
FRQHW=(int)((freq & 0xFFFC000) >> 14); // FREQ MSB
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	139b      	asrs	r3, r3, #14
 80011fc:	b29b      	uxth	r3, r3
 80011fe:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001202:	b29a      	uxth	r2, r3
 8001204:	4b33      	ldr	r3, [pc, #204]	@ (80012d4 <AD9833_SetWaveData+0x17c>)
 8001206:	801a      	strh	r2, [r3, #0]
FRQLW=(int)(freq & 0x3FFF);  // FREQ LSB 
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	b29b      	uxth	r3, r3
 800120c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001210:	b29a      	uxth	r2, r3
 8001212:	4b31      	ldr	r3, [pc, #196]	@ (80012d8 <AD9833_SetWaveData+0x180>)
 8001214:	801a      	strh	r2, [r3, #0]
FRQLW |= 0x4000;
 8001216:	4b30      	ldr	r3, [pc, #192]	@ (80012d8 <AD9833_SetWaveData+0x180>)
 8001218:	881b      	ldrh	r3, [r3, #0]
 800121a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800121e:	b29a      	uxth	r2, r3
 8001220:	4b2d      	ldr	r3, [pc, #180]	@ (80012d8 <AD9833_SetWaveData+0x180>)
 8001222:	801a      	strh	r2, [r3, #0]
FRQHW |= 0x4000; 
 8001224:	4b2b      	ldr	r3, [pc, #172]	@ (80012d4 <AD9833_SetWaveData+0x17c>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800122c:	b29a      	uxth	r2, r3
 800122e:	4b29      	ldr	r3, [pc, #164]	@ (80012d4 <AD9833_SetWaveData+0x17c>)
 8001230:	801a      	strh	r2, [r3, #0]
 // ------------------------------------------------ Writing DATA
 HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_SET);
 8001232:	2201      	movs	r2, #1
 8001234:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001238:	4828      	ldr	r0, [pc, #160]	@ (80012dc <AD9833_SetWaveData+0x184>)
 800123a:	f001 fcab 	bl	8002b94 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_SET);
 800123e:	2201      	movs	r2, #1
 8001240:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001244:	4825      	ldr	r0, [pc, #148]	@ (80012dc <AD9833_SetWaveData+0x184>)
 8001246:	f001 fca5 	bl	8002b94 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);  
 800124a:	2201      	movs	r2, #1
 800124c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001250:	4822      	ldr	r0, [pc, #136]	@ (80012dc <AD9833_SetWaveData+0x184>)
 8001252:	f001 fc9f 	bl	8002b94 <HAL_GPIO_WritePin>
 HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_RESET); //low = selected
 8001256:	2200      	movs	r2, #0
 8001258:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800125c:	481f      	ldr	r0, [pc, #124]	@ (80012dc <AD9833_SetWaveData+0x184>)
 800125e:	f001 fc99 	bl	8002b94 <HAL_GPIO_WritePin>
	ASM_NOP();
 8001262:	bf00      	nop
	writeSPI(0x2100); // enable 16bit words and set reset bit
 8001264:	f44f 5004 	mov.w	r0, #8448	@ 0x2100
 8001268:	f7ff fee2 	bl	8001030 <writeSPI>
	writeSPI(FRQLW);
 800126c:	4b1a      	ldr	r3, [pc, #104]	@ (80012d8 <AD9833_SetWaveData+0x180>)
 800126e:	881b      	ldrh	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff fedd 	bl	8001030 <writeSPI>
	writeSPI(FRQHW);
 8001276:	4b17      	ldr	r3, [pc, #92]	@ (80012d4 <AD9833_SetWaveData+0x17c>)
 8001278:	881b      	ldrh	r3, [r3, #0]
 800127a:	4618      	mov	r0, r3
 800127c:	f7ff fed8 	bl	8001030 <writeSPI>
        writeSPI(phaseVal);
 8001280:	4b11      	ldr	r3, [pc, #68]	@ (80012c8 <AD9833_SetWaveData+0x170>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	b29b      	uxth	r3, r3
 8001286:	4618      	mov	r0, r3
 8001288:	f7ff fed2 	bl	8001030 <writeSPI>
	writeSPI(0x2000); // clear reset bit 
 800128c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001290:	f7ff fece 	bl	8001030 <writeSPI>
	ASM_NOP();
 8001294:	bf00      	nop
	HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET); //high = deselected 
 8001296:	2201      	movs	r2, #1
 8001298:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800129c:	480f      	ldr	r0, [pc, #60]	@ (80012dc <AD9833_SetWaveData+0x184>)
 800129e:	f001 fc79 	bl	8002b94 <HAL_GPIO_WritePin>
AD9833_SetWave(WKNOWN);
 80012a2:	4b0f      	ldr	r3, [pc, #60]	@ (80012e0 <AD9833_SetWaveData+0x188>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	4618      	mov	r0, r3
 80012a8:	f7ff ff00 	bl	80010ac <AD9833_SetWave>
ASM_NOP();
 80012ac:	bf00      	nop
return;
 80012ae:	bf00      	nop
}
 80012b0:	3710      	adds	r7, #16
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	00000000 	.word	0x00000000
 80012bc:	4177d784 	.word	0x4177d784
 80012c0:	43b40000 	.word	0x43b40000
 80012c4:	43b40000 	.word	0x43b40000
 80012c8:	200001f4 	.word	0x200001f4
 80012cc:	41b00000 	.word	0x41b00000
 80012d0:	3ff00000 	.word	0x3ff00000
 80012d4:	200001f2 	.word	0x200001f2
 80012d8:	200001f0 	.word	0x200001f0
 80012dc:	40020400 	.word	0x40020400
 80012e0:	200001f8 	.word	0x200001f8

080012e4 <AD9833_Init>:

// ------------------------------------------------ Initializing AD9833
void AD9833_Init(uint16_t WaveType,float FRQ,float Phase){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	4603      	mov	r3, r0
 80012ec:	ed87 0a02 	vstr	s0, [r7, #8]
 80012f0:	edc7 0a01 	vstr	s1, [r7, #4]
 80012f4:	81fb      	strh	r3, [r7, #14]
HAL_GPIO_WritePin(AD9833PORT,AD9833DATA,GPIO_PIN_SET); // Set All SPI pings to High
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80012fc:	480e      	ldr	r0, [pc, #56]	@ (8001338 <AD9833_Init+0x54>)
 80012fe:	f001 fc49 	bl	8002b94 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SCK,GPIO_PIN_SET);  // Set All SPI pings to High
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001308:	480b      	ldr	r0, [pc, #44]	@ (8001338 <AD9833_Init+0x54>)
 800130a:	f001 fc43 	bl	8002b94 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(AD9833PORT,AD9833SS,GPIO_PIN_SET);   // Set All SPI pings to High
 800130e:	2201      	movs	r2, #1
 8001310:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001314:	4808      	ldr	r0, [pc, #32]	@ (8001338 <AD9833_Init+0x54>)
 8001316:	f001 fc3d 	bl	8002b94 <HAL_GPIO_WritePin>
AD9833_SetWave(WaveType);                              // Type Of Wave 
 800131a:	89fb      	ldrh	r3, [r7, #14]
 800131c:	4618      	mov	r0, r3
 800131e:	f7ff fec5 	bl	80010ac <AD9833_SetWave>
AD9833_SetWaveData(FRQ,Phase);                         // Frequency & Phase Set
 8001322:	edd7 0a01 	vldr	s1, [r7, #4]
 8001326:	ed97 0a02 	vldr	s0, [r7, #8]
 800132a:	f7ff ff15 	bl	8001158 <AD9833_SetWaveData>
return;
 800132e:	bf00      	nop
}
 8001330:	3710      	adds	r7, #16
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40020400 	.word	0x40020400

0800133c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b082      	sub	sp, #8
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)  // <- MUY IMPORTANTE
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	4a0f      	ldr	r2, [pc, #60]	@ (8001388 <HAL_UART_RxCpltCallback+0x4c>)
 800134a:	4293      	cmp	r3, r2
 800134c:	d118      	bne.n	8001380 <HAL_UART_RxCpltCallback+0x44>
    {
     memcpy(rx_buffer+rx_index,rx_data,1);
 800134e:	4b0f      	ldr	r3, [pc, #60]	@ (800138c <HAL_UART_RxCpltCallback+0x50>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	461a      	mov	r2, r3
 8001354:	4b0e      	ldr	r3, [pc, #56]	@ (8001390 <HAL_UART_RxCpltCallback+0x54>)
 8001356:	4413      	add	r3, r2
 8001358:	4a0e      	ldr	r2, [pc, #56]	@ (8001394 <HAL_UART_RxCpltCallback+0x58>)
 800135a:	7812      	ldrb	r2, [r2, #0]
 800135c:	701a      	strb	r2, [r3, #0]
     rx_index++;
 800135e:	4b0b      	ldr	r3, [pc, #44]	@ (800138c <HAL_UART_RxCpltCallback+0x50>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	3301      	adds	r3, #1
 8001364:	4a09      	ldr	r2, [pc, #36]	@ (800138c <HAL_UART_RxCpltCallback+0x50>)
 8001366:	6013      	str	r3, [r2, #0]
     if(rx_index >=32) rx_index=0;
 8001368:	4b08      	ldr	r3, [pc, #32]	@ (800138c <HAL_UART_RxCpltCallback+0x50>)
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	2b1f      	cmp	r3, #31
 800136e:	dd02      	ble.n	8001376 <HAL_UART_RxCpltCallback+0x3a>
 8001370:	4b06      	ldr	r3, [pc, #24]	@ (800138c <HAL_UART_RxCpltCallback+0x50>)
 8001372:	2200      	movs	r2, #0
 8001374:	601a      	str	r2, [r3, #0]
        HAL_UART_Receive_IT(&huart2, rx_data, 1);  // volver a activar recepción
 8001376:	2201      	movs	r2, #1
 8001378:	4906      	ldr	r1, [pc, #24]	@ (8001394 <HAL_UART_RxCpltCallback+0x58>)
 800137a:	4807      	ldr	r0, [pc, #28]	@ (8001398 <HAL_UART_RxCpltCallback+0x5c>)
 800137c:	f003 f8c1 	bl	8004502 <HAL_UART_Receive_IT>
    }
}
 8001380:	bf00      	nop
 8001382:	3708      	adds	r7, #8
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	40004400 	.word	0x40004400
 800138c:	200003d0 	.word	0x200003d0
 8001390:	200003b0 	.word	0x200003b0
 8001394:	200003ac 	.word	0x200003ac
 8001398:	20000364 	.word	0x20000364

0800139c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80013a0:	f001 f85e 	bl	8002460 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80013a4:	f000 f8fc 	bl	80015a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80013a8:	f000 fc90 	bl	8001ccc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80013ac:	f000 fc64 	bl	8001c78 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80013b0:	f000 fa30 	bl	8001814 <MX_TIM2_Init>
  MX_TIM1_Init();
 80013b4:	f000 f960 	bl	8001678 <MX_TIM1_Init>
  MX_TIM3_Init();
 80013b8:	f000 fab8 	bl	800192c <MX_TIM3_Init>
  MX_TIM4_Init();
 80013bc:	f000 fb4e 	bl	8001a5c <MX_TIM4_Init>
  MX_TIM5_Init();
 80013c0:	f000 fbe4 	bl	8001b8c <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 80013c4:	2201      	movs	r2, #1
 80013c6:	4964      	ldr	r1, [pc, #400]	@ (8001558 <main+0x1bc>)
 80013c8:	4864      	ldr	r0, [pc, #400]	@ (800155c <main+0x1c0>)
 80013ca:	f003 f89a 	bl	8004502 <HAL_UART_Receive_IT>
  // Set PWM Duty Cicles and initilize them

  TIM1->CCR1=25000;
 80013ce:	4b64      	ldr	r3, [pc, #400]	@ (8001560 <main+0x1c4>)
 80013d0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80013d4:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM1->CCR2=25000;
 80013d6:	4b62      	ldr	r3, [pc, #392]	@ (8001560 <main+0x1c4>)
 80013d8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80013dc:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM1->CCR3=25000;
 80013de:	4b60      	ldr	r3, [pc, #384]	@ (8001560 <main+0x1c4>)
 80013e0:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80013e4:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM1->CCR4=25000;
 80013e6:	4b5e      	ldr	r3, [pc, #376]	@ (8001560 <main+0x1c4>)
 80013e8:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 80013ec:	641a      	str	r2, [r3, #64]	@ 0x40

  TIM2->CCR1=50000;
 80013ee:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013f2:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80013f6:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2->CCR2=50000;
 80013f8:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 80013fc:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001400:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM2->CCR3=50000;
 8001402:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001406:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800140a:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2->CCR4=50000;
 800140c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001410:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001414:	641a      	str	r2, [r3, #64]	@ 0x40

  TIM3->CCR1=25000;
 8001416:	4b53      	ldr	r3, [pc, #332]	@ (8001564 <main+0x1c8>)
 8001418:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800141c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3->CCR2=25000;
 800141e:	4b51      	ldr	r3, [pc, #324]	@ (8001564 <main+0x1c8>)
 8001420:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001424:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3->CCR3=25000;
 8001426:	4b4f      	ldr	r3, [pc, #316]	@ (8001564 <main+0x1c8>)
 8001428:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800142c:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM3->CCR4=25000;
 800142e:	4b4d      	ldr	r3, [pc, #308]	@ (8001564 <main+0x1c8>)
 8001430:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001434:	641a      	str	r2, [r3, #64]	@ 0x40

  TIM4->CCR1=25000;
 8001436:	4b4c      	ldr	r3, [pc, #304]	@ (8001568 <main+0x1cc>)
 8001438:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800143c:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM4->CCR2=25000;
 800143e:	4b4a      	ldr	r3, [pc, #296]	@ (8001568 <main+0x1cc>)
 8001440:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001444:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM4->CCR3=25000;
 8001446:	4b48      	ldr	r3, [pc, #288]	@ (8001568 <main+0x1cc>)
 8001448:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 800144c:	63da      	str	r2, [r3, #60]	@ 0x3c

  TIM5->CCR1=25000;
 800144e:	4b47      	ldr	r3, [pc, #284]	@ (800156c <main+0x1d0>)
 8001450:	f246 12a8 	movw	r2, #25000	@ 0x61a8
 8001454:	635a      	str	r2, [r3, #52]	@ 0x34

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001456:	2100      	movs	r1, #0
 8001458:	4845      	ldr	r0, [pc, #276]	@ (8001570 <main+0x1d4>)
 800145a:	f002 f94f 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 800145e:	2104      	movs	r1, #4
 8001460:	4843      	ldr	r0, [pc, #268]	@ (8001570 <main+0x1d4>)
 8001462:	f002 f94b 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8001466:	2108      	movs	r1, #8
 8001468:	4841      	ldr	r0, [pc, #260]	@ (8001570 <main+0x1d4>)
 800146a:	f002 f947 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 800146e:	210c      	movs	r1, #12
 8001470:	483f      	ldr	r0, [pc, #252]	@ (8001570 <main+0x1d4>)
 8001472:	f002 f943 	bl	80036fc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001476:	2100      	movs	r1, #0
 8001478:	483e      	ldr	r0, [pc, #248]	@ (8001574 <main+0x1d8>)
 800147a:	f002 f93f 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2);
 800147e:	2104      	movs	r1, #4
 8001480:	483c      	ldr	r0, [pc, #240]	@ (8001574 <main+0x1d8>)
 8001482:	f002 f93b 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001486:	2108      	movs	r1, #8
 8001488:	483a      	ldr	r0, [pc, #232]	@ (8001574 <main+0x1d8>)
 800148a:	f002 f937 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 800148e:	210c      	movs	r1, #12
 8001490:	4838      	ldr	r0, [pc, #224]	@ (8001574 <main+0x1d8>)
 8001492:	f002 f933 	bl	80036fc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001496:	2100      	movs	r1, #0
 8001498:	4837      	ldr	r0, [pc, #220]	@ (8001578 <main+0x1dc>)
 800149a:	f002 f92f 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_2);
 800149e:	2104      	movs	r1, #4
 80014a0:	4835      	ldr	r0, [pc, #212]	@ (8001578 <main+0x1dc>)
 80014a2:	f002 f92b 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_3);
 80014a6:	2108      	movs	r1, #8
 80014a8:	4833      	ldr	r0, [pc, #204]	@ (8001578 <main+0x1dc>)
 80014aa:	f002 f927 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_4);
 80014ae:	210c      	movs	r1, #12
 80014b0:	4831      	ldr	r0, [pc, #196]	@ (8001578 <main+0x1dc>)
 80014b2:	f002 f923 	bl	80036fc <HAL_TIM_PWM_Start>

  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80014b6:	2100      	movs	r1, #0
 80014b8:	4830      	ldr	r0, [pc, #192]	@ (800157c <main+0x1e0>)
 80014ba:	f002 f91f 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 80014be:	2104      	movs	r1, #4
 80014c0:	482e      	ldr	r0, [pc, #184]	@ (800157c <main+0x1e0>)
 80014c2:	f002 f91b 	bl	80036fc <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 80014c6:	2108      	movs	r1, #8
 80014c8:	482c      	ldr	r0, [pc, #176]	@ (800157c <main+0x1e0>)
 80014ca:	f002 f917 	bl	80036fc <HAL_TIM_PWM_Start>

  //HAL_TIM_PWM_Start(&htim5, TIM_CHANNEL_5);

  // Initial set of HIFREQ signal
  AD9833_Init(SQR, 1000.0, 0.0);
 80014ce:	eddf 0a2c 	vldr	s1, [pc, #176]	@ 8001580 <main+0x1e4>
 80014d2:	ed9f 0a2c 	vldr	s0, [pc, #176]	@ 8001584 <main+0x1e8>
 80014d6:	2001      	movs	r0, #1
 80014d8:	f7ff ff04 	bl	80012e4 <AD9833_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	   if(rx_data[0]=='\n'){
 80014dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001558 <main+0x1bc>)
 80014de:	781b      	ldrb	r3, [r3, #0]
 80014e0:	2b0a      	cmp	r3, #10
 80014e2:	d1fb      	bne.n	80014dc <main+0x140>
	    rx_data[0]='\0';  // actualiza rx_data[0] para que no entre infinito en el if.
 80014e4:	4b1c      	ldr	r3, [pc, #112]	@ (8001558 <main+0x1bc>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	701a      	strb	r2, [r3, #0]
	    memcpy(final_data,rx_buffer,rx_index); // copia buffer a final data
 80014ea:	4b27      	ldr	r3, [pc, #156]	@ (8001588 <main+0x1ec>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	461a      	mov	r2, r3
 80014f0:	4926      	ldr	r1, [pc, #152]	@ (800158c <main+0x1f0>)
 80014f2:	4827      	ldr	r0, [pc, #156]	@ (8001590 <main+0x1f4>)
 80014f4:	f005 fdcb 	bl	800708e <memcpy>
	    rx_index=0; // reinicia cuenta del buffer
 80014f8:	4b23      	ldr	r3, [pc, #140]	@ (8001588 <main+0x1ec>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	601a      	str	r2, [r3, #0]
	    final_freq = atof((char (*)) final_data); // guarda dato de string a float.
 80014fe:	4824      	ldr	r0, [pc, #144]	@ (8001590 <main+0x1f4>)
 8001500:	f003 ff90 	bl	8005424 <atof>
 8001504:	ec53 2b10 	vmov	r2, r3, d0
 8001508:	4610      	mov	r0, r2
 800150a:	4619      	mov	r1, r3
 800150c:	f7ff fb74 	bl	8000bf8 <__aeabi_d2f>
 8001510:	4603      	mov	r3, r0
 8001512:	4a20      	ldr	r2, [pc, #128]	@ (8001594 <main+0x1f8>)
 8001514:	6013      	str	r3, [r2, #0]
	    AD9833_Init(SQR, final_freq, 0.0);
 8001516:	4b1f      	ldr	r3, [pc, #124]	@ (8001594 <main+0x1f8>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8001580 <main+0x1e4>
 8001520:	eeb0 0a67 	vmov.f32	s0, s15
 8001524:	2001      	movs	r0, #1
 8001526:	f7ff fedd 	bl	80012e4 <AD9833_Init>
	    sprintf(buffer, "Freq: %.f Hz\r\n", final_freq);
 800152a:	4b1a      	ldr	r3, [pc, #104]	@ (8001594 <main+0x1f8>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	4618      	mov	r0, r3
 8001530:	f7ff f812 	bl	8000558 <__aeabi_f2d>
 8001534:	4602      	mov	r2, r0
 8001536:	460b      	mov	r3, r1
 8001538:	4917      	ldr	r1, [pc, #92]	@ (8001598 <main+0x1fc>)
 800153a:	4818      	ldr	r0, [pc, #96]	@ (800159c <main+0x200>)
 800153c:	f005 fcb0 	bl	8006ea0 <siprintf>
	    HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), HAL_MAX_DELAY);
 8001540:	4816      	ldr	r0, [pc, #88]	@ (800159c <main+0x200>)
 8001542:	f7fe fe9d 	bl	8000280 <strlen>
 8001546:	4603      	mov	r3, r0
 8001548:	b29a      	uxth	r2, r3
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	4913      	ldr	r1, [pc, #76]	@ (800159c <main+0x200>)
 8001550:	4802      	ldr	r0, [pc, #8]	@ (800155c <main+0x1c0>)
 8001552:	f002 ff4b 	bl	80043ec <HAL_UART_Transmit>
	   if(rx_data[0]=='\n'){
 8001556:	e7c1      	b.n	80014dc <main+0x140>
 8001558:	200003ac 	.word	0x200003ac
 800155c:	20000364 	.word	0x20000364
 8001560:	40010000 	.word	0x40010000
 8001564:	40000400 	.word	0x40000400
 8001568:	40000800 	.word	0x40000800
 800156c:	40000c00 	.word	0x40000c00
 8001570:	200001fc 	.word	0x200001fc
 8001574:	20000244 	.word	0x20000244
 8001578:	2000028c 	.word	0x2000028c
 800157c:	200002d4 	.word	0x200002d4
 8001580:	00000000 	.word	0x00000000
 8001584:	447a0000 	.word	0x447a0000
 8001588:	200003d0 	.word	0x200003d0
 800158c:	200003b0 	.word	0x200003b0
 8001590:	200003d4 	.word	0x200003d4
 8001594:	200003f4 	.word	0x200003f4
 8001598:	08009b30 	.word	0x08009b30
 800159c:	200003f8 	.word	0x200003f8

080015a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	b094      	sub	sp, #80	@ 0x50
 80015a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015a6:	f107 0320 	add.w	r3, r7, #32
 80015aa:	2230      	movs	r2, #48	@ 0x30
 80015ac:	2100      	movs	r1, #0
 80015ae:	4618      	mov	r0, r3
 80015b0:	f005 fcdb 	bl	8006f6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015b4:	f107 030c 	add.w	r3, r7, #12
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015c4:	2300      	movs	r3, #0
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	4b29      	ldr	r3, [pc, #164]	@ (8001670 <SystemClock_Config+0xd0>)
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	4a28      	ldr	r2, [pc, #160]	@ (8001670 <SystemClock_Config+0xd0>)
 80015ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015d2:	6413      	str	r3, [r2, #64]	@ 0x40
 80015d4:	4b26      	ldr	r3, [pc, #152]	@ (8001670 <SystemClock_Config+0xd0>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	60bb      	str	r3, [r7, #8]
 80015de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80015e0:	2300      	movs	r3, #0
 80015e2:	607b      	str	r3, [r7, #4]
 80015e4:	4b23      	ldr	r3, [pc, #140]	@ (8001674 <SystemClock_Config+0xd4>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80015ec:	4a21      	ldr	r2, [pc, #132]	@ (8001674 <SystemClock_Config+0xd4>)
 80015ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80015f2:	6013      	str	r3, [r2, #0]
 80015f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001674 <SystemClock_Config+0xd4>)
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80015fc:	607b      	str	r3, [r7, #4]
 80015fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001600:	2302      	movs	r3, #2
 8001602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001604:	2301      	movs	r3, #1
 8001606:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001608:	2310      	movs	r3, #16
 800160a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800160c:	2302      	movs	r3, #2
 800160e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001610:	2300      	movs	r3, #0
 8001612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001614:	2310      	movs	r3, #16
 8001616:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001618:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800161c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800161e:	2304      	movs	r3, #4
 8001620:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001622:	2307      	movs	r3, #7
 8001624:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001626:	f107 0320 	add.w	r3, r7, #32
 800162a:	4618      	mov	r0, r3
 800162c:	f001 facc 	bl	8002bc8 <HAL_RCC_OscConfig>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001636:	f000 fbcf 	bl	8001dd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800163a:	230f      	movs	r3, #15
 800163c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800163e:	2302      	movs	r3, #2
 8001640:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV4;
 8001642:	2390      	movs	r3, #144	@ 0x90
 8001644:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001646:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800164a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800164c:	2300      	movs	r3, #0
 800164e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001650:	f107 030c 	add.w	r3, r7, #12
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f001 fd2e 	bl	80030b8 <HAL_RCC_ClockConfig>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d001      	beq.n	8001666 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001662:	f000 fbb9 	bl	8001dd8 <Error_Handler>
  }
}
 8001666:	bf00      	nop
 8001668:	3750      	adds	r7, #80	@ 0x50
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
 800166e:	bf00      	nop
 8001670:	40023800 	.word	0x40023800
 8001674:	40007000 	.word	0x40007000

08001678 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b096      	sub	sp, #88	@ 0x58
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800167e:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001682:	2200      	movs	r2, #0
 8001684:	601a      	str	r2, [r3, #0]
 8001686:	605a      	str	r2, [r3, #4]
 8001688:	609a      	str	r2, [r3, #8]
 800168a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800168c:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001696:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800169a:	2200      	movs	r2, #0
 800169c:	601a      	str	r2, [r3, #0]
 800169e:	605a      	str	r2, [r3, #4]
 80016a0:	609a      	str	r2, [r3, #8]
 80016a2:	60da      	str	r2, [r3, #12]
 80016a4:	611a      	str	r2, [r3, #16]
 80016a6:	615a      	str	r2, [r3, #20]
 80016a8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80016aa:	1d3b      	adds	r3, r7, #4
 80016ac:	2220      	movs	r2, #32
 80016ae:	2100      	movs	r1, #0
 80016b0:	4618      	mov	r0, r3
 80016b2:	f005 fc5a 	bl	8006f6a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80016b6:	4b55      	ldr	r3, [pc, #340]	@ (800180c <MX_TIM1_Init+0x194>)
 80016b8:	4a55      	ldr	r2, [pc, #340]	@ (8001810 <MX_TIM1_Init+0x198>)
 80016ba:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 40;
 80016bc:	4b53      	ldr	r3, [pc, #332]	@ (800180c <MX_TIM1_Init+0x194>)
 80016be:	2228      	movs	r2, #40	@ 0x28
 80016c0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016c2:	4b52      	ldr	r3, [pc, #328]	@ (800180c <MX_TIM1_Init+0x194>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 50000;
 80016c8:	4b50      	ldr	r3, [pc, #320]	@ (800180c <MX_TIM1_Init+0x194>)
 80016ca:	f24c 3250 	movw	r2, #50000	@ 0xc350
 80016ce:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016d0:	4b4e      	ldr	r3, [pc, #312]	@ (800180c <MX_TIM1_Init+0x194>)
 80016d2:	2200      	movs	r2, #0
 80016d4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80016d6:	4b4d      	ldr	r3, [pc, #308]	@ (800180c <MX_TIM1_Init+0x194>)
 80016d8:	2200      	movs	r2, #0
 80016da:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80016dc:	4b4b      	ldr	r3, [pc, #300]	@ (800180c <MX_TIM1_Init+0x194>)
 80016de:	2200      	movs	r2, #0
 80016e0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80016e2:	484a      	ldr	r0, [pc, #296]	@ (800180c <MX_TIM1_Init+0x194>)
 80016e4:	f001 ff08 	bl	80034f8 <HAL_TIM_Base_Init>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80016ee:	f000 fb73 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80016f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80016f8:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80016fc:	4619      	mov	r1, r3
 80016fe:	4843      	ldr	r0, [pc, #268]	@ (800180c <MX_TIM1_Init+0x194>)
 8001700:	f002 f9ca 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800170a:	f000 fb65 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800170e:	483f      	ldr	r0, [pc, #252]	@ (800180c <MX_TIM1_Init+0x194>)
 8001710:	f001 ff9a 	bl	8003648 <HAL_TIM_PWM_Init>
 8001714:	4603      	mov	r3, r0
 8001716:	2b00      	cmp	r3, #0
 8001718:	d001      	beq.n	800171e <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800171a:	f000 fb5d 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 800171e:	483b      	ldr	r0, [pc, #236]	@ (800180c <MX_TIM1_Init+0x194>)
 8001720:	f001 ff39 	bl	8003596 <HAL_TIM_OC_Init>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <MX_TIM1_Init+0xb6>
  {
    Error_Handler();
 800172a:	f000 fb55 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800172e:	2300      	movs	r3, #0
 8001730:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001732:	2300      	movs	r3, #0
 8001734:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001736:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800173a:	4619      	mov	r1, r3
 800173c:	4833      	ldr	r0, [pc, #204]	@ (800180c <MX_TIM1_Init+0x194>)
 800173e:	f002 fd45 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8001742:	4603      	mov	r3, r0
 8001744:	2b00      	cmp	r3, #0
 8001746:	d001      	beq.n	800174c <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8001748:	f000 fb46 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800174c:	2360      	movs	r3, #96	@ 0x60
 800174e:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001750:	2300      	movs	r3, #0
 8001752:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001754:	2300      	movs	r3, #0
 8001756:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001758:	2300      	movs	r3, #0
 800175a:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001760:	2300      	movs	r3, #0
 8001762:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001764:	2300      	movs	r3, #0
 8001766:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001768:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176c:	2200      	movs	r2, #0
 800176e:	4619      	mov	r1, r3
 8001770:	4826      	ldr	r0, [pc, #152]	@ (800180c <MX_TIM1_Init+0x194>)
 8001772:	f002 f8cf 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_TIM1_Init+0x108>
  {
    Error_Handler();
 800177c:	f000 fb2c 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001780:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001784:	2204      	movs	r2, #4
 8001786:	4619      	mov	r1, r3
 8001788:	4820      	ldr	r0, [pc, #128]	@ (800180c <MX_TIM1_Init+0x194>)
 800178a:	f002 f8c3 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 800178e:	4603      	mov	r3, r0
 8001790:	2b00      	cmp	r3, #0
 8001792:	d001      	beq.n	8001798 <MX_TIM1_Init+0x120>
  {
    Error_Handler();
 8001794:	f000 fb20 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001798:	2300      	movs	r3, #0
 800179a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800179c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017a0:	2208      	movs	r2, #8
 80017a2:	4619      	mov	r1, r3
 80017a4:	4819      	ldr	r0, [pc, #100]	@ (800180c <MX_TIM1_Init+0x194>)
 80017a6:	f002 f859 	bl	800385c <HAL_TIM_OC_ConfigChannel>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM1_Init+0x13c>
  {
    Error_Handler();
 80017b0:	f000 fb12 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80017b4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017b8:	220c      	movs	r2, #12
 80017ba:	4619      	mov	r1, r3
 80017bc:	4813      	ldr	r0, [pc, #76]	@ (800180c <MX_TIM1_Init+0x194>)
 80017be:	f002 f84d 	bl	800385c <HAL_TIM_OC_ConfigChannel>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <MX_TIM1_Init+0x154>
  {
    Error_Handler();
 80017c8:	f000 fb06 	bl	8001dd8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80017cc:	2300      	movs	r3, #0
 80017ce:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80017d0:	2300      	movs	r3, #0
 80017d2:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80017d4:	2300      	movs	r3, #0
 80017d6:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80017d8:	2300      	movs	r3, #0
 80017da:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80017dc:	2300      	movs	r3, #0
 80017de:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80017e0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80017e4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80017e6:	2300      	movs	r3, #0
 80017e8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80017ea:	1d3b      	adds	r3, r7, #4
 80017ec:	4619      	mov	r1, r3
 80017ee:	4807      	ldr	r0, [pc, #28]	@ (800180c <MX_TIM1_Init+0x194>)
 80017f0:	f002 fd5a 	bl	80042a8 <HAL_TIMEx_ConfigBreakDeadTime>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <MX_TIM1_Init+0x186>
  {
    Error_Handler();
 80017fa:	f000 faed 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80017fe:	4803      	ldr	r0, [pc, #12]	@ (800180c <MX_TIM1_Init+0x194>)
 8001800:	f000 fb90 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001804:	bf00      	nop
 8001806:	3758      	adds	r7, #88	@ 0x58
 8001808:	46bd      	mov	sp, r7
 800180a:	bd80      	pop	{r7, pc}
 800180c:	200001fc 	.word	0x200001fc
 8001810:	40010000 	.word	0x40010000

08001814 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b08e      	sub	sp, #56	@ 0x38
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800181a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800181e:	2200      	movs	r2, #0
 8001820:	601a      	str	r2, [r3, #0]
 8001822:	605a      	str	r2, [r3, #4]
 8001824:	609a      	str	r2, [r3, #8]
 8001826:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001828:	f107 0320 	add.w	r3, r7, #32
 800182c:	2200      	movs	r2, #0
 800182e:	601a      	str	r2, [r3, #0]
 8001830:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001832:	1d3b      	adds	r3, r7, #4
 8001834:	2200      	movs	r2, #0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	605a      	str	r2, [r3, #4]
 800183a:	609a      	str	r2, [r3, #8]
 800183c:	60da      	str	r2, [r3, #12]
 800183e:	611a      	str	r2, [r3, #16]
 8001840:	615a      	str	r2, [r3, #20]
 8001842:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001844:	4b37      	ldr	r3, [pc, #220]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001846:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800184a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 20;
 800184c:	4b35      	ldr	r3, [pc, #212]	@ (8001924 <MX_TIM2_Init+0x110>)
 800184e:	2214      	movs	r2, #20
 8001850:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001852:	4b34      	ldr	r3, [pc, #208]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001854:	2200      	movs	r2, #0
 8001856:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100000;
 8001858:	4b32      	ldr	r3, [pc, #200]	@ (8001924 <MX_TIM2_Init+0x110>)
 800185a:	4a33      	ldr	r2, [pc, #204]	@ (8001928 <MX_TIM2_Init+0x114>)
 800185c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800185e:	4b31      	ldr	r3, [pc, #196]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001860:	2200      	movs	r2, #0
 8001862:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001864:	4b2f      	ldr	r3, [pc, #188]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001866:	2200      	movs	r2, #0
 8001868:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800186a:	482e      	ldr	r0, [pc, #184]	@ (8001924 <MX_TIM2_Init+0x110>)
 800186c:	f001 fe44 	bl	80034f8 <HAL_TIM_Base_Init>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001876:	f000 faaf 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800187a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800187e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001880:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001884:	4619      	mov	r1, r3
 8001886:	4827      	ldr	r0, [pc, #156]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001888:	f002 f906 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 800188c:	4603      	mov	r3, r0
 800188e:	2b00      	cmp	r3, #0
 8001890:	d001      	beq.n	8001896 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001892:	f000 faa1 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001896:	4823      	ldr	r0, [pc, #140]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001898:	f001 fed6 	bl	8003648 <HAL_TIM_PWM_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d001      	beq.n	80018a6 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80018a2:	f000 fa99 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80018aa:	2300      	movs	r3, #0
 80018ac:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80018ae:	f107 0320 	add.w	r3, r7, #32
 80018b2:	4619      	mov	r1, r3
 80018b4:	481b      	ldr	r0, [pc, #108]	@ (8001924 <MX_TIM2_Init+0x110>)
 80018b6:	f002 fc89 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 80018ba:	4603      	mov	r3, r0
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d001      	beq.n	80018c4 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80018c0:	f000 fa8a 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018c4:	2360      	movs	r3, #96	@ 0x60
 80018c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80018cc:	2300      	movs	r3, #0
 80018ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018d0:	2300      	movs	r3, #0
 80018d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018d4:	1d3b      	adds	r3, r7, #4
 80018d6:	2200      	movs	r2, #0
 80018d8:	4619      	mov	r1, r3
 80018da:	4812      	ldr	r0, [pc, #72]	@ (8001924 <MX_TIM2_Init+0x110>)
 80018dc:	f002 f81a 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 80018e0:	4603      	mov	r3, r0
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d001      	beq.n	80018ea <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 80018e6:	f000 fa77 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80018ea:	1d3b      	adds	r3, r7, #4
 80018ec:	2204      	movs	r2, #4
 80018ee:	4619      	mov	r1, r3
 80018f0:	480c      	ldr	r0, [pc, #48]	@ (8001924 <MX_TIM2_Init+0x110>)
 80018f2:	f002 f80f 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM2_Init+0xec>
  {
    Error_Handler();
 80018fc:	f000 fa6c 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001900:	1d3b      	adds	r3, r7, #4
 8001902:	2208      	movs	r2, #8
 8001904:	4619      	mov	r1, r3
 8001906:	4807      	ldr	r0, [pc, #28]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001908:	f002 f804 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 800190c:	4603      	mov	r3, r0
 800190e:	2b00      	cmp	r3, #0
 8001910:	d001      	beq.n	8001916 <MX_TIM2_Init+0x102>
  {
    Error_Handler();
 8001912:	f000 fa61 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001916:	4803      	ldr	r0, [pc, #12]	@ (8001924 <MX_TIM2_Init+0x110>)
 8001918:	f000 fb04 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 800191c:	bf00      	nop
 800191e:	3738      	adds	r7, #56	@ 0x38
 8001920:	46bd      	mov	sp, r7
 8001922:	bd80      	pop	{r7, pc}
 8001924:	20000244 	.word	0x20000244
 8001928:	000186a0 	.word	0x000186a0

0800192c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800192c:	b580      	push	{r7, lr}
 800192e:	b08e      	sub	sp, #56	@ 0x38
 8001930:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001932:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001936:	2200      	movs	r2, #0
 8001938:	601a      	str	r2, [r3, #0]
 800193a:	605a      	str	r2, [r3, #4]
 800193c:	609a      	str	r2, [r3, #8]
 800193e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001940:	f107 0320 	add.w	r3, r7, #32
 8001944:	2200      	movs	r2, #0
 8001946:	601a      	str	r2, [r3, #0]
 8001948:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800194a:	1d3b      	adds	r3, r7, #4
 800194c:	2200      	movs	r2, #0
 800194e:	601a      	str	r2, [r3, #0]
 8001950:	605a      	str	r2, [r3, #4]
 8001952:	609a      	str	r2, [r3, #8]
 8001954:	60da      	str	r2, [r3, #12]
 8001956:	611a      	str	r2, [r3, #16]
 8001958:	615a      	str	r2, [r3, #20]
 800195a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800195c:	4b3d      	ldr	r3, [pc, #244]	@ (8001a54 <MX_TIM3_Init+0x128>)
 800195e:	4a3e      	ldr	r2, [pc, #248]	@ (8001a58 <MX_TIM3_Init+0x12c>)
 8001960:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 40;
 8001962:	4b3c      	ldr	r3, [pc, #240]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001964:	2228      	movs	r2, #40	@ 0x28
 8001966:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001968:	4b3a      	ldr	r3, [pc, #232]	@ (8001a54 <MX_TIM3_Init+0x128>)
 800196a:	2200      	movs	r2, #0
 800196c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 50000;
 800196e:	4b39      	ldr	r3, [pc, #228]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001970:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001974:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001976:	4b37      	ldr	r3, [pc, #220]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001978:	2200      	movs	r2, #0
 800197a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800197c:	4b35      	ldr	r3, [pc, #212]	@ (8001a54 <MX_TIM3_Init+0x128>)
 800197e:	2200      	movs	r2, #0
 8001980:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001982:	4834      	ldr	r0, [pc, #208]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001984:	f001 fdb8 	bl	80034f8 <HAL_TIM_Base_Init>
 8001988:	4603      	mov	r3, r0
 800198a:	2b00      	cmp	r3, #0
 800198c:	d001      	beq.n	8001992 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800198e:	f000 fa23 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001992:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001996:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001998:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800199c:	4619      	mov	r1, r3
 800199e:	482d      	ldr	r0, [pc, #180]	@ (8001a54 <MX_TIM3_Init+0x128>)
 80019a0:	f002 f87a 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 80019a4:	4603      	mov	r3, r0
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d001      	beq.n	80019ae <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 80019aa:	f000 fa15 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80019ae:	4829      	ldr	r0, [pc, #164]	@ (8001a54 <MX_TIM3_Init+0x128>)
 80019b0:	f001 fe4a 	bl	8003648 <HAL_TIM_PWM_Init>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 80019ba:	f000 fa0d 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019be:	2300      	movs	r3, #0
 80019c0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80019c6:	f107 0320 	add.w	r3, r7, #32
 80019ca:	4619      	mov	r1, r3
 80019cc:	4821      	ldr	r0, [pc, #132]	@ (8001a54 <MX_TIM3_Init+0x128>)
 80019ce:	f002 fbfd 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80019d8:	f000 f9fe 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80019dc:	2360      	movs	r3, #96	@ 0x60
 80019de:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80019e0:	2300      	movs	r3, #0
 80019e2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80019e4:	2300      	movs	r3, #0
 80019e6:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80019e8:	2300      	movs	r3, #0
 80019ea:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80019ec:	1d3b      	adds	r3, r7, #4
 80019ee:	2200      	movs	r2, #0
 80019f0:	4619      	mov	r1, r3
 80019f2:	4818      	ldr	r0, [pc, #96]	@ (8001a54 <MX_TIM3_Init+0x128>)
 80019f4:	f001 ff8e 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 80019f8:	4603      	mov	r3, r0
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d001      	beq.n	8001a02 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80019fe:	f000 f9eb 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a02:	1d3b      	adds	r3, r7, #4
 8001a04:	2204      	movs	r2, #4
 8001a06:	4619      	mov	r1, r3
 8001a08:	4812      	ldr	r0, [pc, #72]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001a0a:	f001 ff83 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <MX_TIM3_Init+0xec>
  {
    Error_Handler();
 8001a14:	f000 f9e0 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a18:	1d3b      	adds	r3, r7, #4
 8001a1a:	2208      	movs	r2, #8
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	480d      	ldr	r0, [pc, #52]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001a20:	f001 ff78 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <MX_TIM3_Init+0x102>
  {
    Error_Handler();
 8001a2a:	f000 f9d5 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a2e:	1d3b      	adds	r3, r7, #4
 8001a30:	220c      	movs	r2, #12
 8001a32:	4619      	mov	r1, r3
 8001a34:	4807      	ldr	r0, [pc, #28]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001a36:	f001 ff6d 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <MX_TIM3_Init+0x118>
  {
    Error_Handler();
 8001a40:	f000 f9ca 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001a44:	4803      	ldr	r0, [pc, #12]	@ (8001a54 <MX_TIM3_Init+0x128>)
 8001a46:	f000 fa6d 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001a4a:	bf00      	nop
 8001a4c:	3738      	adds	r7, #56	@ 0x38
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	2000028c 	.word	0x2000028c
 8001a58:	40000400 	.word	0x40000400

08001a5c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08e      	sub	sp, #56	@ 0x38
 8001a60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a62:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a66:	2200      	movs	r2, #0
 8001a68:	601a      	str	r2, [r3, #0]
 8001a6a:	605a      	str	r2, [r3, #4]
 8001a6c:	609a      	str	r2, [r3, #8]
 8001a6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a70:	f107 0320 	add.w	r3, r7, #32
 8001a74:	2200      	movs	r2, #0
 8001a76:	601a      	str	r2, [r3, #0]
 8001a78:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a7a:	1d3b      	adds	r3, r7, #4
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	601a      	str	r2, [r3, #0]
 8001a80:	605a      	str	r2, [r3, #4]
 8001a82:	609a      	str	r2, [r3, #8]
 8001a84:	60da      	str	r2, [r3, #12]
 8001a86:	611a      	str	r2, [r3, #16]
 8001a88:	615a      	str	r2, [r3, #20]
 8001a8a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001a8c:	4b3d      	ldr	r3, [pc, #244]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001a8e:	4a3e      	ldr	r2, [pc, #248]	@ (8001b88 <MX_TIM4_Init+0x12c>)
 8001a90:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 40;
 8001a92:	4b3c      	ldr	r3, [pc, #240]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001a94:	2228      	movs	r2, #40	@ 0x28
 8001a96:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a98:	4b3a      	ldr	r3, [pc, #232]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001a9a:	2200      	movs	r2, #0
 8001a9c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 50000;
 8001a9e:	4b39      	ldr	r3, [pc, #228]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001aa0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001aa4:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001aa6:	4b37      	ldr	r3, [pc, #220]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aac:	4b35      	ldr	r3, [pc, #212]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001ab2:	4834      	ldr	r0, [pc, #208]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001ab4:	f001 fd20 	bl	80034f8 <HAL_TIM_Base_Init>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d001      	beq.n	8001ac2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001abe:	f000 f98b 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ac2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001ac8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001acc:	4619      	mov	r1, r3
 8001ace:	482d      	ldr	r0, [pc, #180]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001ad0:	f001 ffe2 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d001      	beq.n	8001ade <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001ada:	f000 f97d 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001ade:	4829      	ldr	r0, [pc, #164]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001ae0:	f001 fdb2 	bl	8003648 <HAL_TIM_PWM_Init>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d001      	beq.n	8001aee <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001aea:	f000 f975 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001aee:	2300      	movs	r3, #0
 8001af0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001af6:	f107 0320 	add.w	r3, r7, #32
 8001afa:	4619      	mov	r1, r3
 8001afc:	4821      	ldr	r0, [pc, #132]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001afe:	f002 fb65 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001b08:	f000 f966 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b0c:	2360      	movs	r3, #96	@ 0x60
 8001b0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001b10:	2300      	movs	r3, #0
 8001b12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001b14:	2300      	movs	r3, #0
 8001b16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b1c:	1d3b      	adds	r3, r7, #4
 8001b1e:	2200      	movs	r2, #0
 8001b20:	4619      	mov	r1, r3
 8001b22:	4818      	ldr	r0, [pc, #96]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001b24:	f001 fef6 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001b2e:	f000 f953 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001b32:	1d3b      	adds	r3, r7, #4
 8001b34:	2204      	movs	r2, #4
 8001b36:	4619      	mov	r1, r3
 8001b38:	4812      	ldr	r0, [pc, #72]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001b3a:	f001 feeb 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d001      	beq.n	8001b48 <MX_TIM4_Init+0xec>
  {
    Error_Handler();
 8001b44:	f000 f948 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001b48:	1d3b      	adds	r3, r7, #4
 8001b4a:	2208      	movs	r2, #8
 8001b4c:	4619      	mov	r1, r3
 8001b4e:	480d      	ldr	r0, [pc, #52]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001b50:	f001 fee0 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <MX_TIM4_Init+0x102>
  {
    Error_Handler();
 8001b5a:	f000 f93d 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	220c      	movs	r2, #12
 8001b62:	4619      	mov	r1, r3
 8001b64:	4807      	ldr	r0, [pc, #28]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001b66:	f001 fed5 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <MX_TIM4_Init+0x118>
  {
    Error_Handler();
 8001b70:	f000 f932 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001b74:	4803      	ldr	r0, [pc, #12]	@ (8001b84 <MX_TIM4_Init+0x128>)
 8001b76:	f000 f9d5 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001b7a:	bf00      	nop
 8001b7c:	3738      	adds	r7, #56	@ 0x38
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	200002d4 	.word	0x200002d4
 8001b88:	40000800 	.word	0x40000800

08001b8c <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b08e      	sub	sp, #56	@ 0x38
 8001b90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001b92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]
 8001b9c:	609a      	str	r2, [r3, #8]
 8001b9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ba0:	f107 0320 	add.w	r3, r7, #32
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001baa:	1d3b      	adds	r3, r7, #4
 8001bac:	2200      	movs	r2, #0
 8001bae:	601a      	str	r2, [r3, #0]
 8001bb0:	605a      	str	r2, [r3, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
 8001bb4:	60da      	str	r2, [r3, #12]
 8001bb6:	611a      	str	r2, [r3, #16]
 8001bb8:	615a      	str	r2, [r3, #20]
 8001bba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001bbc:	4b2c      	ldr	r3, [pc, #176]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001bbe:	4a2d      	ldr	r2, [pc, #180]	@ (8001c74 <MX_TIM5_Init+0xe8>)
 8001bc0:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 40;
 8001bc2:	4b2b      	ldr	r3, [pc, #172]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001bc4:	2228      	movs	r2, #40	@ 0x28
 8001bc6:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001bc8:	4b29      	ldr	r3, [pc, #164]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001bca:	2200      	movs	r2, #0
 8001bcc:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 50000;
 8001bce:	4b28      	ldr	r3, [pc, #160]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001bd0:	f24c 3250 	movw	r2, #50000	@ 0xc350
 8001bd4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bd6:	4b26      	ldr	r3, [pc, #152]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001bd8:	2200      	movs	r2, #0
 8001bda:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bdc:	4b24      	ldr	r3, [pc, #144]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001bde:	2200      	movs	r2, #0
 8001be0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001be2:	4823      	ldr	r0, [pc, #140]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001be4:	f001 fc88 	bl	80034f8 <HAL_TIM_Base_Init>
 8001be8:	4603      	mov	r3, r0
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d001      	beq.n	8001bf2 <MX_TIM5_Init+0x66>
  {
    Error_Handler();
 8001bee:	f000 f8f3 	bl	8001dd8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001bf2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001bf6:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001bf8:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001bfc:	4619      	mov	r1, r3
 8001bfe:	481c      	ldr	r0, [pc, #112]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001c00:	f001 ff4a 	bl	8003a98 <HAL_TIM_ConfigClockSource>
 8001c04:	4603      	mov	r3, r0
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d001      	beq.n	8001c0e <MX_TIM5_Init+0x82>
  {
    Error_Handler();
 8001c0a:	f000 f8e5 	bl	8001dd8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 8001c0e:	4818      	ldr	r0, [pc, #96]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001c10:	f001 fd1a 	bl	8003648 <HAL_TIM_PWM_Init>
 8001c14:	4603      	mov	r3, r0
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d001      	beq.n	8001c1e <MX_TIM5_Init+0x92>
  {
    Error_Handler();
 8001c1a:	f000 f8dd 	bl	8001dd8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c22:	2300      	movs	r3, #0
 8001c24:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001c26:	f107 0320 	add.w	r3, r7, #32
 8001c2a:	4619      	mov	r1, r3
 8001c2c:	4810      	ldr	r0, [pc, #64]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001c2e:	f002 facd 	bl	80041cc <HAL_TIMEx_MasterConfigSynchronization>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <MX_TIM5_Init+0xb0>
  {
    Error_Handler();
 8001c38:	f000 f8ce 	bl	8001dd8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001c3c:	2360      	movs	r3, #96	@ 0x60
 8001c3e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001c40:	2300      	movs	r3, #0
 8001c42:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c44:	2300      	movs	r3, #0
 8001c46:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c48:	2300      	movs	r3, #0
 8001c4a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c4c:	1d3b      	adds	r3, r7, #4
 8001c4e:	2200      	movs	r2, #0
 8001c50:	4619      	mov	r1, r3
 8001c52:	4807      	ldr	r0, [pc, #28]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001c54:	f001 fe5e 	bl	8003914 <HAL_TIM_PWM_ConfigChannel>
 8001c58:	4603      	mov	r3, r0
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d001      	beq.n	8001c62 <MX_TIM5_Init+0xd6>
  {
    Error_Handler();
 8001c5e:	f000 f8bb 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001c62:	4803      	ldr	r0, [pc, #12]	@ (8001c70 <MX_TIM5_Init+0xe4>)
 8001c64:	f000 f95e 	bl	8001f24 <HAL_TIM_MspPostInit>

}
 8001c68:	bf00      	nop
 8001c6a:	3738      	adds	r7, #56	@ 0x38
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}
 8001c70:	2000031c 	.word	0x2000031c
 8001c74:	40000c00 	.word	0x40000c00

08001c78 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001c7c:	4b11      	ldr	r3, [pc, #68]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c7e:	4a12      	ldr	r2, [pc, #72]	@ (8001cc8 <MX_USART2_UART_Init+0x50>)
 8001c80:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 1200;
 8001c82:	4b10      	ldr	r3, [pc, #64]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c84:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8001c88:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c8a:	4b0e      	ldr	r3, [pc, #56]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c92:	2200      	movs	r2, #0
 8001c94:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c96:	4b0b      	ldr	r3, [pc, #44]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c98:	2200      	movs	r2, #0
 8001c9a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c9c:	4b09      	ldr	r3, [pc, #36]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001c9e:	220c      	movs	r2, #12
 8001ca0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001ca2:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ca8:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001cae:	4805      	ldr	r0, [pc, #20]	@ (8001cc4 <MX_USART2_UART_Init+0x4c>)
 8001cb0:	f002 fb4c 	bl	800434c <HAL_UART_Init>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001cba:	f000 f88d 	bl	8001dd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001cbe:	bf00      	nop
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000364 	.word	0x20000364
 8001cc8:	40004400 	.word	0x40004400

08001ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b08a      	sub	sp, #40	@ 0x28
 8001cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cd2:	f107 0314 	add.w	r3, r7, #20
 8001cd6:	2200      	movs	r2, #0
 8001cd8:	601a      	str	r2, [r3, #0]
 8001cda:	605a      	str	r2, [r3, #4]
 8001cdc:	609a      	str	r2, [r3, #8]
 8001cde:	60da      	str	r2, [r3, #12]
 8001ce0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	613b      	str	r3, [r7, #16]
 8001ce6:	4b38      	ldr	r3, [pc, #224]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cea:	4a37      	ldr	r2, [pc, #220]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001cec:	f043 0304 	orr.w	r3, r3, #4
 8001cf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001cf2:	4b35      	ldr	r3, [pc, #212]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001cf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cf6:	f003 0304 	and.w	r3, r3, #4
 8001cfa:	613b      	str	r3, [r7, #16]
 8001cfc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001cfe:	2300      	movs	r3, #0
 8001d00:	60fb      	str	r3, [r7, #12]
 8001d02:	4b31      	ldr	r3, [pc, #196]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d06:	4a30      	ldr	r2, [pc, #192]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d08:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d0e:	4b2e      	ldr	r3, [pc, #184]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d12:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001d16:	60fb      	str	r3, [r7, #12]
 8001d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	60bb      	str	r3, [r7, #8]
 8001d1e:	4b2a      	ldr	r3, [pc, #168]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d22:	4a29      	ldr	r2, [pc, #164]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d24:	f043 0301 	orr.w	r3, r3, #1
 8001d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d2a:	4b27      	ldr	r3, [pc, #156]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d2e:	f003 0301 	and.w	r3, r3, #1
 8001d32:	60bb      	str	r3, [r7, #8]
 8001d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d36:	2300      	movs	r3, #0
 8001d38:	607b      	str	r3, [r7, #4]
 8001d3a:	4b23      	ldr	r3, [pc, #140]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d3e:	4a22      	ldr	r2, [pc, #136]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d40:	f043 0302 	orr.w	r3, r3, #2
 8001d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8001d46:	4b20      	ldr	r3, [pc, #128]	@ (8001dc8 <MX_GPIO_Init+0xfc>)
 8001d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001d4a:	f003 0302 	and.w	r3, r3, #2
 8001d4e:	607b      	str	r3, [r7, #4]
 8001d50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001d52:	2200      	movs	r2, #0
 8001d54:	2120      	movs	r1, #32
 8001d56:	481d      	ldr	r0, [pc, #116]	@ (8001dcc <MX_GPIO_Init+0x100>)
 8001d58:	f000 ff1c 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	f44f 4160 	mov.w	r1, #57344	@ 0xe000
 8001d62:	481b      	ldr	r0, [pc, #108]	@ (8001dd0 <MX_GPIO_Init+0x104>)
 8001d64:	f000 ff16 	bl	8002b94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001d68:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d6c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001d6e:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8001d72:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d74:	2300      	movs	r3, #0
 8001d76:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d78:	f107 0314 	add.w	r3, r7, #20
 8001d7c:	4619      	mov	r1, r3
 8001d7e:	4815      	ldr	r0, [pc, #84]	@ (8001dd4 <MX_GPIO_Init+0x108>)
 8001d80:	f000 fd84 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001d84:	2320      	movs	r3, #32
 8001d86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d90:	2300      	movs	r3, #0
 8001d92:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001d94:	f107 0314 	add.w	r3, r7, #20
 8001d98:	4619      	mov	r1, r3
 8001d9a:	480c      	ldr	r0, [pc, #48]	@ (8001dcc <MX_GPIO_Init+0x100>)
 8001d9c:	f000 fd76 	bl	800288c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001da0:	f44f 4360 	mov.w	r3, #57344	@ 0xe000
 8001da4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001da6:	2301      	movs	r3, #1
 8001da8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001daa:	2300      	movs	r3, #0
 8001dac:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dae:	2300      	movs	r3, #0
 8001db0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001db2:	f107 0314 	add.w	r3, r7, #20
 8001db6:	4619      	mov	r1, r3
 8001db8:	4805      	ldr	r0, [pc, #20]	@ (8001dd0 <MX_GPIO_Init+0x104>)
 8001dba:	f000 fd67 	bl	800288c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001dbe:	bf00      	nop
 8001dc0:	3728      	adds	r7, #40	@ 0x28
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}
 8001dc6:	bf00      	nop
 8001dc8:	40023800 	.word	0x40023800
 8001dcc:	40020000 	.word	0x40020000
 8001dd0:	40020400 	.word	0x40020400
 8001dd4:	40020800 	.word	0x40020800

08001dd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dd8:	b480      	push	{r7}
 8001dda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ddc:	b672      	cpsid	i
}
 8001dde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <Error_Handler+0x8>

08001de4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dea:	2300      	movs	r3, #0
 8001dec:	607b      	str	r3, [r7, #4]
 8001dee:	4b10      	ldr	r3, [pc, #64]	@ (8001e30 <HAL_MspInit+0x4c>)
 8001df0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001df2:	4a0f      	ldr	r2, [pc, #60]	@ (8001e30 <HAL_MspInit+0x4c>)
 8001df4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001df8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	@ (8001e30 <HAL_MspInit+0x4c>)
 8001dfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001dfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001e02:	607b      	str	r3, [r7, #4]
 8001e04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e06:	2300      	movs	r3, #0
 8001e08:	603b      	str	r3, [r7, #0]
 8001e0a:	4b09      	ldr	r3, [pc, #36]	@ (8001e30 <HAL_MspInit+0x4c>)
 8001e0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e0e:	4a08      	ldr	r2, [pc, #32]	@ (8001e30 <HAL_MspInit+0x4c>)
 8001e10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e16:	4b06      	ldr	r3, [pc, #24]	@ (8001e30 <HAL_MspInit+0x4c>)
 8001e18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e1e:	603b      	str	r3, [r7, #0]
 8001e20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40023800 	.word	0x40023800

08001e34 <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b089      	sub	sp, #36	@ 0x24
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a33      	ldr	r2, [pc, #204]	@ (8001f10 <HAL_TIM_Base_MspInit+0xdc>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d10e      	bne.n	8001e64 <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	61fb      	str	r3, [r7, #28]
 8001e4a:	4b32      	ldr	r3, [pc, #200]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e4e:	4a31      	ldr	r2, [pc, #196]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	6453      	str	r3, [r2, #68]	@ 0x44
 8001e56:	4b2f      	ldr	r3, [pc, #188]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e5a:	f003 0301 	and.w	r3, r3, #1
 8001e5e:	61fb      	str	r3, [r7, #28]
 8001e60:	69fb      	ldr	r3, [r7, #28]
    /* USER CODE BEGIN TIM5_MspInit 1 */

    /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001e62:	e04e      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM2)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001e6c:	d10e      	bne.n	8001e8c <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001e6e:	2300      	movs	r3, #0
 8001e70:	61bb      	str	r3, [r7, #24]
 8001e72:	4b28      	ldr	r3, [pc, #160]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e76:	4a27      	ldr	r2, [pc, #156]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e7e:	4b25      	ldr	r3, [pc, #148]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e82:	f003 0301 	and.w	r3, r3, #1
 8001e86:	61bb      	str	r3, [r7, #24]
 8001e88:	69bb      	ldr	r3, [r7, #24]
}
 8001e8a:	e03a      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM3)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	4a21      	ldr	r2, [pc, #132]	@ (8001f18 <HAL_TIM_Base_MspInit+0xe4>)
 8001e92:	4293      	cmp	r3, r2
 8001e94:	d10e      	bne.n	8001eb4 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e96:	2300      	movs	r3, #0
 8001e98:	617b      	str	r3, [r7, #20]
 8001e9a:	4b1e      	ldr	r3, [pc, #120]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001e9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ea0:	f043 0302 	orr.w	r3, r3, #2
 8001ea4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ea6:	4b1b      	ldr	r3, [pc, #108]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eaa:	f003 0302 	and.w	r3, r3, #2
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	697b      	ldr	r3, [r7, #20]
}
 8001eb2:	e026      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a18      	ldr	r2, [pc, #96]	@ (8001f1c <HAL_TIM_Base_MspInit+0xe8>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d10e      	bne.n	8001edc <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	4b14      	ldr	r3, [pc, #80]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ec4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ec6:	4a13      	ldr	r2, [pc, #76]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ec8:	f043 0304 	orr.w	r3, r3, #4
 8001ecc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ece:	4b11      	ldr	r3, [pc, #68]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ed0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ed2:	f003 0304 	and.w	r3, r3, #4
 8001ed6:	613b      	str	r3, [r7, #16]
 8001ed8:	693b      	ldr	r3, [r7, #16]
}
 8001eda:	e012      	b.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM5)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a0f      	ldr	r2, [pc, #60]	@ (8001f20 <HAL_TIM_Base_MspInit+0xec>)
 8001ee2:	4293      	cmp	r3, r2
 8001ee4:	d10d      	bne.n	8001f02 <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	60fb      	str	r3, [r7, #12]
 8001eea:	4b0a      	ldr	r3, [pc, #40]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001eec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eee:	4a09      	ldr	r2, [pc, #36]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ef0:	f043 0308 	orr.w	r3, r3, #8
 8001ef4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ef6:	4b07      	ldr	r3, [pc, #28]	@ (8001f14 <HAL_TIM_Base_MspInit+0xe0>)
 8001ef8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001efa:	f003 0308 	and.w	r3, r3, #8
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
}
 8001f02:	bf00      	nop
 8001f04:	3724      	adds	r7, #36	@ 0x24
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	40010000 	.word	0x40010000
 8001f14:	40023800 	.word	0x40023800
 8001f18:	40000400 	.word	0x40000400
 8001f1c:	40000800 	.word	0x40000800
 8001f20:	40000c00 	.word	0x40000c00

08001f24 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001f24:	b580      	push	{r7, lr}
 8001f26:	b08e      	sub	sp, #56	@ 0x38
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f2c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f30:	2200      	movs	r2, #0
 8001f32:	601a      	str	r2, [r3, #0]
 8001f34:	605a      	str	r2, [r3, #4]
 8001f36:	609a      	str	r2, [r3, #8]
 8001f38:	60da      	str	r2, [r3, #12]
 8001f3a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	4a7a      	ldr	r2, [pc, #488]	@ (800212c <HAL_TIM_MspPostInit+0x208>)
 8001f42:	4293      	cmp	r3, r2
 8001f44:	d11f      	bne.n	8001f86 <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f46:	2300      	movs	r3, #0
 8001f48:	623b      	str	r3, [r7, #32]
 8001f4a:	4b79      	ldr	r3, [pc, #484]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4e:	4a78      	ldr	r2, [pc, #480]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001f50:	f043 0301 	orr.w	r3, r3, #1
 8001f54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f56:	4b76      	ldr	r3, [pc, #472]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f5a:	f003 0301 	and.w	r3, r3, #1
 8001f5e:	623b      	str	r3, [r7, #32]
 8001f60:	6a3b      	ldr	r3, [r7, #32]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8001f62:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001f66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f68:	2302      	movs	r3, #2
 8001f6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f70:	2300      	movs	r3, #0
 8001f72:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001f74:	2301      	movs	r3, #1
 8001f76:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f78:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	486d      	ldr	r0, [pc, #436]	@ (8002134 <HAL_TIM_MspPostInit+0x210>)
 8001f80:	f000 fc84 	bl	800288c <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM5_MspPostInit 1 */

    /* USER CODE END TIM5_MspPostInit 1 */
  }

}
 8001f84:	e0cd      	b.n	8002122 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM2)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001f8e:	d13e      	bne.n	800200e <HAL_TIM_MspPostInit+0xea>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f90:	2300      	movs	r3, #0
 8001f92:	61fb      	str	r3, [r7, #28]
 8001f94:	4b66      	ldr	r3, [pc, #408]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001f96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f98:	4a65      	ldr	r2, [pc, #404]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001f9a:	f043 0301 	orr.w	r3, r3, #1
 8001f9e:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fa0:	4b63      	ldr	r3, [pc, #396]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fa4:	f003 0301 	and.w	r3, r3, #1
 8001fa8:	61fb      	str	r3, [r7, #28]
 8001faa:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fac:	2300      	movs	r3, #0
 8001fae:	61bb      	str	r3, [r7, #24]
 8001fb0:	4b5f      	ldr	r3, [pc, #380]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001fb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fb4:	4a5e      	ldr	r2, [pc, #376]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001fb6:	f043 0302 	orr.w	r3, r3, #2
 8001fba:	6313      	str	r3, [r2, #48]	@ 0x30
 8001fbc:	4b5c      	ldr	r3, [pc, #368]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8001fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	61bb      	str	r3, [r7, #24]
 8001fc6:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_15;
 8001fc8:	f248 0302 	movw	r3, #32770	@ 0x8002
 8001fcc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fce:	2302      	movs	r3, #2
 8001fd0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd2:	2300      	movs	r3, #0
 8001fd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fde:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001fe2:	4619      	mov	r1, r3
 8001fe4:	4853      	ldr	r0, [pc, #332]	@ (8002134 <HAL_TIM_MspPostInit+0x210>)
 8001fe6:	f000 fc51 	bl	800288c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001fea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001fee:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff0:	2302      	movs	r3, #2
 8001ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001ffc:	2301      	movs	r3, #1
 8001ffe:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002000:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002004:	4619      	mov	r1, r3
 8002006:	484c      	ldr	r0, [pc, #304]	@ (8002138 <HAL_TIM_MspPostInit+0x214>)
 8002008:	f000 fc40 	bl	800288c <HAL_GPIO_Init>
}
 800200c:	e089      	b.n	8002122 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM3)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	4a4a      	ldr	r2, [pc, #296]	@ (800213c <HAL_TIM_MspPostInit+0x218>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d13c      	bne.n	8002092 <HAL_TIM_MspPostInit+0x16e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002018:	2300      	movs	r3, #0
 800201a:	617b      	str	r3, [r7, #20]
 800201c:	4b44      	ldr	r3, [pc, #272]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002020:	4a43      	ldr	r2, [pc, #268]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8002022:	f043 0301 	orr.w	r3, r3, #1
 8002026:	6313      	str	r3, [r2, #48]	@ 0x30
 8002028:	4b41      	ldr	r3, [pc, #260]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 800202a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800202c:	f003 0301 	and.w	r3, r3, #1
 8002030:	617b      	str	r3, [r7, #20]
 8002032:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002034:	2300      	movs	r3, #0
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	4b3d      	ldr	r3, [pc, #244]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 800203a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800203c:	4a3c      	ldr	r2, [pc, #240]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 800203e:	f043 0302 	orr.w	r3, r3, #2
 8002042:	6313      	str	r3, [r2, #48]	@ 0x30
 8002044:	4b3a      	ldr	r3, [pc, #232]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 8002046:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002048:	f003 0302 	and.w	r3, r3, #2
 800204c:	613b      	str	r3, [r7, #16]
 800204e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002050:	23c0      	movs	r3, #192	@ 0xc0
 8002052:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002054:	2302      	movs	r3, #2
 8002056:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002058:	2300      	movs	r3, #0
 800205a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800205c:	2300      	movs	r3, #0
 800205e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002060:	2302      	movs	r3, #2
 8002062:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002064:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002068:	4619      	mov	r1, r3
 800206a:	4832      	ldr	r0, [pc, #200]	@ (8002134 <HAL_TIM_MspPostInit+0x210>)
 800206c:	f000 fc0e 	bl	800288c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002070:	2303      	movs	r3, #3
 8002072:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002074:	2302      	movs	r3, #2
 8002076:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002078:	2300      	movs	r3, #0
 800207a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800207c:	2300      	movs	r3, #0
 800207e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002080:	2302      	movs	r3, #2
 8002082:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002084:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002088:	4619      	mov	r1, r3
 800208a:	482b      	ldr	r0, [pc, #172]	@ (8002138 <HAL_TIM_MspPostInit+0x214>)
 800208c:	f000 fbfe 	bl	800288c <HAL_GPIO_Init>
}
 8002090:	e047      	b.n	8002122 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM4)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	4a2a      	ldr	r2, [pc, #168]	@ (8002140 <HAL_TIM_MspPostInit+0x21c>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d11f      	bne.n	80020dc <HAL_TIM_MspPostInit+0x1b8>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209c:	2300      	movs	r3, #0
 800209e:	60fb      	str	r3, [r7, #12]
 80020a0:	4b23      	ldr	r3, [pc, #140]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 80020a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a4:	4a22      	ldr	r2, [pc, #136]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 80020a6:	f043 0302 	orr.w	r3, r3, #2
 80020aa:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ac:	4b20      	ldr	r3, [pc, #128]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 80020ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b0:	f003 0302 	and.w	r3, r3, #2
 80020b4:	60fb      	str	r3, [r7, #12]
 80020b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 80020b8:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 80020bc:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020be:	2302      	movs	r3, #2
 80020c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020c6:	2300      	movs	r3, #0
 80020c8:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020ca:	2302      	movs	r3, #2
 80020cc:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020d2:	4619      	mov	r1, r3
 80020d4:	4818      	ldr	r0, [pc, #96]	@ (8002138 <HAL_TIM_MspPostInit+0x214>)
 80020d6:	f000 fbd9 	bl	800288c <HAL_GPIO_Init>
}
 80020da:	e022      	b.n	8002122 <HAL_TIM_MspPostInit+0x1fe>
  else if(htim->Instance==TIM5)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	4a18      	ldr	r2, [pc, #96]	@ (8002144 <HAL_TIM_MspPostInit+0x220>)
 80020e2:	4293      	cmp	r3, r2
 80020e4:	d11d      	bne.n	8002122 <HAL_TIM_MspPostInit+0x1fe>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020e6:	2300      	movs	r3, #0
 80020e8:	60bb      	str	r3, [r7, #8]
 80020ea:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	4a10      	ldr	r2, [pc, #64]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 80020f0:	f043 0301 	orr.w	r3, r3, #1
 80020f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80020f6:	4b0e      	ldr	r3, [pc, #56]	@ (8002130 <HAL_TIM_MspPostInit+0x20c>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	f003 0301 	and.w	r3, r3, #1
 80020fe:	60bb      	str	r3, [r7, #8]
 8002100:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002102:	2301      	movs	r3, #1
 8002104:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002106:	2302      	movs	r3, #2
 8002108:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800210e:	2300      	movs	r3, #0
 8002110:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8002112:	2302      	movs	r3, #2
 8002114:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002116:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800211a:	4619      	mov	r1, r3
 800211c:	4805      	ldr	r0, [pc, #20]	@ (8002134 <HAL_TIM_MspPostInit+0x210>)
 800211e:	f000 fbb5 	bl	800288c <HAL_GPIO_Init>
}
 8002122:	bf00      	nop
 8002124:	3738      	adds	r7, #56	@ 0x38
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	40010000 	.word	0x40010000
 8002130:	40023800 	.word	0x40023800
 8002134:	40020000 	.word	0x40020000
 8002138:	40020400 	.word	0x40020400
 800213c:	40000400 	.word	0x40000400
 8002140:	40000800 	.word	0x40000800
 8002144:	40000c00 	.word	0x40000c00

08002148 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b08a      	sub	sp, #40	@ 0x28
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	2200      	movs	r2, #0
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	605a      	str	r2, [r3, #4]
 800215a:	609a      	str	r2, [r3, #8]
 800215c:	60da      	str	r2, [r3, #12]
 800215e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	4a1d      	ldr	r2, [pc, #116]	@ (80021dc <HAL_UART_MspInit+0x94>)
 8002166:	4293      	cmp	r3, r2
 8002168:	d133      	bne.n	80021d2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800216a:	2300      	movs	r3, #0
 800216c:	613b      	str	r3, [r7, #16]
 800216e:	4b1c      	ldr	r3, [pc, #112]	@ (80021e0 <HAL_UART_MspInit+0x98>)
 8002170:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002172:	4a1b      	ldr	r2, [pc, #108]	@ (80021e0 <HAL_UART_MspInit+0x98>)
 8002174:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002178:	6413      	str	r3, [r2, #64]	@ 0x40
 800217a:	4b19      	ldr	r3, [pc, #100]	@ (80021e0 <HAL_UART_MspInit+0x98>)
 800217c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002182:	613b      	str	r3, [r7, #16]
 8002184:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b15      	ldr	r3, [pc, #84]	@ (80021e0 <HAL_UART_MspInit+0x98>)
 800218c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218e:	4a14      	ldr	r2, [pc, #80]	@ (80021e0 <HAL_UART_MspInit+0x98>)
 8002190:	f043 0301 	orr.w	r3, r3, #1
 8002194:	6313      	str	r3, [r2, #48]	@ 0x30
 8002196:	4b12      	ldr	r3, [pc, #72]	@ (80021e0 <HAL_UART_MspInit+0x98>)
 8002198:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800219a:	f003 0301 	and.w	r3, r3, #1
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80021a2:	230c      	movs	r3, #12
 80021a4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a6:	2302      	movs	r3, #2
 80021a8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021aa:	2300      	movs	r3, #0
 80021ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021ae:	2300      	movs	r3, #0
 80021b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021b2:	2307      	movs	r3, #7
 80021b4:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b6:	f107 0314 	add.w	r3, r7, #20
 80021ba:	4619      	mov	r1, r3
 80021bc:	4809      	ldr	r0, [pc, #36]	@ (80021e4 <HAL_UART_MspInit+0x9c>)
 80021be:	f000 fb65 	bl	800288c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80021c2:	2200      	movs	r2, #0
 80021c4:	2100      	movs	r1, #0
 80021c6:	2026      	movs	r0, #38	@ 0x26
 80021c8:	f000 fa97 	bl	80026fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80021cc:	2026      	movs	r0, #38	@ 0x26
 80021ce:	f000 fab0 	bl	8002732 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021d2:	bf00      	nop
 80021d4:	3728      	adds	r7, #40	@ 0x28
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40004400 	.word	0x40004400
 80021e0:	40023800 	.word	0x40023800
 80021e4:	40020000 	.word	0x40020000

080021e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80021ec:	bf00      	nop
 80021ee:	e7fd      	b.n	80021ec <NMI_Handler+0x4>

080021f0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021f0:	b480      	push	{r7}
 80021f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021f4:	bf00      	nop
 80021f6:	e7fd      	b.n	80021f4 <HardFault_Handler+0x4>

080021f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021f8:	b480      	push	{r7}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <MemManage_Handler+0x4>

08002200 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002204:	bf00      	nop
 8002206:	e7fd      	b.n	8002204 <BusFault_Handler+0x4>

08002208 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800220c:	bf00      	nop
 800220e:	e7fd      	b.n	800220c <UsageFault_Handler+0x4>

08002210 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002210:	b480      	push	{r7}
 8002212:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr

0800221e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800221e:	b480      	push	{r7}
 8002220:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002222:	bf00      	nop
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr

0800222c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002230:	bf00      	nop
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr

0800223a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800223a:	b580      	push	{r7, lr}
 800223c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800223e:	f000 f961 	bl	8002504 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002242:	bf00      	nop
 8002244:	bd80      	pop	{r7, pc}
	...

08002248 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800224c:	4802      	ldr	r0, [pc, #8]	@ (8002258 <USART2_IRQHandler+0x10>)
 800224e:	f002 f97d 	bl	800454c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002252:	bf00      	nop
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000364 	.word	0x20000364

0800225c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800225c:	b480      	push	{r7}
 800225e:	af00      	add	r7, sp, #0
  return 1;
 8002260:	2301      	movs	r3, #1
}
 8002262:	4618      	mov	r0, r3
 8002264:	46bd      	mov	sp, r7
 8002266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226a:	4770      	bx	lr

0800226c <_kill>:

int _kill(int pid, int sig)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b082      	sub	sp, #8
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
 8002274:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002276:	f004 fedd 	bl	8007034 <__errno>
 800227a:	4603      	mov	r3, r0
 800227c:	2216      	movs	r2, #22
 800227e:	601a      	str	r2, [r3, #0]
  return -1;
 8002280:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002284:	4618      	mov	r0, r3
 8002286:	3708      	adds	r7, #8
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}

0800228c <_exit>:

void _exit (int status)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b082      	sub	sp, #8
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002294:	f04f 31ff 	mov.w	r1, #4294967295
 8002298:	6878      	ldr	r0, [r7, #4]
 800229a:	f7ff ffe7 	bl	800226c <_kill>
  while (1) {}    /* Make sure we hang here */
 800229e:	bf00      	nop
 80022a0:	e7fd      	b.n	800229e <_exit+0x12>

080022a2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80022a2:	b580      	push	{r7, lr}
 80022a4:	b086      	sub	sp, #24
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	60f8      	str	r0, [r7, #12]
 80022aa:	60b9      	str	r1, [r7, #8]
 80022ac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022ae:	2300      	movs	r3, #0
 80022b0:	617b      	str	r3, [r7, #20]
 80022b2:	e00a      	b.n	80022ca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80022b4:	f3af 8000 	nop.w
 80022b8:	4601      	mov	r1, r0
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	1c5a      	adds	r2, r3, #1
 80022be:	60ba      	str	r2, [r7, #8]
 80022c0:	b2ca      	uxtb	r2, r1
 80022c2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	3301      	adds	r3, #1
 80022c8:	617b      	str	r3, [r7, #20]
 80022ca:	697a      	ldr	r2, [r7, #20]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	429a      	cmp	r2, r3
 80022d0:	dbf0      	blt.n	80022b4 <_read+0x12>
  }

  return len;
 80022d2:	687b      	ldr	r3, [r7, #4]
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3718      	adds	r7, #24
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}

080022dc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022e8:	2300      	movs	r3, #0
 80022ea:	617b      	str	r3, [r7, #20]
 80022ec:	e009      	b.n	8002302 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80022ee:	68bb      	ldr	r3, [r7, #8]
 80022f0:	1c5a      	adds	r2, r3, #1
 80022f2:	60ba      	str	r2, [r7, #8]
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80022fc:	697b      	ldr	r3, [r7, #20]
 80022fe:	3301      	adds	r3, #1
 8002300:	617b      	str	r3, [r7, #20]
 8002302:	697a      	ldr	r2, [r7, #20]
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	429a      	cmp	r2, r3
 8002308:	dbf1      	blt.n	80022ee <_write+0x12>
  }
  return len;
 800230a:	687b      	ldr	r3, [r7, #4]
}
 800230c:	4618      	mov	r0, r3
 800230e:	3718      	adds	r7, #24
 8002310:	46bd      	mov	sp, r7
 8002312:	bd80      	pop	{r7, pc}

08002314 <_close>:

int _close(int file)
{
 8002314:	b480      	push	{r7}
 8002316:	b083      	sub	sp, #12
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800231c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002320:	4618      	mov	r0, r3
 8002322:	370c      	adds	r7, #12
 8002324:	46bd      	mov	sp, r7
 8002326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232a:	4770      	bx	lr

0800232c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800232c:	b480      	push	{r7}
 800232e:	b083      	sub	sp, #12
 8002330:	af00      	add	r7, sp, #0
 8002332:	6078      	str	r0, [r7, #4]
 8002334:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800233c:	605a      	str	r2, [r3, #4]
  return 0;
 800233e:	2300      	movs	r3, #0
}
 8002340:	4618      	mov	r0, r3
 8002342:	370c      	adds	r7, #12
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <_isatty>:

int _isatty(int file)
{
 800234c:	b480      	push	{r7}
 800234e:	b083      	sub	sp, #12
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002354:	2301      	movs	r3, #1
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr

08002362 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002362:	b480      	push	{r7}
 8002364:	b085      	sub	sp, #20
 8002366:	af00      	add	r7, sp, #0
 8002368:	60f8      	str	r0, [r7, #12]
 800236a:	60b9      	str	r1, [r7, #8]
 800236c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800236e:	2300      	movs	r3, #0
}
 8002370:	4618      	mov	r0, r3
 8002372:	3714      	adds	r7, #20
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b086      	sub	sp, #24
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002384:	4a14      	ldr	r2, [pc, #80]	@ (80023d8 <_sbrk+0x5c>)
 8002386:	4b15      	ldr	r3, [pc, #84]	@ (80023dc <_sbrk+0x60>)
 8002388:	1ad3      	subs	r3, r2, r3
 800238a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800238c:	697b      	ldr	r3, [r7, #20]
 800238e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002390:	4b13      	ldr	r3, [pc, #76]	@ (80023e0 <_sbrk+0x64>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d102      	bne.n	800239e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002398:	4b11      	ldr	r3, [pc, #68]	@ (80023e0 <_sbrk+0x64>)
 800239a:	4a12      	ldr	r2, [pc, #72]	@ (80023e4 <_sbrk+0x68>)
 800239c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800239e:	4b10      	ldr	r3, [pc, #64]	@ (80023e0 <_sbrk+0x64>)
 80023a0:	681a      	ldr	r2, [r3, #0]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4413      	add	r3, r2
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	429a      	cmp	r2, r3
 80023aa:	d207      	bcs.n	80023bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023ac:	f004 fe42 	bl	8007034 <__errno>
 80023b0:	4603      	mov	r3, r0
 80023b2:	220c      	movs	r2, #12
 80023b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	e009      	b.n	80023d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80023bc:	4b08      	ldr	r3, [pc, #32]	@ (80023e0 <_sbrk+0x64>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80023c2:	4b07      	ldr	r3, [pc, #28]	@ (80023e0 <_sbrk+0x64>)
 80023c4:	681a      	ldr	r2, [r3, #0]
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4413      	add	r3, r2
 80023ca:	4a05      	ldr	r2, [pc, #20]	@ (80023e0 <_sbrk+0x64>)
 80023cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80023ce:	68fb      	ldr	r3, [r7, #12]
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20018000 	.word	0x20018000
 80023dc:	00000400 	.word	0x00000400
 80023e0:	2000042c 	.word	0x2000042c
 80023e4:	20000580 	.word	0x20000580

080023e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023e8:	b480      	push	{r7}
 80023ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023ec:	4b06      	ldr	r3, [pc, #24]	@ (8002408 <SystemInit+0x20>)
 80023ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023f2:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <SystemInit+0x20>)
 80023f4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023f8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	e000ed00 	.word	0xe000ed00

0800240c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800240c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002444 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002410:	f7ff ffea 	bl	80023e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002414:	480c      	ldr	r0, [pc, #48]	@ (8002448 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002416:	490d      	ldr	r1, [pc, #52]	@ (800244c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002418:	4a0d      	ldr	r2, [pc, #52]	@ (8002450 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800241a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800241c:	e002      	b.n	8002424 <LoopCopyDataInit>

0800241e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800241e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002420:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002422:	3304      	adds	r3, #4

08002424 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002424:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002426:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002428:	d3f9      	bcc.n	800241e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800242a:	4a0a      	ldr	r2, [pc, #40]	@ (8002454 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800242c:	4c0a      	ldr	r4, [pc, #40]	@ (8002458 <LoopFillZerobss+0x22>)
  movs r3, #0
 800242e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002430:	e001      	b.n	8002436 <LoopFillZerobss>

08002432 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002432:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002434:	3204      	adds	r2, #4

08002436 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002436:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002438:	d3fb      	bcc.n	8002432 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800243a:	f004 fe01 	bl	8007040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800243e:	f7fe ffad 	bl	800139c <main>
  bx  lr    
 8002442:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002444:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002448:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800244c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8002450:	08009f94 	.word	0x08009f94
  ldr r2, =_sbss
 8002454:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8002458:	20000580 	.word	0x20000580

0800245c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800245c:	e7fe      	b.n	800245c <ADC_IRQHandler>
	...

08002460 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002464:	4b0e      	ldr	r3, [pc, #56]	@ (80024a0 <HAL_Init+0x40>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	4a0d      	ldr	r2, [pc, #52]	@ (80024a0 <HAL_Init+0x40>)
 800246a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800246e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002470:	4b0b      	ldr	r3, [pc, #44]	@ (80024a0 <HAL_Init+0x40>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a0a      	ldr	r2, [pc, #40]	@ (80024a0 <HAL_Init+0x40>)
 8002476:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800247a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800247c:	4b08      	ldr	r3, [pc, #32]	@ (80024a0 <HAL_Init+0x40>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4a07      	ldr	r2, [pc, #28]	@ (80024a0 <HAL_Init+0x40>)
 8002482:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002486:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002488:	2003      	movs	r0, #3
 800248a:	f000 f92b 	bl	80026e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800248e:	2000      	movs	r0, #0
 8002490:	f000 f808 	bl	80024a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002494:	f7ff fca6 	bl	8001de4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	4618      	mov	r0, r3
 800249c:	bd80      	pop	{r7, pc}
 800249e:	bf00      	nop
 80024a0:	40023c00 	.word	0x40023c00

080024a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	b082      	sub	sp, #8
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024ac:	4b12      	ldr	r3, [pc, #72]	@ (80024f8 <HAL_InitTick+0x54>)
 80024ae:	681a      	ldr	r2, [r3, #0]
 80024b0:	4b12      	ldr	r3, [pc, #72]	@ (80024fc <HAL_InitTick+0x58>)
 80024b2:	781b      	ldrb	r3, [r3, #0]
 80024b4:	4619      	mov	r1, r3
 80024b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80024ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80024be:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c2:	4618      	mov	r0, r3
 80024c4:	f000 f943 	bl	800274e <HAL_SYSTICK_Config>
 80024c8:	4603      	mov	r3, r0
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d001      	beq.n	80024d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e00e      	b.n	80024f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2b0f      	cmp	r3, #15
 80024d6:	d80a      	bhi.n	80024ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024d8:	2200      	movs	r2, #0
 80024da:	6879      	ldr	r1, [r7, #4]
 80024dc:	f04f 30ff 	mov.w	r0, #4294967295
 80024e0:	f000 f90b 	bl	80026fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024e4:	4a06      	ldr	r2, [pc, #24]	@ (8002500 <HAL_InitTick+0x5c>)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024ea:	2300      	movs	r3, #0
 80024ec:	e000      	b.n	80024f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
}
 80024f0:	4618      	mov	r0, r3
 80024f2:	3708      	adds	r7, #8
 80024f4:	46bd      	mov	sp, r7
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20000000 	.word	0x20000000
 80024fc:	20000008 	.word	0x20000008
 8002500:	20000004 	.word	0x20000004

08002504 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002508:	4b06      	ldr	r3, [pc, #24]	@ (8002524 <HAL_IncTick+0x20>)
 800250a:	781b      	ldrb	r3, [r3, #0]
 800250c:	461a      	mov	r2, r3
 800250e:	4b06      	ldr	r3, [pc, #24]	@ (8002528 <HAL_IncTick+0x24>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4413      	add	r3, r2
 8002514:	4a04      	ldr	r2, [pc, #16]	@ (8002528 <HAL_IncTick+0x24>)
 8002516:	6013      	str	r3, [r2, #0]
}
 8002518:	bf00      	nop
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000008 	.word	0x20000008
 8002528:	20000430 	.word	0x20000430

0800252c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800252c:	b480      	push	{r7}
 800252e:	af00      	add	r7, sp, #0
  return uwTick;
 8002530:	4b03      	ldr	r3, [pc, #12]	@ (8002540 <HAL_GetTick+0x14>)
 8002532:	681b      	ldr	r3, [r3, #0]
}
 8002534:	4618      	mov	r0, r3
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	20000430 	.word	0x20000430

08002544 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002544:	b480      	push	{r7}
 8002546:	b085      	sub	sp, #20
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002554:	4b0c      	ldr	r3, [pc, #48]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002556:	68db      	ldr	r3, [r3, #12]
 8002558:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800255a:	68ba      	ldr	r2, [r7, #8]
 800255c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002560:	4013      	ands	r3, r2
 8002562:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002568:	68bb      	ldr	r3, [r7, #8]
 800256a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800256c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002570:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002574:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002576:	4a04      	ldr	r2, [pc, #16]	@ (8002588 <__NVIC_SetPriorityGrouping+0x44>)
 8002578:	68bb      	ldr	r3, [r7, #8]
 800257a:	60d3      	str	r3, [r2, #12]
}
 800257c:	bf00      	nop
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr
 8002588:	e000ed00 	.word	0xe000ed00

0800258c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800258c:	b480      	push	{r7}
 800258e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002590:	4b04      	ldr	r3, [pc, #16]	@ (80025a4 <__NVIC_GetPriorityGrouping+0x18>)
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	0a1b      	lsrs	r3, r3, #8
 8002596:	f003 0307 	and.w	r3, r3, #7
}
 800259a:	4618      	mov	r0, r3
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr
 80025a4:	e000ed00 	.word	0xe000ed00

080025a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	4603      	mov	r3, r0
 80025b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	db0b      	blt.n	80025d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025ba:	79fb      	ldrb	r3, [r7, #7]
 80025bc:	f003 021f 	and.w	r2, r3, #31
 80025c0:	4907      	ldr	r1, [pc, #28]	@ (80025e0 <__NVIC_EnableIRQ+0x38>)
 80025c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c6:	095b      	lsrs	r3, r3, #5
 80025c8:	2001      	movs	r0, #1
 80025ca:	fa00 f202 	lsl.w	r2, r0, r2
 80025ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	e000e100 	.word	0xe000e100

080025e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b083      	sub	sp, #12
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	4603      	mov	r3, r0
 80025ec:	6039      	str	r1, [r7, #0]
 80025ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	db0a      	blt.n	800260e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	490c      	ldr	r1, [pc, #48]	@ (8002630 <__NVIC_SetPriority+0x4c>)
 80025fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002602:	0112      	lsls	r2, r2, #4
 8002604:	b2d2      	uxtb	r2, r2
 8002606:	440b      	add	r3, r1
 8002608:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800260c:	e00a      	b.n	8002624 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	b2da      	uxtb	r2, r3
 8002612:	4908      	ldr	r1, [pc, #32]	@ (8002634 <__NVIC_SetPriority+0x50>)
 8002614:	79fb      	ldrb	r3, [r7, #7]
 8002616:	f003 030f 	and.w	r3, r3, #15
 800261a:	3b04      	subs	r3, #4
 800261c:	0112      	lsls	r2, r2, #4
 800261e:	b2d2      	uxtb	r2, r2
 8002620:	440b      	add	r3, r1
 8002622:	761a      	strb	r2, [r3, #24]
}
 8002624:	bf00      	nop
 8002626:	370c      	adds	r7, #12
 8002628:	46bd      	mov	sp, r7
 800262a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262e:	4770      	bx	lr
 8002630:	e000e100 	.word	0xe000e100
 8002634:	e000ed00 	.word	0xe000ed00

08002638 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002638:	b480      	push	{r7}
 800263a:	b089      	sub	sp, #36	@ 0x24
 800263c:	af00      	add	r7, sp, #0
 800263e:	60f8      	str	r0, [r7, #12]
 8002640:	60b9      	str	r1, [r7, #8]
 8002642:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	f003 0307 	and.w	r3, r3, #7
 800264a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800264c:	69fb      	ldr	r3, [r7, #28]
 800264e:	f1c3 0307 	rsb	r3, r3, #7
 8002652:	2b04      	cmp	r3, #4
 8002654:	bf28      	it	cs
 8002656:	2304      	movcs	r3, #4
 8002658:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	3304      	adds	r3, #4
 800265e:	2b06      	cmp	r3, #6
 8002660:	d902      	bls.n	8002668 <NVIC_EncodePriority+0x30>
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	3b03      	subs	r3, #3
 8002666:	e000      	b.n	800266a <NVIC_EncodePriority+0x32>
 8002668:	2300      	movs	r3, #0
 800266a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	f04f 32ff 	mov.w	r2, #4294967295
 8002670:	69bb      	ldr	r3, [r7, #24]
 8002672:	fa02 f303 	lsl.w	r3, r2, r3
 8002676:	43da      	mvns	r2, r3
 8002678:	68bb      	ldr	r3, [r7, #8]
 800267a:	401a      	ands	r2, r3
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002680:	f04f 31ff 	mov.w	r1, #4294967295
 8002684:	697b      	ldr	r3, [r7, #20]
 8002686:	fa01 f303 	lsl.w	r3, r1, r3
 800268a:	43d9      	mvns	r1, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002690:	4313      	orrs	r3, r2
         );
}
 8002692:	4618      	mov	r0, r3
 8002694:	3724      	adds	r7, #36	@ 0x24
 8002696:	46bd      	mov	sp, r7
 8002698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269c:	4770      	bx	lr
	...

080026a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	3b01      	subs	r3, #1
 80026ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80026b0:	d301      	bcc.n	80026b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80026b2:	2301      	movs	r3, #1
 80026b4:	e00f      	b.n	80026d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80026b6:	4a0a      	ldr	r2, [pc, #40]	@ (80026e0 <SysTick_Config+0x40>)
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	3b01      	subs	r3, #1
 80026bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80026be:	210f      	movs	r1, #15
 80026c0:	f04f 30ff 	mov.w	r0, #4294967295
 80026c4:	f7ff ff8e 	bl	80025e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026c8:	4b05      	ldr	r3, [pc, #20]	@ (80026e0 <SysTick_Config+0x40>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026ce:	4b04      	ldr	r3, [pc, #16]	@ (80026e0 <SysTick_Config+0x40>)
 80026d0:	2207      	movs	r2, #7
 80026d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3708      	adds	r7, #8
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	e000e010 	.word	0xe000e010

080026e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b082      	sub	sp, #8
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f7ff ff29 	bl	8002544 <__NVIC_SetPriorityGrouping>
}
 80026f2:	bf00      	nop
 80026f4:	3708      	adds	r7, #8
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b086      	sub	sp, #24
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	60b9      	str	r1, [r7, #8]
 8002704:	607a      	str	r2, [r7, #4]
 8002706:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800270c:	f7ff ff3e 	bl	800258c <__NVIC_GetPriorityGrouping>
 8002710:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002712:	687a      	ldr	r2, [r7, #4]
 8002714:	68b9      	ldr	r1, [r7, #8]
 8002716:	6978      	ldr	r0, [r7, #20]
 8002718:	f7ff ff8e 	bl	8002638 <NVIC_EncodePriority>
 800271c:	4602      	mov	r2, r0
 800271e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002722:	4611      	mov	r1, r2
 8002724:	4618      	mov	r0, r3
 8002726:	f7ff ff5d 	bl	80025e4 <__NVIC_SetPriority>
}
 800272a:	bf00      	nop
 800272c:	3718      	adds	r7, #24
 800272e:	46bd      	mov	sp, r7
 8002730:	bd80      	pop	{r7, pc}

08002732 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002732:	b580      	push	{r7, lr}
 8002734:	b082      	sub	sp, #8
 8002736:	af00      	add	r7, sp, #0
 8002738:	4603      	mov	r3, r0
 800273a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800273c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff ff31 	bl	80025a8 <__NVIC_EnableIRQ>
}
 8002746:	bf00      	nop
 8002748:	3708      	adds	r7, #8
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}

0800274e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b082      	sub	sp, #8
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f7ff ffa2 	bl	80026a0 <SysTick_Config>
 800275c:	4603      	mov	r3, r0
}
 800275e:	4618      	mov	r0, r3
 8002760:	3708      	adds	r7, #8
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}

08002766 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002766:	b580      	push	{r7, lr}
 8002768:	b084      	sub	sp, #16
 800276a:	af00      	add	r7, sp, #0
 800276c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002772:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff feda 	bl	800252c <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002780:	b2db      	uxtb	r3, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d008      	beq.n	8002798 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2280      	movs	r2, #128	@ 0x80
 800278a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002794:	2301      	movs	r3, #1
 8002796:	e052      	b.n	800283e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681a      	ldr	r2, [r3, #0]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f022 0216 	bic.w	r2, r2, #22
 80027a6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	695a      	ldr	r2, [r3, #20]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80027b6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d103      	bne.n	80027c8 <HAL_DMA_Abort+0x62>
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d007      	beq.n	80027d8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 0208 	bic.w	r2, r2, #8
 80027d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027e8:	e013      	b.n	8002812 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027ea:	f7ff fe9f 	bl	800252c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	68bb      	ldr	r3, [r7, #8]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b05      	cmp	r3, #5
 80027f6:	d90c      	bls.n	8002812 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2220      	movs	r2, #32
 80027fc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	2203      	movs	r2, #3
 8002802:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	2200      	movs	r2, #0
 800280a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e015      	b.n	800283e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 0301 	and.w	r3, r3, #1
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1e4      	bne.n	80027ea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	223f      	movs	r2, #63	@ 0x3f
 8002826:	409a      	lsls	r2, r3
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2201      	movs	r2, #1
 8002830:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	3710      	adds	r7, #16
 8002842:	46bd      	mov	sp, r7
 8002844:	bd80      	pop	{r7, pc}

08002846 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002846:	b480      	push	{r7}
 8002848:	b083      	sub	sp, #12
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002854:	b2db      	uxtb	r3, r3
 8002856:	2b02      	cmp	r3, #2
 8002858:	d004      	beq.n	8002864 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2280      	movs	r2, #128	@ 0x80
 800285e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002860:	2301      	movs	r3, #1
 8002862:	e00c      	b.n	800287e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2205      	movs	r2, #5
 8002868:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681a      	ldr	r2, [r3, #0]
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f022 0201 	bic.w	r2, r2, #1
 800287a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	370c      	adds	r7, #12
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
	...

0800288c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800288c:	b480      	push	{r7}
 800288e:	b089      	sub	sp, #36	@ 0x24
 8002890:	af00      	add	r7, sp, #0
 8002892:	6078      	str	r0, [r7, #4]
 8002894:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002896:	2300      	movs	r3, #0
 8002898:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800289a:	2300      	movs	r3, #0
 800289c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800289e:	2300      	movs	r3, #0
 80028a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028a2:	2300      	movs	r3, #0
 80028a4:	61fb      	str	r3, [r7, #28]
 80028a6:	e159      	b.n	8002b5c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80028a8:	2201      	movs	r2, #1
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	697a      	ldr	r2, [r7, #20]
 80028b8:	4013      	ands	r3, r2
 80028ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80028bc:	693a      	ldr	r2, [r7, #16]
 80028be:	697b      	ldr	r3, [r7, #20]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8148 	bne.w	8002b56 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	f003 0303 	and.w	r3, r3, #3
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d005      	beq.n	80028de <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685b      	ldr	r3, [r3, #4]
 80028d6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d130      	bne.n	8002940 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	689b      	ldr	r3, [r3, #8]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	005b      	lsls	r3, r3, #1
 80028e8:	2203      	movs	r2, #3
 80028ea:	fa02 f303 	lsl.w	r3, r2, r3
 80028ee:	43db      	mvns	r3, r3
 80028f0:	69ba      	ldr	r2, [r7, #24]
 80028f2:	4013      	ands	r3, r2
 80028f4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028f6:	683b      	ldr	r3, [r7, #0]
 80028f8:	68da      	ldr	r2, [r3, #12]
 80028fa:	69fb      	ldr	r3, [r7, #28]
 80028fc:	005b      	lsls	r3, r3, #1
 80028fe:	fa02 f303 	lsl.w	r3, r2, r3
 8002902:	69ba      	ldr	r2, [r7, #24]
 8002904:	4313      	orrs	r3, r2
 8002906:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	69ba      	ldr	r2, [r7, #24]
 800290c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	685b      	ldr	r3, [r3, #4]
 8002912:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002914:	2201      	movs	r2, #1
 8002916:	69fb      	ldr	r3, [r7, #28]
 8002918:	fa02 f303 	lsl.w	r3, r2, r3
 800291c:	43db      	mvns	r3, r3
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	4013      	ands	r3, r2
 8002922:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	091b      	lsrs	r3, r3, #4
 800292a:	f003 0201 	and.w	r2, r3, #1
 800292e:	69fb      	ldr	r3, [r7, #28]
 8002930:	fa02 f303 	lsl.w	r3, r2, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4313      	orrs	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	69ba      	ldr	r2, [r7, #24]
 800293e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f003 0303 	and.w	r3, r3, #3
 8002948:	2b03      	cmp	r3, #3
 800294a:	d017      	beq.n	800297c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	005b      	lsls	r3, r3, #1
 8002956:	2203      	movs	r2, #3
 8002958:	fa02 f303 	lsl.w	r3, r2, r3
 800295c:	43db      	mvns	r3, r3
 800295e:	69ba      	ldr	r2, [r7, #24]
 8002960:	4013      	ands	r3, r2
 8002962:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	689a      	ldr	r2, [r3, #8]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	005b      	lsls	r3, r3, #1
 800296c:	fa02 f303 	lsl.w	r3, r2, r3
 8002970:	69ba      	ldr	r2, [r7, #24]
 8002972:	4313      	orrs	r3, r2
 8002974:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	69ba      	ldr	r2, [r7, #24]
 800297a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	f003 0303 	and.w	r3, r3, #3
 8002984:	2b02      	cmp	r3, #2
 8002986:	d123      	bne.n	80029d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002988:	69fb      	ldr	r3, [r7, #28]
 800298a:	08da      	lsrs	r2, r3, #3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	3208      	adds	r2, #8
 8002990:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002994:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002996:	69fb      	ldr	r3, [r7, #28]
 8002998:	f003 0307 	and.w	r3, r3, #7
 800299c:	009b      	lsls	r3, r3, #2
 800299e:	220f      	movs	r2, #15
 80029a0:	fa02 f303 	lsl.w	r3, r2, r3
 80029a4:	43db      	mvns	r3, r3
 80029a6:	69ba      	ldr	r2, [r7, #24]
 80029a8:	4013      	ands	r3, r2
 80029aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	691a      	ldr	r2, [r3, #16]
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f003 0307 	and.w	r3, r3, #7
 80029b6:	009b      	lsls	r3, r3, #2
 80029b8:	fa02 f303 	lsl.w	r3, r2, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4313      	orrs	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80029c2:	69fb      	ldr	r3, [r7, #28]
 80029c4:	08da      	lsrs	r2, r3, #3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	3208      	adds	r2, #8
 80029ca:	69b9      	ldr	r1, [r7, #24]
 80029cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	005b      	lsls	r3, r3, #1
 80029da:	2203      	movs	r2, #3
 80029dc:	fa02 f303 	lsl.w	r3, r2, r3
 80029e0:	43db      	mvns	r3, r3
 80029e2:	69ba      	ldr	r2, [r7, #24]
 80029e4:	4013      	ands	r3, r2
 80029e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029e8:	683b      	ldr	r3, [r7, #0]
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 0203 	and.w	r2, r3, #3
 80029f0:	69fb      	ldr	r3, [r7, #28]
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	fa02 f303 	lsl.w	r3, r2, r3
 80029f8:	69ba      	ldr	r2, [r7, #24]
 80029fa:	4313      	orrs	r3, r2
 80029fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	69ba      	ldr	r2, [r7, #24]
 8002a02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	f000 80a2 	beq.w	8002b56 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b57      	ldr	r3, [pc, #348]	@ (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1a:	4a56      	ldr	r2, [pc, #344]	@ (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a20:	6453      	str	r3, [r2, #68]	@ 0x44
 8002a22:	4b54      	ldr	r3, [pc, #336]	@ (8002b74 <HAL_GPIO_Init+0x2e8>)
 8002a24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a2e:	4a52      	ldr	r2, [pc, #328]	@ (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	089b      	lsrs	r3, r3, #2
 8002a34:	3302      	adds	r3, #2
 8002a36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	f003 0303 	and.w	r3, r3, #3
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	220f      	movs	r2, #15
 8002a46:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4a:	43db      	mvns	r3, r3
 8002a4c:	69ba      	ldr	r2, [r7, #24]
 8002a4e:	4013      	ands	r3, r2
 8002a50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a49      	ldr	r2, [pc, #292]	@ (8002b7c <HAL_GPIO_Init+0x2f0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d019      	beq.n	8002a8e <HAL_GPIO_Init+0x202>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	4a48      	ldr	r2, [pc, #288]	@ (8002b80 <HAL_GPIO_Init+0x2f4>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d013      	beq.n	8002a8a <HAL_GPIO_Init+0x1fe>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	4a47      	ldr	r2, [pc, #284]	@ (8002b84 <HAL_GPIO_Init+0x2f8>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d00d      	beq.n	8002a86 <HAL_GPIO_Init+0x1fa>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	4a46      	ldr	r2, [pc, #280]	@ (8002b88 <HAL_GPIO_Init+0x2fc>)
 8002a6e:	4293      	cmp	r3, r2
 8002a70:	d007      	beq.n	8002a82 <HAL_GPIO_Init+0x1f6>
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	4a45      	ldr	r2, [pc, #276]	@ (8002b8c <HAL_GPIO_Init+0x300>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d101      	bne.n	8002a7e <HAL_GPIO_Init+0x1f2>
 8002a7a:	2304      	movs	r3, #4
 8002a7c:	e008      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a7e:	2307      	movs	r3, #7
 8002a80:	e006      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a82:	2303      	movs	r3, #3
 8002a84:	e004      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a86:	2302      	movs	r3, #2
 8002a88:	e002      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	e000      	b.n	8002a90 <HAL_GPIO_Init+0x204>
 8002a8e:	2300      	movs	r3, #0
 8002a90:	69fa      	ldr	r2, [r7, #28]
 8002a92:	f002 0203 	and.w	r2, r2, #3
 8002a96:	0092      	lsls	r2, r2, #2
 8002a98:	4093      	lsls	r3, r2
 8002a9a:	69ba      	ldr	r2, [r7, #24]
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aa0:	4935      	ldr	r1, [pc, #212]	@ (8002b78 <HAL_GPIO_Init+0x2ec>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	089b      	lsrs	r3, r3, #2
 8002aa6:	3302      	adds	r3, #2
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002aae:	4b38      	ldr	r3, [pc, #224]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	43db      	mvns	r3, r3
 8002ab8:	69ba      	ldr	r2, [r7, #24]
 8002aba:	4013      	ands	r3, r2
 8002abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d003      	beq.n	8002ad2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002aca:	69ba      	ldr	r2, [r7, #24]
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002ad2:	4a2f      	ldr	r2, [pc, #188]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002ad4:	69bb      	ldr	r3, [r7, #24]
 8002ad6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002ad8:	4b2d      	ldr	r3, [pc, #180]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002ada:	68db      	ldr	r3, [r3, #12]
 8002adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	43db      	mvns	r3, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4013      	ands	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002ae8:	683b      	ldr	r3, [r7, #0]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d003      	beq.n	8002afc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002af4:	69ba      	ldr	r2, [r7, #24]
 8002af6:	693b      	ldr	r3, [r7, #16]
 8002af8:	4313      	orrs	r3, r2
 8002afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002afc:	4a24      	ldr	r2, [pc, #144]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002afe:	69bb      	ldr	r3, [r7, #24]
 8002b00:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002b02:	4b23      	ldr	r3, [pc, #140]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b08:	693b      	ldr	r3, [r7, #16]
 8002b0a:	43db      	mvns	r3, r3
 8002b0c:	69ba      	ldr	r2, [r7, #24]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d003      	beq.n	8002b26 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002b1e:	69ba      	ldr	r2, [r7, #24]
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	4313      	orrs	r3, r2
 8002b24:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002b26:	4a1a      	ldr	r2, [pc, #104]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002b28:	69bb      	ldr	r3, [r7, #24]
 8002b2a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002b2c:	4b18      	ldr	r3, [pc, #96]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002b32:	693b      	ldr	r3, [r7, #16]
 8002b34:	43db      	mvns	r3, r3
 8002b36:	69ba      	ldr	r2, [r7, #24]
 8002b38:	4013      	ands	r3, r2
 8002b3a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685b      	ldr	r3, [r3, #4]
 8002b40:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	d003      	beq.n	8002b50 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002b48:	69ba      	ldr	r2, [r7, #24]
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002b50:	4a0f      	ldr	r2, [pc, #60]	@ (8002b90 <HAL_GPIO_Init+0x304>)
 8002b52:	69bb      	ldr	r3, [r7, #24]
 8002b54:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002b56:	69fb      	ldr	r3, [r7, #28]
 8002b58:	3301      	adds	r3, #1
 8002b5a:	61fb      	str	r3, [r7, #28]
 8002b5c:	69fb      	ldr	r3, [r7, #28]
 8002b5e:	2b0f      	cmp	r3, #15
 8002b60:	f67f aea2 	bls.w	80028a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002b64:	bf00      	nop
 8002b66:	bf00      	nop
 8002b68:	3724      	adds	r7, #36	@ 0x24
 8002b6a:	46bd      	mov	sp, r7
 8002b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b70:	4770      	bx	lr
 8002b72:	bf00      	nop
 8002b74:	40023800 	.word	0x40023800
 8002b78:	40013800 	.word	0x40013800
 8002b7c:	40020000 	.word	0x40020000
 8002b80:	40020400 	.word	0x40020400
 8002b84:	40020800 	.word	0x40020800
 8002b88:	40020c00 	.word	0x40020c00
 8002b8c:	40021000 	.word	0x40021000
 8002b90:	40013c00 	.word	0x40013c00

08002b94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b94:	b480      	push	{r7}
 8002b96:	b083      	sub	sp, #12
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	807b      	strh	r3, [r7, #2]
 8002ba0:	4613      	mov	r3, r2
 8002ba2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002ba4:	787b      	ldrb	r3, [r7, #1]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d003      	beq.n	8002bb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002baa:	887a      	ldrh	r2, [r7, #2]
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002bb0:	e003      	b.n	8002bba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002bb2:	887b      	ldrh	r3, [r7, #2]
 8002bb4:	041a      	lsls	r2, r3, #16
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	619a      	str	r2, [r3, #24]
}
 8002bba:	bf00      	nop
 8002bbc:	370c      	adds	r7, #12
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc4:	4770      	bx	lr
	...

08002bc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bc8:	b580      	push	{r7, lr}
 8002bca:	b086      	sub	sp, #24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d101      	bne.n	8002bda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	e267      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f003 0301 	and.w	r3, r3, #1
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d075      	beq.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002be6:	4b88      	ldr	r3, [pc, #544]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002be8:	689b      	ldr	r3, [r3, #8]
 8002bea:	f003 030c 	and.w	r3, r3, #12
 8002bee:	2b04      	cmp	r3, #4
 8002bf0:	d00c      	beq.n	8002c0c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bf2:	4b85      	ldr	r3, [pc, #532]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002bf4:	689b      	ldr	r3, [r3, #8]
 8002bf6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002bfa:	2b08      	cmp	r3, #8
 8002bfc:	d112      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002bfe:	4b82      	ldr	r3, [pc, #520]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c00:	685b      	ldr	r3, [r3, #4]
 8002c02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c06:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c0a:	d10b      	bne.n	8002c24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c0c:	4b7e      	ldr	r3, [pc, #504]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d05b      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x108>
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	685b      	ldr	r3, [r3, #4]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d157      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002c20:	2301      	movs	r3, #1
 8002c22:	e242      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c2c:	d106      	bne.n	8002c3c <HAL_RCC_OscConfig+0x74>
 8002c2e:	4b76      	ldr	r3, [pc, #472]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4a75      	ldr	r2, [pc, #468]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c34:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c38:	6013      	str	r3, [r2, #0]
 8002c3a:	e01d      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c44:	d10c      	bne.n	8002c60 <HAL_RCC_OscConfig+0x98>
 8002c46:	4b70      	ldr	r3, [pc, #448]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4a6f      	ldr	r2, [pc, #444]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c50:	6013      	str	r3, [r2, #0]
 8002c52:	4b6d      	ldr	r3, [pc, #436]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4a6c      	ldr	r2, [pc, #432]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e00b      	b.n	8002c78 <HAL_RCC_OscConfig+0xb0>
 8002c60:	4b69      	ldr	r3, [pc, #420]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a68      	ldr	r2, [pc, #416]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c6a:	6013      	str	r3, [r2, #0]
 8002c6c:	4b66      	ldr	r3, [pc, #408]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a65      	ldr	r2, [pc, #404]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d013      	beq.n	8002ca8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c80:	f7ff fc54 	bl	800252c <HAL_GetTick>
 8002c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c86:	e008      	b.n	8002c9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002c88:	f7ff fc50 	bl	800252c <HAL_GetTick>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	1ad3      	subs	r3, r2, r3
 8002c92:	2b64      	cmp	r3, #100	@ 0x64
 8002c94:	d901      	bls.n	8002c9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002c96:	2303      	movs	r3, #3
 8002c98:	e207      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c9a:	4b5b      	ldr	r3, [pc, #364]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d0f0      	beq.n	8002c88 <HAL_RCC_OscConfig+0xc0>
 8002ca6:	e014      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fc40 	bl	800252c <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fc3c 	bl	800252c <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	@ 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e1f3      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cc2:	4b51      	ldr	r3, [pc, #324]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d1f0      	bne.n	8002cb0 <HAL_RCC_OscConfig+0xe8>
 8002cce:	e000      	b.n	8002cd2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f003 0302 	and.w	r3, r3, #2
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d063      	beq.n	8002da6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cde:	4b4a      	ldr	r3, [pc, #296]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	f003 030c 	and.w	r3, r3, #12
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d00b      	beq.n	8002d02 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cea:	4b47      	ldr	r3, [pc, #284]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cec:	689b      	ldr	r3, [r3, #8]
 8002cee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002cf2:	2b08      	cmp	r3, #8
 8002cf4:	d11c      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002cf6:	4b44      	ldr	r3, [pc, #272]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d116      	bne.n	8002d30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d02:	4b41      	ldr	r3, [pc, #260]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d005      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	68db      	ldr	r3, [r3, #12]
 8002d12:	2b01      	cmp	r3, #1
 8002d14:	d001      	beq.n	8002d1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002d16:	2301      	movs	r3, #1
 8002d18:	e1c7      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d1a:	4b3b      	ldr	r3, [pc, #236]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	691b      	ldr	r3, [r3, #16]
 8002d26:	00db      	lsls	r3, r3, #3
 8002d28:	4937      	ldr	r1, [pc, #220]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2e:	e03a      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	68db      	ldr	r3, [r3, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d020      	beq.n	8002d7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d38:	4b34      	ldr	r3, [pc, #208]	@ (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d3e:	f7ff fbf5 	bl	800252c <HAL_GetTick>
 8002d42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d44:	e008      	b.n	8002d58 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d46:	f7ff fbf1 	bl	800252c <HAL_GetTick>
 8002d4a:	4602      	mov	r2, r0
 8002d4c:	693b      	ldr	r3, [r7, #16]
 8002d4e:	1ad3      	subs	r3, r2, r3
 8002d50:	2b02      	cmp	r3, #2
 8002d52:	d901      	bls.n	8002d58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002d54:	2303      	movs	r3, #3
 8002d56:	e1a8      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d58:	4b2b      	ldr	r3, [pc, #172]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f003 0302 	and.w	r3, r3, #2
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d0f0      	beq.n	8002d46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d64:	4b28      	ldr	r3, [pc, #160]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	00db      	lsls	r3, r3, #3
 8002d72:	4925      	ldr	r1, [pc, #148]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d74:	4313      	orrs	r3, r2
 8002d76:	600b      	str	r3, [r1, #0]
 8002d78:	e015      	b.n	8002da6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002d7a:	4b24      	ldr	r3, [pc, #144]	@ (8002e0c <HAL_RCC_OscConfig+0x244>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d80:	f7ff fbd4 	bl	800252c <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d88:	f7ff fbd0 	bl	800252c <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e187      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d9a:	4b1b      	ldr	r3, [pc, #108]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f003 0308 	and.w	r3, r3, #8
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d036      	beq.n	8002e20 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	695b      	ldr	r3, [r3, #20]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d016      	beq.n	8002de8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002dba:	4b15      	ldr	r3, [pc, #84]	@ (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dbc:	2201      	movs	r2, #1
 8002dbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002dc0:	f7ff fbb4 	bl	800252c <HAL_GetTick>
 8002dc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dc6:	e008      	b.n	8002dda <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002dc8:	f7ff fbb0 	bl	800252c <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d901      	bls.n	8002dda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	e167      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dda:	4b0b      	ldr	r3, [pc, #44]	@ (8002e08 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002dde:	f003 0302 	and.w	r3, r3, #2
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d0f0      	beq.n	8002dc8 <HAL_RCC_OscConfig+0x200>
 8002de6:	e01b      	b.n	8002e20 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002de8:	4b09      	ldr	r3, [pc, #36]	@ (8002e10 <HAL_RCC_OscConfig+0x248>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002dee:	f7ff fb9d 	bl	800252c <HAL_GetTick>
 8002df2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002df4:	e00e      	b.n	8002e14 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df6:	f7ff fb99 	bl	800252c <HAL_GetTick>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	693b      	ldr	r3, [r7, #16]
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d907      	bls.n	8002e14 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e150      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8002e08:	40023800 	.word	0x40023800
 8002e0c:	42470000 	.word	0x42470000
 8002e10:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e14:	4b88      	ldr	r3, [pc, #544]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e16:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002e18:	f003 0302 	and.w	r3, r3, #2
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d1ea      	bne.n	8002df6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	f003 0304 	and.w	r3, r3, #4
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 8097 	beq.w	8002f5c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e32:	4b81      	ldr	r3, [pc, #516]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d10f      	bne.n	8002e5e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e3e:	2300      	movs	r3, #0
 8002e40:	60bb      	str	r3, [r7, #8]
 8002e42:	4b7d      	ldr	r3, [pc, #500]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e46:	4a7c      	ldr	r2, [pc, #496]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e4c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4e:	4b7a      	ldr	r3, [pc, #488]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e56:	60bb      	str	r3, [r7, #8]
 8002e58:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e5a:	2301      	movs	r3, #1
 8002e5c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e5e:	4b77      	ldr	r3, [pc, #476]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d118      	bne.n	8002e9c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e6a:	4b74      	ldr	r3, [pc, #464]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a73      	ldr	r2, [pc, #460]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e74:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e76:	f7ff fb59 	bl	800252c <HAL_GetTick>
 8002e7a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e7c:	e008      	b.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e7e:	f7ff fb55 	bl	800252c <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	693b      	ldr	r3, [r7, #16]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	2b02      	cmp	r3, #2
 8002e8a:	d901      	bls.n	8002e90 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002e8c:	2303      	movs	r3, #3
 8002e8e:	e10c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e90:	4b6a      	ldr	r3, [pc, #424]	@ (800303c <HAL_RCC_OscConfig+0x474>)
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d0f0      	beq.n	8002e7e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d106      	bne.n	8002eb2 <HAL_RCC_OscConfig+0x2ea>
 8002ea4:	4b64      	ldr	r3, [pc, #400]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea8:	4a63      	ldr	r2, [pc, #396]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eaa:	f043 0301 	orr.w	r3, r3, #1
 8002eae:	6713      	str	r3, [r2, #112]	@ 0x70
 8002eb0:	e01c      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	689b      	ldr	r3, [r3, #8]
 8002eb6:	2b05      	cmp	r3, #5
 8002eb8:	d10c      	bne.n	8002ed4 <HAL_RCC_OscConfig+0x30c>
 8002eba:	4b5f      	ldr	r3, [pc, #380]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ebe:	4a5e      	ldr	r2, [pc, #376]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec0:	f043 0304 	orr.w	r3, r3, #4
 8002ec4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ec6:	4b5c      	ldr	r3, [pc, #368]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ec8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eca:	4a5b      	ldr	r2, [pc, #364]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ecc:	f043 0301 	orr.w	r3, r3, #1
 8002ed0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ed2:	e00b      	b.n	8002eec <HAL_RCC_OscConfig+0x324>
 8002ed4:	4b58      	ldr	r3, [pc, #352]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ed8:	4a57      	ldr	r2, [pc, #348]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002eda:	f023 0301 	bic.w	r3, r3, #1
 8002ede:	6713      	str	r3, [r2, #112]	@ 0x70
 8002ee0:	4b55      	ldr	r3, [pc, #340]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ee4:	4a54      	ldr	r2, [pc, #336]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ee6:	f023 0304 	bic.w	r3, r3, #4
 8002eea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	689b      	ldr	r3, [r3, #8]
 8002ef0:	2b00      	cmp	r3, #0
 8002ef2:	d015      	beq.n	8002f20 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ef4:	f7ff fb1a 	bl	800252c <HAL_GetTick>
 8002ef8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002efa:	e00a      	b.n	8002f12 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002efc:	f7ff fb16 	bl	800252c <HAL_GetTick>
 8002f00:	4602      	mov	r2, r0
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d901      	bls.n	8002f12 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002f0e:	2303      	movs	r3, #3
 8002f10:	e0cb      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f12:	4b49      	ldr	r3, [pc, #292]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f16:	f003 0302 	and.w	r3, r3, #2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d0ee      	beq.n	8002efc <HAL_RCC_OscConfig+0x334>
 8002f1e:	e014      	b.n	8002f4a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f20:	f7ff fb04 	bl	800252c <HAL_GetTick>
 8002f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f26:	e00a      	b.n	8002f3e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f28:	f7ff fb00 	bl	800252c <HAL_GetTick>
 8002f2c:	4602      	mov	r2, r0
 8002f2e:	693b      	ldr	r3, [r7, #16]
 8002f30:	1ad3      	subs	r3, r2, r3
 8002f32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e0b5      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f3e:	4b3e      	ldr	r3, [pc, #248]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002f42:	f003 0302 	and.w	r3, r3, #2
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1ee      	bne.n	8002f28 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002f4a:	7dfb      	ldrb	r3, [r7, #23]
 8002f4c:	2b01      	cmp	r3, #1
 8002f4e:	d105      	bne.n	8002f5c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f50:	4b39      	ldr	r3, [pc, #228]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f54:	4a38      	ldr	r2, [pc, #224]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f56:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f5a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	699b      	ldr	r3, [r3, #24]
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	f000 80a1 	beq.w	80030a8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002f66:	4b34      	ldr	r3, [pc, #208]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	f003 030c 	and.w	r3, r3, #12
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d05c      	beq.n	800302c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	2b02      	cmp	r3, #2
 8002f78:	d141      	bne.n	8002ffe <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f7a:	4b31      	ldr	r3, [pc, #196]	@ (8003040 <HAL_RCC_OscConfig+0x478>)
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff fad4 	bl	800252c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f88:	f7ff fad0 	bl	800252c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e087      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f9a:	4b27      	ldr	r3, [pc, #156]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d1f0      	bne.n	8002f88 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	69da      	ldr	r2, [r3, #28]
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6a1b      	ldr	r3, [r3, #32]
 8002fae:	431a      	orrs	r2, r3
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb4:	019b      	lsls	r3, r3, #6
 8002fb6:	431a      	orrs	r2, r3
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002fbc:	085b      	lsrs	r3, r3, #1
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	041b      	lsls	r3, r3, #16
 8002fc2:	431a      	orrs	r2, r3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fc8:	061b      	lsls	r3, r3, #24
 8002fca:	491b      	ldr	r1, [pc, #108]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002fd0:	4b1b      	ldr	r3, [pc, #108]	@ (8003040 <HAL_RCC_OscConfig+0x478>)
 8002fd2:	2201      	movs	r2, #1
 8002fd4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd6:	f7ff faa9 	bl	800252c <HAL_GetTick>
 8002fda:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002fdc:	e008      	b.n	8002ff0 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fde:	f7ff faa5 	bl	800252c <HAL_GetTick>
 8002fe2:	4602      	mov	r2, r0
 8002fe4:	693b      	ldr	r3, [r7, #16]
 8002fe6:	1ad3      	subs	r3, r2, r3
 8002fe8:	2b02      	cmp	r3, #2
 8002fea:	d901      	bls.n	8002ff0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002fec:	2303      	movs	r3, #3
 8002fee:	e05c      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ff0:	4b11      	ldr	r3, [pc, #68]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	d0f0      	beq.n	8002fde <HAL_RCC_OscConfig+0x416>
 8002ffc:	e054      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffe:	4b10      	ldr	r3, [pc, #64]	@ (8003040 <HAL_RCC_OscConfig+0x478>)
 8003000:	2200      	movs	r2, #0
 8003002:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003004:	f7ff fa92 	bl	800252c <HAL_GetTick>
 8003008:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800300a:	e008      	b.n	800301e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800300c:	f7ff fa8e 	bl	800252c <HAL_GetTick>
 8003010:	4602      	mov	r2, r0
 8003012:	693b      	ldr	r3, [r7, #16]
 8003014:	1ad3      	subs	r3, r2, r3
 8003016:	2b02      	cmp	r3, #2
 8003018:	d901      	bls.n	800301e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800301a:	2303      	movs	r3, #3
 800301c:	e045      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800301e:	4b06      	ldr	r3, [pc, #24]	@ (8003038 <HAL_RCC_OscConfig+0x470>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d1f0      	bne.n	800300c <HAL_RCC_OscConfig+0x444>
 800302a:	e03d      	b.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	699b      	ldr	r3, [r3, #24]
 8003030:	2b01      	cmp	r3, #1
 8003032:	d107      	bne.n	8003044 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e038      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
 8003038:	40023800 	.word	0x40023800
 800303c:	40007000 	.word	0x40007000
 8003040:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003044:	4b1b      	ldr	r3, [pc, #108]	@ (80030b4 <HAL_RCC_OscConfig+0x4ec>)
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	699b      	ldr	r3, [r3, #24]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d028      	beq.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800305c:	429a      	cmp	r2, r3
 800305e:	d121      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800306a:	429a      	cmp	r2, r3
 800306c:	d11a      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003074:	4013      	ands	r3, r2
 8003076:	687a      	ldr	r2, [r7, #4]
 8003078:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800307a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800307c:	4293      	cmp	r3, r2
 800307e:	d111      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800308a:	085b      	lsrs	r3, r3, #1
 800308c:	3b01      	subs	r3, #1
 800308e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003090:	429a      	cmp	r2, r3
 8003092:	d107      	bne.n	80030a4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800309e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80030a0:	429a      	cmp	r2, r3
 80030a2:	d001      	beq.n	80030a8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80030a4:	2301      	movs	r3, #1
 80030a6:	e000      	b.n	80030aa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80030a8:	2300      	movs	r3, #0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3718      	adds	r7, #24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40023800 	.word	0x40023800

080030b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b084      	sub	sp, #16
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d101      	bne.n	80030cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e0cc      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030cc:	4b68      	ldr	r3, [pc, #416]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f003 0307 	and.w	r3, r3, #7
 80030d4:	683a      	ldr	r2, [r7, #0]
 80030d6:	429a      	cmp	r2, r3
 80030d8:	d90c      	bls.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030da:	4b65      	ldr	r3, [pc, #404]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030dc:	683a      	ldr	r2, [r7, #0]
 80030de:	b2d2      	uxtb	r2, r2
 80030e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80030e2:	4b63      	ldr	r3, [pc, #396]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0307 	and.w	r3, r3, #7
 80030ea:	683a      	ldr	r2, [r7, #0]
 80030ec:	429a      	cmp	r2, r3
 80030ee:	d001      	beq.n	80030f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80030f0:	2301      	movs	r3, #1
 80030f2:	e0b8      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f003 0302 	and.w	r3, r3, #2
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d020      	beq.n	8003142 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	f003 0304 	and.w	r3, r3, #4
 8003108:	2b00      	cmp	r3, #0
 800310a:	d005      	beq.n	8003118 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800310c:	4b59      	ldr	r3, [pc, #356]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800310e:	689b      	ldr	r3, [r3, #8]
 8003110:	4a58      	ldr	r2, [pc, #352]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003112:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003116:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 0308 	and.w	r3, r3, #8
 8003120:	2b00      	cmp	r3, #0
 8003122:	d005      	beq.n	8003130 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003124:	4b53      	ldr	r3, [pc, #332]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003126:	689b      	ldr	r3, [r3, #8]
 8003128:	4a52      	ldr	r2, [pc, #328]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800312a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800312e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003130:	4b50      	ldr	r3, [pc, #320]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003132:	689b      	ldr	r3, [r3, #8]
 8003134:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	494d      	ldr	r1, [pc, #308]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800313e:	4313      	orrs	r3, r2
 8003140:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	f003 0301 	and.w	r3, r3, #1
 800314a:	2b00      	cmp	r3, #0
 800314c:	d044      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	2b01      	cmp	r3, #1
 8003154:	d107      	bne.n	8003166 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d119      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003162:	2301      	movs	r3, #1
 8003164:	e07f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	2b02      	cmp	r3, #2
 800316c:	d003      	beq.n	8003176 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003172:	2b03      	cmp	r3, #3
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003176:	4b3f      	ldr	r3, [pc, #252]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d109      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e06f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003186:	4b3b      	ldr	r3, [pc, #236]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f003 0302 	and.w	r3, r3, #2
 800318e:	2b00      	cmp	r3, #0
 8003190:	d101      	bne.n	8003196 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003192:	2301      	movs	r3, #1
 8003194:	e067      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003196:	4b37      	ldr	r3, [pc, #220]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	f023 0203 	bic.w	r2, r3, #3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	685b      	ldr	r3, [r3, #4]
 80031a2:	4934      	ldr	r1, [pc, #208]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031a4:	4313      	orrs	r3, r2
 80031a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031a8:	f7ff f9c0 	bl	800252c <HAL_GetTick>
 80031ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031ae:	e00a      	b.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031b0:	f7ff f9bc 	bl	800252c <HAL_GetTick>
 80031b4:	4602      	mov	r2, r0
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	1ad3      	subs	r3, r2, r3
 80031ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031be:	4293      	cmp	r3, r2
 80031c0:	d901      	bls.n	80031c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031c2:	2303      	movs	r3, #3
 80031c4:	e04f      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	4b2b      	ldr	r3, [pc, #172]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	f003 020c 	and.w	r2, r3, #12
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	429a      	cmp	r2, r3
 80031d6:	d1eb      	bne.n	80031b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031d8:	4b25      	ldr	r3, [pc, #148]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0307 	and.w	r3, r3, #7
 80031e0:	683a      	ldr	r2, [r7, #0]
 80031e2:	429a      	cmp	r2, r3
 80031e4:	d20c      	bcs.n	8003200 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031e6:	4b22      	ldr	r3, [pc, #136]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031e8:	683a      	ldr	r2, [r7, #0]
 80031ea:	b2d2      	uxtb	r2, r2
 80031ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031ee:	4b20      	ldr	r3, [pc, #128]	@ (8003270 <HAL_RCC_ClockConfig+0x1b8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	f003 0307 	and.w	r3, r3, #7
 80031f6:	683a      	ldr	r2, [r7, #0]
 80031f8:	429a      	cmp	r2, r3
 80031fa:	d001      	beq.n	8003200 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80031fc:	2301      	movs	r3, #1
 80031fe:	e032      	b.n	8003266 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 0304 	and.w	r3, r3, #4
 8003208:	2b00      	cmp	r3, #0
 800320a:	d008      	beq.n	800321e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800320c:	4b19      	ldr	r3, [pc, #100]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800320e:	689b      	ldr	r3, [r3, #8]
 8003210:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	4916      	ldr	r1, [pc, #88]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800321a:	4313      	orrs	r3, r2
 800321c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	f003 0308 	and.w	r3, r3, #8
 8003226:	2b00      	cmp	r3, #0
 8003228:	d009      	beq.n	800323e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800322a:	4b12      	ldr	r3, [pc, #72]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	691b      	ldr	r3, [r3, #16]
 8003236:	00db      	lsls	r3, r3, #3
 8003238:	490e      	ldr	r1, [pc, #56]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	4313      	orrs	r3, r2
 800323c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800323e:	f000 f821 	bl	8003284 <HAL_RCC_GetSysClockFreq>
 8003242:	4602      	mov	r2, r0
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <HAL_RCC_ClockConfig+0x1bc>)
 8003246:	689b      	ldr	r3, [r3, #8]
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	f003 030f 	and.w	r3, r3, #15
 800324e:	490a      	ldr	r1, [pc, #40]	@ (8003278 <HAL_RCC_ClockConfig+0x1c0>)
 8003250:	5ccb      	ldrb	r3, [r1, r3]
 8003252:	fa22 f303 	lsr.w	r3, r2, r3
 8003256:	4a09      	ldr	r2, [pc, #36]	@ (800327c <HAL_RCC_ClockConfig+0x1c4>)
 8003258:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800325a:	4b09      	ldr	r3, [pc, #36]	@ (8003280 <HAL_RCC_ClockConfig+0x1c8>)
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	4618      	mov	r0, r3
 8003260:	f7ff f920 	bl	80024a4 <HAL_InitTick>

  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3710      	adds	r7, #16
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
 800326e:	bf00      	nop
 8003270:	40023c00 	.word	0x40023c00
 8003274:	40023800 	.word	0x40023800
 8003278:	08009b40 	.word	0x08009b40
 800327c:	20000000 	.word	0x20000000
 8003280:	20000004 	.word	0x20000004

08003284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003284:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003288:	b094      	sub	sp, #80	@ 0x50
 800328a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800328c:	2300      	movs	r3, #0
 800328e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003290:	2300      	movs	r3, #0
 8003292:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003294:	2300      	movs	r3, #0
 8003296:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800329c:	4b79      	ldr	r3, [pc, #484]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 800329e:	689b      	ldr	r3, [r3, #8]
 80032a0:	f003 030c 	and.w	r3, r3, #12
 80032a4:	2b08      	cmp	r3, #8
 80032a6:	d00d      	beq.n	80032c4 <HAL_RCC_GetSysClockFreq+0x40>
 80032a8:	2b08      	cmp	r3, #8
 80032aa:	f200 80e1 	bhi.w	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d002      	beq.n	80032b8 <HAL_RCC_GetSysClockFreq+0x34>
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	d003      	beq.n	80032be <HAL_RCC_GetSysClockFreq+0x3a>
 80032b6:	e0db      	b.n	8003470 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80032b8:	4b73      	ldr	r3, [pc, #460]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 80032ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032bc:	e0db      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80032be:	4b73      	ldr	r3, [pc, #460]	@ (800348c <HAL_RCC_GetSysClockFreq+0x208>)
 80032c0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80032c2:	e0d8      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80032c4:	4b6f      	ldr	r3, [pc, #444]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80032cc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80032ce:	4b6d      	ldr	r3, [pc, #436]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d063      	beq.n	80033a2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032da:	4b6a      	ldr	r3, [pc, #424]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	099b      	lsrs	r3, r3, #6
 80032e0:	2200      	movs	r2, #0
 80032e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80032e4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80032e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80032ec:	633b      	str	r3, [r7, #48]	@ 0x30
 80032ee:	2300      	movs	r3, #0
 80032f0:	637b      	str	r3, [r7, #52]	@ 0x34
 80032f2:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80032f6:	4622      	mov	r2, r4
 80032f8:	462b      	mov	r3, r5
 80032fa:	f04f 0000 	mov.w	r0, #0
 80032fe:	f04f 0100 	mov.w	r1, #0
 8003302:	0159      	lsls	r1, r3, #5
 8003304:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003308:	0150      	lsls	r0, r2, #5
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	4621      	mov	r1, r4
 8003310:	1a51      	subs	r1, r2, r1
 8003312:	6139      	str	r1, [r7, #16]
 8003314:	4629      	mov	r1, r5
 8003316:	eb63 0301 	sbc.w	r3, r3, r1
 800331a:	617b      	str	r3, [r7, #20]
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003328:	4659      	mov	r1, fp
 800332a:	018b      	lsls	r3, r1, #6
 800332c:	4651      	mov	r1, sl
 800332e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003332:	4651      	mov	r1, sl
 8003334:	018a      	lsls	r2, r1, #6
 8003336:	4651      	mov	r1, sl
 8003338:	ebb2 0801 	subs.w	r8, r2, r1
 800333c:	4659      	mov	r1, fp
 800333e:	eb63 0901 	sbc.w	r9, r3, r1
 8003342:	f04f 0200 	mov.w	r2, #0
 8003346:	f04f 0300 	mov.w	r3, #0
 800334a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800334e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003352:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003356:	4690      	mov	r8, r2
 8003358:	4699      	mov	r9, r3
 800335a:	4623      	mov	r3, r4
 800335c:	eb18 0303 	adds.w	r3, r8, r3
 8003360:	60bb      	str	r3, [r7, #8]
 8003362:	462b      	mov	r3, r5
 8003364:	eb49 0303 	adc.w	r3, r9, r3
 8003368:	60fb      	str	r3, [r7, #12]
 800336a:	f04f 0200 	mov.w	r2, #0
 800336e:	f04f 0300 	mov.w	r3, #0
 8003372:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003376:	4629      	mov	r1, r5
 8003378:	024b      	lsls	r3, r1, #9
 800337a:	4621      	mov	r1, r4
 800337c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003380:	4621      	mov	r1, r4
 8003382:	024a      	lsls	r2, r1, #9
 8003384:	4610      	mov	r0, r2
 8003386:	4619      	mov	r1, r3
 8003388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800338a:	2200      	movs	r2, #0
 800338c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800338e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003390:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003394:	f7fd fc80 	bl	8000c98 <__aeabi_uldivmod>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4613      	mov	r3, r2
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	e058      	b.n	8003454 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033a2:	4b38      	ldr	r3, [pc, #224]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	099b      	lsrs	r3, r3, #6
 80033a8:	2200      	movs	r2, #0
 80033aa:	4618      	mov	r0, r3
 80033ac:	4611      	mov	r1, r2
 80033ae:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80033b2:	623b      	str	r3, [r7, #32]
 80033b4:	2300      	movs	r3, #0
 80033b6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033b8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80033bc:	4642      	mov	r2, r8
 80033be:	464b      	mov	r3, r9
 80033c0:	f04f 0000 	mov.w	r0, #0
 80033c4:	f04f 0100 	mov.w	r1, #0
 80033c8:	0159      	lsls	r1, r3, #5
 80033ca:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80033ce:	0150      	lsls	r0, r2, #5
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4641      	mov	r1, r8
 80033d6:	ebb2 0a01 	subs.w	sl, r2, r1
 80033da:	4649      	mov	r1, r9
 80033dc:	eb63 0b01 	sbc.w	fp, r3, r1
 80033e0:	f04f 0200 	mov.w	r2, #0
 80033e4:	f04f 0300 	mov.w	r3, #0
 80033e8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80033ec:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80033f0:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80033f4:	ebb2 040a 	subs.w	r4, r2, sl
 80033f8:	eb63 050b 	sbc.w	r5, r3, fp
 80033fc:	f04f 0200 	mov.w	r2, #0
 8003400:	f04f 0300 	mov.w	r3, #0
 8003404:	00eb      	lsls	r3, r5, #3
 8003406:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800340a:	00e2      	lsls	r2, r4, #3
 800340c:	4614      	mov	r4, r2
 800340e:	461d      	mov	r5, r3
 8003410:	4643      	mov	r3, r8
 8003412:	18e3      	adds	r3, r4, r3
 8003414:	603b      	str	r3, [r7, #0]
 8003416:	464b      	mov	r3, r9
 8003418:	eb45 0303 	adc.w	r3, r5, r3
 800341c:	607b      	str	r3, [r7, #4]
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	f04f 0300 	mov.w	r3, #0
 8003426:	e9d7 4500 	ldrd	r4, r5, [r7]
 800342a:	4629      	mov	r1, r5
 800342c:	028b      	lsls	r3, r1, #10
 800342e:	4621      	mov	r1, r4
 8003430:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003434:	4621      	mov	r1, r4
 8003436:	028a      	lsls	r2, r1, #10
 8003438:	4610      	mov	r0, r2
 800343a:	4619      	mov	r1, r3
 800343c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800343e:	2200      	movs	r2, #0
 8003440:	61bb      	str	r3, [r7, #24]
 8003442:	61fa      	str	r2, [r7, #28]
 8003444:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003448:	f7fd fc26 	bl	8000c98 <__aeabi_uldivmod>
 800344c:	4602      	mov	r2, r0
 800344e:	460b      	mov	r3, r1
 8003450:	4613      	mov	r3, r2
 8003452:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003454:	4b0b      	ldr	r3, [pc, #44]	@ (8003484 <HAL_RCC_GetSysClockFreq+0x200>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	0c1b      	lsrs	r3, r3, #16
 800345a:	f003 0303 	and.w	r3, r3, #3
 800345e:	3301      	adds	r3, #1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003464:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003466:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003468:	fbb2 f3f3 	udiv	r3, r2, r3
 800346c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800346e:	e002      	b.n	8003476 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003470:	4b05      	ldr	r3, [pc, #20]	@ (8003488 <HAL_RCC_GetSysClockFreq+0x204>)
 8003472:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003474:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003476:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003478:	4618      	mov	r0, r3
 800347a:	3750      	adds	r7, #80	@ 0x50
 800347c:	46bd      	mov	sp, r7
 800347e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003482:	bf00      	nop
 8003484:	40023800 	.word	0x40023800
 8003488:	00f42400 	.word	0x00f42400
 800348c:	007a1200 	.word	0x007a1200

08003490 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003490:	b480      	push	{r7}
 8003492:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8003496:	681b      	ldr	r3, [r3, #0]
}
 8003498:	4618      	mov	r0, r3
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr
 80034a2:	bf00      	nop
 80034a4:	20000000 	.word	0x20000000

080034a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80034ac:	f7ff fff0 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034b0:	4602      	mov	r2, r0
 80034b2:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	0a9b      	lsrs	r3, r3, #10
 80034b8:	f003 0307 	and.w	r3, r3, #7
 80034bc:	4903      	ldr	r1, [pc, #12]	@ (80034cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80034be:	5ccb      	ldrb	r3, [r1, r3]
 80034c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034c4:	4618      	mov	r0, r3
 80034c6:	bd80      	pop	{r7, pc}
 80034c8:	40023800 	.word	0x40023800
 80034cc:	08009b50 	.word	0x08009b50

080034d0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80034d4:	f7ff ffdc 	bl	8003490 <HAL_RCC_GetHCLKFreq>
 80034d8:	4602      	mov	r2, r0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80034dc:	689b      	ldr	r3, [r3, #8]
 80034de:	0b5b      	lsrs	r3, r3, #13
 80034e0:	f003 0307 	and.w	r3, r3, #7
 80034e4:	4903      	ldr	r1, [pc, #12]	@ (80034f4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80034e6:	5ccb      	ldrb	r3, [r1, r3]
 80034e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	bd80      	pop	{r7, pc}
 80034f0:	40023800 	.word	0x40023800
 80034f4:	08009b50 	.word	0x08009b50

080034f8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b082      	sub	sp, #8
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d101      	bne.n	800350a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e041      	b.n	800358e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003510:	b2db      	uxtb	r3, r3
 8003512:	2b00      	cmp	r3, #0
 8003514:	d106      	bne.n	8003524 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2200      	movs	r2, #0
 800351a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f7fe fc88 	bl	8001e34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681a      	ldr	r2, [r3, #0]
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	3304      	adds	r3, #4
 8003534:	4619      	mov	r1, r3
 8003536:	4610      	mov	r0, r2
 8003538:	f000 fb76 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2201      	movs	r2, #1
 8003540:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2201      	movs	r2, #1
 8003550:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2201      	movs	r2, #1
 8003558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	2201      	movs	r2, #1
 8003560:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2201      	movs	r2, #1
 8003568:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2201      	movs	r2, #1
 8003570:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2201      	movs	r2, #1
 8003578:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2201      	movs	r2, #1
 8003588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800358c:	2300      	movs	r3, #0
}
 800358e:	4618      	mov	r0, r3
 8003590:	3708      	adds	r7, #8
 8003592:	46bd      	mov	sp, r7
 8003594:	bd80      	pop	{r7, pc}

08003596 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8003596:	b580      	push	{r7, lr}
 8003598:	b082      	sub	sp, #8
 800359a:	af00      	add	r7, sp, #0
 800359c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d101      	bne.n	80035a8 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 80035a4:	2301      	movs	r3, #1
 80035a6:	e041      	b.n	800362c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80035ae:	b2db      	uxtb	r3, r3
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d106      	bne.n	80035c2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80035bc:	6878      	ldr	r0, [r7, #4]
 80035be:	f000 f839 	bl	8003634 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2202      	movs	r2, #2
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	3304      	adds	r3, #4
 80035d2:	4619      	mov	r1, r3
 80035d4:	4610      	mov	r0, r2
 80035d6:	f000 fb27 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2201      	movs	r2, #1
 80035de:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2201      	movs	r2, #1
 80035e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	2201      	movs	r2, #1
 80035ee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2201      	movs	r2, #1
 8003606:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	2201      	movs	r2, #1
 800360e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	2201      	movs	r2, #1
 8003616:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	2201      	movs	r2, #1
 800361e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	2201      	movs	r2, #1
 8003626:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800362a:	2300      	movs	r3, #0
}
 800362c:	4618      	mov	r0, r3
 800362e:	3708      	adds	r7, #8
 8003630:	46bd      	mov	sp, r7
 8003632:	bd80      	pop	{r7, pc}

08003634 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e041      	b.n	80036de <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003660:	b2db      	uxtb	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d106      	bne.n	8003674 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800366e:	6878      	ldr	r0, [r7, #4]
 8003670:	f000 f839 	bl	80036e6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2202      	movs	r2, #2
 8003678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681a      	ldr	r2, [r3, #0]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	3304      	adds	r3, #4
 8003684:	4619      	mov	r1, r3
 8003686:	4610      	mov	r0, r2
 8003688:	f000 face 	bl	8003c28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2201      	movs	r2, #1
 80036c8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2201      	movs	r2, #1
 80036d0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2201      	movs	r2, #1
 80036d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3708      	adds	r7, #8
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}

080036e6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b083      	sub	sp, #12
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80036ee:	bf00      	nop
 80036f0:	370c      	adds	r7, #12
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
	...

080036fc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b084      	sub	sp, #16
 8003700:	af00      	add	r7, sp, #0
 8003702:	6078      	str	r0, [r7, #4]
 8003704:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d109      	bne.n	8003720 <HAL_TIM_PWM_Start+0x24>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003712:	b2db      	uxtb	r3, r3
 8003714:	2b01      	cmp	r3, #1
 8003716:	bf14      	ite	ne
 8003718:	2301      	movne	r3, #1
 800371a:	2300      	moveq	r3, #0
 800371c:	b2db      	uxtb	r3, r3
 800371e:	e022      	b.n	8003766 <HAL_TIM_PWM_Start+0x6a>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b04      	cmp	r3, #4
 8003724:	d109      	bne.n	800373a <HAL_TIM_PWM_Start+0x3e>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800372c:	b2db      	uxtb	r3, r3
 800372e:	2b01      	cmp	r3, #1
 8003730:	bf14      	ite	ne
 8003732:	2301      	movne	r3, #1
 8003734:	2300      	moveq	r3, #0
 8003736:	b2db      	uxtb	r3, r3
 8003738:	e015      	b.n	8003766 <HAL_TIM_PWM_Start+0x6a>
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	2b08      	cmp	r3, #8
 800373e:	d109      	bne.n	8003754 <HAL_TIM_PWM_Start+0x58>
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003746:	b2db      	uxtb	r3, r3
 8003748:	2b01      	cmp	r3, #1
 800374a:	bf14      	ite	ne
 800374c:	2301      	movne	r3, #1
 800374e:	2300      	moveq	r3, #0
 8003750:	b2db      	uxtb	r3, r3
 8003752:	e008      	b.n	8003766 <HAL_TIM_PWM_Start+0x6a>
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800375a:	b2db      	uxtb	r3, r3
 800375c:	2b01      	cmp	r3, #1
 800375e:	bf14      	ite	ne
 8003760:	2301      	movne	r3, #1
 8003762:	2300      	moveq	r3, #0
 8003764:	b2db      	uxtb	r3, r3
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e068      	b.n	8003840 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	2b00      	cmp	r3, #0
 8003772:	d104      	bne.n	800377e <HAL_TIM_PWM_Start+0x82>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2202      	movs	r2, #2
 8003778:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800377c:	e013      	b.n	80037a6 <HAL_TIM_PWM_Start+0xaa>
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	2b04      	cmp	r3, #4
 8003782:	d104      	bne.n	800378e <HAL_TIM_PWM_Start+0x92>
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800378c:	e00b      	b.n	80037a6 <HAL_TIM_PWM_Start+0xaa>
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	2b08      	cmp	r3, #8
 8003792:	d104      	bne.n	800379e <HAL_TIM_PWM_Start+0xa2>
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800379c:	e003      	b.n	80037a6 <HAL_TIM_PWM_Start+0xaa>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2202      	movs	r2, #2
 80037a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2201      	movs	r2, #1
 80037ac:	6839      	ldr	r1, [r7, #0]
 80037ae:	4618      	mov	r0, r3
 80037b0:	f000 fce6 	bl	8004180 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	4a23      	ldr	r2, [pc, #140]	@ (8003848 <HAL_TIM_PWM_Start+0x14c>)
 80037ba:	4293      	cmp	r3, r2
 80037bc:	d107      	bne.n	80037ce <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	4a1d      	ldr	r2, [pc, #116]	@ (8003848 <HAL_TIM_PWM_Start+0x14c>)
 80037d4:	4293      	cmp	r3, r2
 80037d6:	d018      	beq.n	800380a <HAL_TIM_PWM_Start+0x10e>
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80037e0:	d013      	beq.n	800380a <HAL_TIM_PWM_Start+0x10e>
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	4a19      	ldr	r2, [pc, #100]	@ (800384c <HAL_TIM_PWM_Start+0x150>)
 80037e8:	4293      	cmp	r3, r2
 80037ea:	d00e      	beq.n	800380a <HAL_TIM_PWM_Start+0x10e>
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	4a17      	ldr	r2, [pc, #92]	@ (8003850 <HAL_TIM_PWM_Start+0x154>)
 80037f2:	4293      	cmp	r3, r2
 80037f4:	d009      	beq.n	800380a <HAL_TIM_PWM_Start+0x10e>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	4a16      	ldr	r2, [pc, #88]	@ (8003854 <HAL_TIM_PWM_Start+0x158>)
 80037fc:	4293      	cmp	r3, r2
 80037fe:	d004      	beq.n	800380a <HAL_TIM_PWM_Start+0x10e>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4a14      	ldr	r2, [pc, #80]	@ (8003858 <HAL_TIM_PWM_Start+0x15c>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d111      	bne.n	800382e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	689b      	ldr	r3, [r3, #8]
 8003810:	f003 0307 	and.w	r3, r3, #7
 8003814:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	2b06      	cmp	r3, #6
 800381a:	d010      	beq.n	800383e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f042 0201 	orr.w	r2, r2, #1
 800382a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800382c:	e007      	b.n	800383e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800383e:	2300      	movs	r3, #0
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	bd80      	pop	{r7, pc}
 8003848:	40010000 	.word	0x40010000
 800384c:	40000400 	.word	0x40000400
 8003850:	40000800 	.word	0x40000800
 8003854:	40000c00 	.word	0x40000c00
 8003858:	40014000 	.word	0x40014000

0800385c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b086      	sub	sp, #24
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003872:	2b01      	cmp	r3, #1
 8003874:	d101      	bne.n	800387a <HAL_TIM_OC_ConfigChannel+0x1e>
 8003876:	2302      	movs	r3, #2
 8003878:	e048      	b.n	800390c <HAL_TIM_OC_ConfigChannel+0xb0>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	2201      	movs	r2, #1
 800387e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	2b0c      	cmp	r3, #12
 8003886:	d839      	bhi.n	80038fc <HAL_TIM_OC_ConfigChannel+0xa0>
 8003888:	a201      	add	r2, pc, #4	@ (adr r2, 8003890 <HAL_TIM_OC_ConfigChannel+0x34>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038c5 	.word	0x080038c5
 8003894:	080038fd 	.word	0x080038fd
 8003898:	080038fd 	.word	0x080038fd
 800389c:	080038fd 	.word	0x080038fd
 80038a0:	080038d3 	.word	0x080038d3
 80038a4:	080038fd 	.word	0x080038fd
 80038a8:	080038fd 	.word	0x080038fd
 80038ac:	080038fd 	.word	0x080038fd
 80038b0:	080038e1 	.word	0x080038e1
 80038b4:	080038fd 	.word	0x080038fd
 80038b8:	080038fd 	.word	0x080038fd
 80038bc:	080038fd 	.word	0x080038fd
 80038c0:	080038ef 	.word	0x080038ef
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	68b9      	ldr	r1, [r7, #8]
 80038ca:	4618      	mov	r0, r3
 80038cc:	f000 fa32 	bl	8003d34 <TIM_OC1_SetConfig>
      break;
 80038d0:	e017      	b.n	8003902 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	68b9      	ldr	r1, [r7, #8]
 80038d8:	4618      	mov	r0, r3
 80038da:	f000 fa91 	bl	8003e00 <TIM_OC2_SetConfig>
      break;
 80038de:	e010      	b.n	8003902 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	68b9      	ldr	r1, [r7, #8]
 80038e6:	4618      	mov	r0, r3
 80038e8:	f000 faf6 	bl	8003ed8 <TIM_OC3_SetConfig>
      break;
 80038ec:	e009      	b.n	8003902 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	68b9      	ldr	r1, [r7, #8]
 80038f4:	4618      	mov	r0, r3
 80038f6:	f000 fb59 	bl	8003fac <TIM_OC4_SetConfig>
      break;
 80038fa:	e002      	b.n	8003902 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80038fc:	2301      	movs	r3, #1
 80038fe:	75fb      	strb	r3, [r7, #23]
      break;
 8003900:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800390a:	7dfb      	ldrb	r3, [r7, #23]
}
 800390c:	4618      	mov	r0, r3
 800390e:	3718      	adds	r7, #24
 8003910:	46bd      	mov	sp, r7
 8003912:	bd80      	pop	{r7, pc}

08003914 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	b086      	sub	sp, #24
 8003918:	af00      	add	r7, sp, #0
 800391a:	60f8      	str	r0, [r7, #12]
 800391c:	60b9      	str	r1, [r7, #8]
 800391e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003920:	2300      	movs	r3, #0
 8003922:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800392a:	2b01      	cmp	r3, #1
 800392c:	d101      	bne.n	8003932 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800392e:	2302      	movs	r3, #2
 8003930:	e0ae      	b.n	8003a90 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2201      	movs	r2, #1
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2b0c      	cmp	r3, #12
 800393e:	f200 809f 	bhi.w	8003a80 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003942:	a201      	add	r2, pc, #4	@ (adr r2, 8003948 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003948:	0800397d 	.word	0x0800397d
 800394c:	08003a81 	.word	0x08003a81
 8003950:	08003a81 	.word	0x08003a81
 8003954:	08003a81 	.word	0x08003a81
 8003958:	080039bd 	.word	0x080039bd
 800395c:	08003a81 	.word	0x08003a81
 8003960:	08003a81 	.word	0x08003a81
 8003964:	08003a81 	.word	0x08003a81
 8003968:	080039ff 	.word	0x080039ff
 800396c:	08003a81 	.word	0x08003a81
 8003970:	08003a81 	.word	0x08003a81
 8003974:	08003a81 	.word	0x08003a81
 8003978:	08003a3f 	.word	0x08003a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68b9      	ldr	r1, [r7, #8]
 8003982:	4618      	mov	r0, r3
 8003984:	f000 f9d6 	bl	8003d34 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	699a      	ldr	r2, [r3, #24]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0208 	orr.w	r2, r2, #8
 8003996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699a      	ldr	r2, [r3, #24]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f022 0204 	bic.w	r2, r2, #4
 80039a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6999      	ldr	r1, [r3, #24]
 80039ae:	68bb      	ldr	r3, [r7, #8]
 80039b0:	691a      	ldr	r2, [r3, #16]
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	430a      	orrs	r2, r1
 80039b8:	619a      	str	r2, [r3, #24]
      break;
 80039ba:	e064      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	68b9      	ldr	r1, [r7, #8]
 80039c2:	4618      	mov	r0, r3
 80039c4:	f000 fa1c 	bl	8003e00 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	699a      	ldr	r2, [r3, #24]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80039d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	699a      	ldr	r2, [r3, #24]
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80039e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	6999      	ldr	r1, [r3, #24]
 80039ee:	68bb      	ldr	r3, [r7, #8]
 80039f0:	691b      	ldr	r3, [r3, #16]
 80039f2:	021a      	lsls	r2, r3, #8
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	430a      	orrs	r2, r1
 80039fa:	619a      	str	r2, [r3, #24]
      break;
 80039fc:	e043      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68b9      	ldr	r1, [r7, #8]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f000 fa67 	bl	8003ed8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	69da      	ldr	r2, [r3, #28]
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f042 0208 	orr.w	r2, r2, #8
 8003a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	69da      	ldr	r2, [r3, #28]
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	681b      	ldr	r3, [r3, #0]
 8003a24:	f022 0204 	bic.w	r2, r2, #4
 8003a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	69d9      	ldr	r1, [r3, #28]
 8003a30:	68bb      	ldr	r3, [r7, #8]
 8003a32:	691a      	ldr	r2, [r3, #16]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	430a      	orrs	r2, r1
 8003a3a:	61da      	str	r2, [r3, #28]
      break;
 8003a3c:	e023      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68b9      	ldr	r1, [r7, #8]
 8003a44:	4618      	mov	r0, r3
 8003a46:	f000 fab1 	bl	8003fac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	69da      	ldr	r2, [r3, #28]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	69da      	ldr	r2, [r3, #28]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	69d9      	ldr	r1, [r3, #28]
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	691b      	ldr	r3, [r3, #16]
 8003a74:	021a      	lsls	r2, r3, #8
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	430a      	orrs	r2, r1
 8003a7c:	61da      	str	r2, [r3, #28]
      break;
 8003a7e:	e002      	b.n	8003a86 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	75fb      	strb	r3, [r7, #23]
      break;
 8003a84:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2200      	movs	r2, #0
 8003a8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	3718      	adds	r7, #24
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	b084      	sub	sp, #16
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d101      	bne.n	8003ab4 <HAL_TIM_ConfigClockSource+0x1c>
 8003ab0:	2302      	movs	r3, #2
 8003ab2:	e0b4      	b.n	8003c1e <HAL_TIM_ConfigClockSource+0x186>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	2202      	movs	r2, #2
 8003ac0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	689b      	ldr	r3, [r3, #8]
 8003aca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003acc:	68bb      	ldr	r3, [r7, #8]
 8003ace:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003ad2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003ada:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	68ba      	ldr	r2, [r7, #8]
 8003ae2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003aec:	d03e      	beq.n	8003b6c <HAL_TIM_ConfigClockSource+0xd4>
 8003aee:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003af2:	f200 8087 	bhi.w	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003af6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003afa:	f000 8086 	beq.w	8003c0a <HAL_TIM_ConfigClockSource+0x172>
 8003afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b02:	d87f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b04:	2b70      	cmp	r3, #112	@ 0x70
 8003b06:	d01a      	beq.n	8003b3e <HAL_TIM_ConfigClockSource+0xa6>
 8003b08:	2b70      	cmp	r3, #112	@ 0x70
 8003b0a:	d87b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b0c:	2b60      	cmp	r3, #96	@ 0x60
 8003b0e:	d050      	beq.n	8003bb2 <HAL_TIM_ConfigClockSource+0x11a>
 8003b10:	2b60      	cmp	r3, #96	@ 0x60
 8003b12:	d877      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b14:	2b50      	cmp	r3, #80	@ 0x50
 8003b16:	d03c      	beq.n	8003b92 <HAL_TIM_ConfigClockSource+0xfa>
 8003b18:	2b50      	cmp	r3, #80	@ 0x50
 8003b1a:	d873      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b1c:	2b40      	cmp	r3, #64	@ 0x40
 8003b1e:	d058      	beq.n	8003bd2 <HAL_TIM_ConfigClockSource+0x13a>
 8003b20:	2b40      	cmp	r3, #64	@ 0x40
 8003b22:	d86f      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b24:	2b30      	cmp	r3, #48	@ 0x30
 8003b26:	d064      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b28:	2b30      	cmp	r3, #48	@ 0x30
 8003b2a:	d86b      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b2c:	2b20      	cmp	r3, #32
 8003b2e:	d060      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b30:	2b20      	cmp	r3, #32
 8003b32:	d867      	bhi.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d05c      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b38:	2b10      	cmp	r3, #16
 8003b3a:	d05a      	beq.n	8003bf2 <HAL_TIM_ConfigClockSource+0x15a>
 8003b3c:	e062      	b.n	8003c04 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b46:	683b      	ldr	r3, [r7, #0]
 8003b48:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b4e:	f000 faf7 	bl	8004140 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	689b      	ldr	r3, [r3, #8]
 8003b58:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003b5a:	68bb      	ldr	r3, [r7, #8]
 8003b5c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003b60:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68ba      	ldr	r2, [r7, #8]
 8003b68:	609a      	str	r2, [r3, #8]
      break;
 8003b6a:	e04f      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003b7c:	f000 fae0 	bl	8004140 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	689a      	ldr	r2, [r3, #8]
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003b8e:	609a      	str	r2, [r3, #8]
      break;
 8003b90:	e03c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b9e:	461a      	mov	r2, r3
 8003ba0:	f000 fa54 	bl	800404c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	2150      	movs	r1, #80	@ 0x50
 8003baa:	4618      	mov	r0, r3
 8003bac:	f000 faad 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bb0:	e02c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003bbe:	461a      	mov	r2, r3
 8003bc0:	f000 fa73 	bl	80040aa <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	2160      	movs	r1, #96	@ 0x60
 8003bca:	4618      	mov	r0, r3
 8003bcc:	f000 fa9d 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bd0:	e01c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003bd6:	683b      	ldr	r3, [r7, #0]
 8003bd8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003bde:	461a      	mov	r2, r3
 8003be0:	f000 fa34 	bl	800404c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2140      	movs	r1, #64	@ 0x40
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 fa8d 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003bf0:	e00c      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681a      	ldr	r2, [r3, #0]
 8003bf6:	683b      	ldr	r3, [r7, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	4610      	mov	r0, r2
 8003bfe:	f000 fa84 	bl	800410a <TIM_ITRx_SetConfig>
      break;
 8003c02:	e003      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	73fb      	strb	r3, [r7, #15]
      break;
 8003c08:	e000      	b.n	8003c0c <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003c0a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	2201      	movs	r2, #1
 8003c10:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c1e:	4618      	mov	r0, r3
 8003c20:	3710      	adds	r7, #16
 8003c22:	46bd      	mov	sp, r7
 8003c24:	bd80      	pop	{r7, pc}
	...

08003c28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b085      	sub	sp, #20
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a37      	ldr	r2, [pc, #220]	@ (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d00f      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c46:	d00b      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	4a34      	ldr	r2, [pc, #208]	@ (8003d1c <TIM_Base_SetConfig+0xf4>)
 8003c4c:	4293      	cmp	r3, r2
 8003c4e:	d007      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	4a33      	ldr	r2, [pc, #204]	@ (8003d20 <TIM_Base_SetConfig+0xf8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d003      	beq.n	8003c60 <TIM_Base_SetConfig+0x38>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	4a32      	ldr	r2, [pc, #200]	@ (8003d24 <TIM_Base_SetConfig+0xfc>)
 8003c5c:	4293      	cmp	r3, r2
 8003c5e:	d108      	bne.n	8003c72 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c66:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	685b      	ldr	r3, [r3, #4]
 8003c6c:	68fa      	ldr	r2, [r7, #12]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	4a28      	ldr	r2, [pc, #160]	@ (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d01b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c80:	d017      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	4a25      	ldr	r2, [pc, #148]	@ (8003d1c <TIM_Base_SetConfig+0xf4>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d013      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a24      	ldr	r2, [pc, #144]	@ (8003d20 <TIM_Base_SetConfig+0xf8>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d00f      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	4a23      	ldr	r2, [pc, #140]	@ (8003d24 <TIM_Base_SetConfig+0xfc>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d00b      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a22      	ldr	r2, [pc, #136]	@ (8003d28 <TIM_Base_SetConfig+0x100>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d007      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	4a21      	ldr	r2, [pc, #132]	@ (8003d2c <TIM_Base_SetConfig+0x104>)
 8003ca6:	4293      	cmp	r3, r2
 8003ca8:	d003      	beq.n	8003cb2 <TIM_Base_SetConfig+0x8a>
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	4a20      	ldr	r2, [pc, #128]	@ (8003d30 <TIM_Base_SetConfig+0x108>)
 8003cae:	4293      	cmp	r3, r2
 8003cb0:	d108      	bne.n	8003cc4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003cb8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	68db      	ldr	r3, [r3, #12]
 8003cbe:	68fa      	ldr	r2, [r7, #12]
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003cca:	683b      	ldr	r3, [r7, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	4313      	orrs	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	689a      	ldr	r2, [r3, #8]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003cda:	683b      	ldr	r3, [r7, #0]
 8003cdc:	681a      	ldr	r2, [r3, #0]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	4a0c      	ldr	r2, [pc, #48]	@ (8003d18 <TIM_Base_SetConfig+0xf0>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d103      	bne.n	8003cf2 <TIM_Base_SetConfig+0xca>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	691a      	ldr	r2, [r3, #16]
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f043 0204 	orr.w	r2, r3, #4
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	2201      	movs	r2, #1
 8003d02:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	601a      	str	r2, [r3, #0]
}
 8003d0a:	bf00      	nop
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d14:	4770      	bx	lr
 8003d16:	bf00      	nop
 8003d18:	40010000 	.word	0x40010000
 8003d1c:	40000400 	.word	0x40000400
 8003d20:	40000800 	.word	0x40000800
 8003d24:	40000c00 	.word	0x40000c00
 8003d28:	40014000 	.word	0x40014000
 8003d2c:	40014400 	.word	0x40014400
 8003d30:	40014800 	.word	0x40014800

08003d34 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b087      	sub	sp, #28
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6a1b      	ldr	r3, [r3, #32]
 8003d42:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a1b      	ldr	r3, [r3, #32]
 8003d48:	f023 0201 	bic.w	r2, r3, #1
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	699b      	ldr	r3, [r3, #24]
 8003d5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f023 0303 	bic.w	r3, r3, #3
 8003d6a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003d6c:	683b      	ldr	r3, [r7, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68fa      	ldr	r2, [r7, #12]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003d76:	697b      	ldr	r3, [r7, #20]
 8003d78:	f023 0302 	bic.w	r3, r3, #2
 8003d7c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	697a      	ldr	r2, [r7, #20]
 8003d84:	4313      	orrs	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	4a1c      	ldr	r2, [pc, #112]	@ (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003d8c:	4293      	cmp	r3, r2
 8003d8e:	d10c      	bne.n	8003daa <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003d90:	697b      	ldr	r3, [r7, #20]
 8003d92:	f023 0308 	bic.w	r3, r3, #8
 8003d96:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	697a      	ldr	r2, [r7, #20]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f023 0304 	bic.w	r3, r3, #4
 8003da8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	4a13      	ldr	r2, [pc, #76]	@ (8003dfc <TIM_OC1_SetConfig+0xc8>)
 8003dae:	4293      	cmp	r3, r2
 8003db0:	d111      	bne.n	8003dd6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003db8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003dba:	693b      	ldr	r3, [r7, #16]
 8003dbc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003dc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	695b      	ldr	r3, [r3, #20]
 8003dc6:	693a      	ldr	r2, [r7, #16]
 8003dc8:	4313      	orrs	r3, r2
 8003dca:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003dcc:	683b      	ldr	r3, [r7, #0]
 8003dce:	699b      	ldr	r3, [r3, #24]
 8003dd0:	693a      	ldr	r2, [r7, #16]
 8003dd2:	4313      	orrs	r3, r2
 8003dd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	68fa      	ldr	r2, [r7, #12]
 8003de0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	697a      	ldr	r2, [r7, #20]
 8003dee:	621a      	str	r2, [r3, #32]
}
 8003df0:	bf00      	nop
 8003df2:	371c      	adds	r7, #28
 8003df4:	46bd      	mov	sp, r7
 8003df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfa:	4770      	bx	lr
 8003dfc:	40010000 	.word	0x40010000

08003e00 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b087      	sub	sp, #28
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
 8003e08:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6a1b      	ldr	r3, [r3, #32]
 8003e14:	f023 0210 	bic.w	r2, r3, #16
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	699b      	ldr	r3, [r3, #24]
 8003e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003e2e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003e36:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	021b      	lsls	r3, r3, #8
 8003e3e:	68fa      	ldr	r2, [r7, #12]
 8003e40:	4313      	orrs	r3, r2
 8003e42:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003e44:	697b      	ldr	r3, [r7, #20]
 8003e46:	f023 0320 	bic.w	r3, r3, #32
 8003e4a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	011b      	lsls	r3, r3, #4
 8003e52:	697a      	ldr	r2, [r7, #20]
 8003e54:	4313      	orrs	r3, r2
 8003e56:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	4a1e      	ldr	r2, [pc, #120]	@ (8003ed4 <TIM_OC2_SetConfig+0xd4>)
 8003e5c:	4293      	cmp	r3, r2
 8003e5e:	d10d      	bne.n	8003e7c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003e66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	68db      	ldr	r3, [r3, #12]
 8003e6c:	011b      	lsls	r3, r3, #4
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003e74:	697b      	ldr	r3, [r7, #20]
 8003e76:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e7a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	4a15      	ldr	r2, [pc, #84]	@ (8003ed4 <TIM_OC2_SetConfig+0xd4>)
 8003e80:	4293      	cmp	r3, r2
 8003e82:	d113      	bne.n	8003eac <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003e84:	693b      	ldr	r3, [r7, #16]
 8003e86:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003e8a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003e92:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003e94:	683b      	ldr	r3, [r7, #0]
 8003e96:	695b      	ldr	r3, [r3, #20]
 8003e98:	009b      	lsls	r3, r3, #2
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003ea0:	683b      	ldr	r3, [r7, #0]
 8003ea2:	699b      	ldr	r3, [r3, #24]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	693a      	ldr	r2, [r7, #16]
 8003ea8:	4313      	orrs	r3, r2
 8003eaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	693a      	ldr	r2, [r7, #16]
 8003eb0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	68fa      	ldr	r2, [r7, #12]
 8003eb6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685a      	ldr	r2, [r3, #4]
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	697a      	ldr	r2, [r7, #20]
 8003ec4:	621a      	str	r2, [r3, #32]
}
 8003ec6:	bf00      	nop
 8003ec8:	371c      	adds	r7, #28
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed0:	4770      	bx	lr
 8003ed2:	bf00      	nop
 8003ed4:	40010000 	.word	0x40010000

08003ed8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b087      	sub	sp, #28
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6a1b      	ldr	r3, [r3, #32]
 8003eec:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	685b      	ldr	r3, [r3, #4]
 8003ef8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	69db      	ldr	r3, [r3, #28]
 8003efe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	f023 0303 	bic.w	r3, r3, #3
 8003f0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	68fa      	ldr	r2, [r7, #12]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003f20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	689b      	ldr	r3, [r3, #8]
 8003f26:	021b      	lsls	r3, r3, #8
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	4a1d      	ldr	r2, [pc, #116]	@ (8003fa8 <TIM_OC3_SetConfig+0xd0>)
 8003f32:	4293      	cmp	r3, r2
 8003f34:	d10d      	bne.n	8003f52 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003f36:	697b      	ldr	r3, [r7, #20]
 8003f38:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003f3c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	68db      	ldr	r3, [r3, #12]
 8003f42:	021b      	lsls	r3, r3, #8
 8003f44:	697a      	ldr	r2, [r7, #20]
 8003f46:	4313      	orrs	r3, r2
 8003f48:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003f50:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	4a14      	ldr	r2, [pc, #80]	@ (8003fa8 <TIM_OC3_SetConfig+0xd0>)
 8003f56:	4293      	cmp	r3, r2
 8003f58:	d113      	bne.n	8003f82 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003f5a:	693b      	ldr	r3, [r7, #16]
 8003f5c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003f62:	693b      	ldr	r3, [r7, #16]
 8003f64:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	011b      	lsls	r3, r3, #4
 8003f70:	693a      	ldr	r2, [r7, #16]
 8003f72:	4313      	orrs	r3, r2
 8003f74:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	699b      	ldr	r3, [r3, #24]
 8003f7a:	011b      	lsls	r3, r3, #4
 8003f7c:	693a      	ldr	r2, [r7, #16]
 8003f7e:	4313      	orrs	r3, r2
 8003f80:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	693a      	ldr	r2, [r7, #16]
 8003f86:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	685a      	ldr	r2, [r3, #4]
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	697a      	ldr	r2, [r7, #20]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr
 8003fa8:	40010000 	.word	0x40010000

08003fac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b087      	sub	sp, #28
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	6a1b      	ldr	r3, [r3, #32]
 8003fba:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6a1b      	ldr	r3, [r3, #32]
 8003fc0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	69db      	ldr	r3, [r3, #28]
 8003fd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003fda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003fe2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	021b      	lsls	r3, r3, #8
 8003fea:	68fa      	ldr	r2, [r7, #12]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ff0:	693b      	ldr	r3, [r7, #16]
 8003ff2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ff6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	031b      	lsls	r3, r3, #12
 8003ffe:	693a      	ldr	r2, [r7, #16]
 8004000:	4313      	orrs	r3, r2
 8004002:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	4a10      	ldr	r2, [pc, #64]	@ (8004048 <TIM_OC4_SetConfig+0x9c>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d109      	bne.n	8004020 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800400c:	697b      	ldr	r3, [r7, #20]
 800400e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004012:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	695b      	ldr	r3, [r3, #20]
 8004018:	019b      	lsls	r3, r3, #6
 800401a:	697a      	ldr	r2, [r7, #20]
 800401c:	4313      	orrs	r3, r2
 800401e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	697a      	ldr	r2, [r7, #20]
 8004024:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	68fa      	ldr	r2, [r7, #12]
 800402a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800402c:	683b      	ldr	r3, [r7, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	693a      	ldr	r2, [r7, #16]
 8004038:	621a      	str	r2, [r3, #32]
}
 800403a:	bf00      	nop
 800403c:	371c      	adds	r7, #28
 800403e:	46bd      	mov	sp, r7
 8004040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004044:	4770      	bx	lr
 8004046:	bf00      	nop
 8004048:	40010000 	.word	0x40010000

0800404c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800404c:	b480      	push	{r7}
 800404e:	b087      	sub	sp, #28
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	6a1b      	ldr	r3, [r3, #32]
 800405c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6a1b      	ldr	r3, [r3, #32]
 8004062:	f023 0201 	bic.w	r2, r3, #1
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	699b      	ldr	r3, [r3, #24]
 800406e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	011b      	lsls	r3, r3, #4
 800407c:	693a      	ldr	r2, [r7, #16]
 800407e:	4313      	orrs	r3, r2
 8004080:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 030a 	bic.w	r3, r3, #10
 8004088:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800408a:	697a      	ldr	r2, [r7, #20]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4313      	orrs	r3, r2
 8004090:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	693a      	ldr	r2, [r7, #16]
 8004096:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	697a      	ldr	r2, [r7, #20]
 800409c:	621a      	str	r2, [r3, #32]
}
 800409e:	bf00      	nop
 80040a0:	371c      	adds	r7, #28
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80040aa:	b480      	push	{r7}
 80040ac:	b087      	sub	sp, #28
 80040ae:	af00      	add	r7, sp, #0
 80040b0:	60f8      	str	r0, [r7, #12]
 80040b2:	60b9      	str	r1, [r7, #8]
 80040b4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	6a1b      	ldr	r3, [r3, #32]
 80040ba:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	f023 0210 	bic.w	r2, r3, #16
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	699b      	ldr	r3, [r3, #24]
 80040cc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80040ce:	693b      	ldr	r3, [r7, #16]
 80040d0:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80040d4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	031b      	lsls	r3, r3, #12
 80040da:	693a      	ldr	r2, [r7, #16]
 80040dc:	4313      	orrs	r3, r2
 80040de:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80040e6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	011b      	lsls	r3, r3, #4
 80040ec:	697a      	ldr	r2, [r7, #20]
 80040ee:	4313      	orrs	r3, r2
 80040f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	693a      	ldr	r2, [r7, #16]
 80040f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	697a      	ldr	r2, [r7, #20]
 80040fc:	621a      	str	r2, [r3, #32]
}
 80040fe:	bf00      	nop
 8004100:	371c      	adds	r7, #28
 8004102:	46bd      	mov	sp, r7
 8004104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004108:	4770      	bx	lr

0800410a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800410a:	b480      	push	{r7}
 800410c:	b085      	sub	sp, #20
 800410e:	af00      	add	r7, sp, #0
 8004110:	6078      	str	r0, [r7, #4]
 8004112:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	689b      	ldr	r3, [r3, #8]
 8004118:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004120:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004122:	683a      	ldr	r2, [r7, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	4313      	orrs	r3, r2
 8004128:	f043 0307 	orr.w	r3, r3, #7
 800412c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	68fa      	ldr	r2, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]
}
 8004134:	bf00      	nop
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
 800414c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	689b      	ldr	r3, [r3, #8]
 8004152:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800415a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	021a      	lsls	r2, r3, #8
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	431a      	orrs	r2, r3
 8004164:	68bb      	ldr	r3, [r7, #8]
 8004166:	4313      	orrs	r3, r2
 8004168:	697a      	ldr	r2, [r7, #20]
 800416a:	4313      	orrs	r3, r2
 800416c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	609a      	str	r2, [r3, #8]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr

08004180 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004180:	b480      	push	{r7}
 8004182:	b087      	sub	sp, #28
 8004184:	af00      	add	r7, sp, #0
 8004186:	60f8      	str	r0, [r7, #12]
 8004188:	60b9      	str	r1, [r7, #8]
 800418a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800418c:	68bb      	ldr	r3, [r7, #8]
 800418e:	f003 031f 	and.w	r3, r3, #31
 8004192:	2201      	movs	r2, #1
 8004194:	fa02 f303 	lsl.w	r3, r2, r3
 8004198:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	6a1a      	ldr	r2, [r3, #32]
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	43db      	mvns	r3, r3
 80041a2:	401a      	ands	r2, r3
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	6a1a      	ldr	r2, [r3, #32]
 80041ac:	68bb      	ldr	r3, [r7, #8]
 80041ae:	f003 031f 	and.w	r3, r3, #31
 80041b2:	6879      	ldr	r1, [r7, #4]
 80041b4:	fa01 f303 	lsl.w	r3, r1, r3
 80041b8:	431a      	orrs	r2, r3
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	bf00      	nop
 80041c0:	371c      	adds	r7, #28
 80041c2:	46bd      	mov	sp, r7
 80041c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c8:	4770      	bx	lr
	...

080041cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b085      	sub	sp, #20
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d101      	bne.n	80041e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80041e0:	2302      	movs	r3, #2
 80041e2:	e050      	b.n	8004286 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2201      	movs	r2, #1
 80041e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	2202      	movs	r2, #2
 80041f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	685b      	ldr	r3, [r3, #4]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	689b      	ldr	r3, [r3, #8]
 8004202:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800420a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800420c:	683b      	ldr	r3, [r7, #0]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68fa      	ldr	r2, [r7, #12]
 8004212:	4313      	orrs	r3, r2
 8004214:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	68fa      	ldr	r2, [r7, #12]
 800421c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	4a1c      	ldr	r2, [pc, #112]	@ (8004294 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004224:	4293      	cmp	r3, r2
 8004226:	d018      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004230:	d013      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	4a18      	ldr	r2, [pc, #96]	@ (8004298 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004238:	4293      	cmp	r3, r2
 800423a:	d00e      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	4a16      	ldr	r2, [pc, #88]	@ (800429c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d009      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	4a15      	ldr	r2, [pc, #84]	@ (80042a0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800424c:	4293      	cmp	r3, r2
 800424e:	d004      	beq.n	800425a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4a13      	ldr	r2, [pc, #76]	@ (80042a4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d10c      	bne.n	8004274 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004260:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	68ba      	ldr	r2, [r7, #8]
 8004268:	4313      	orrs	r3, r2
 800426a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	68ba      	ldr	r2, [r7, #8]
 8004272:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2200      	movs	r2, #0
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004284:	2300      	movs	r3, #0
}
 8004286:	4618      	mov	r0, r3
 8004288:	3714      	adds	r7, #20
 800428a:	46bd      	mov	sp, r7
 800428c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004290:	4770      	bx	lr
 8004292:	bf00      	nop
 8004294:	40010000 	.word	0x40010000
 8004298:	40000400 	.word	0x40000400
 800429c:	40000800 	.word	0x40000800
 80042a0:	40000c00 	.word	0x40000c00
 80042a4:	40014000 	.word	0x40014000

080042a8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b085      	sub	sp, #20
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80042b2:	2300      	movs	r3, #0
 80042b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e03d      	b.n	8004340 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	68db      	ldr	r3, [r3, #12]
 80042d6:	4313      	orrs	r3, r2
 80042d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80042e0:	683b      	ldr	r3, [r7, #0]
 80042e2:	689b      	ldr	r3, [r3, #8]
 80042e4:	4313      	orrs	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	685b      	ldr	r3, [r3, #4]
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80042fc:	683b      	ldr	r3, [r7, #0]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	4313      	orrs	r3, r2
 8004302:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	691b      	ldr	r3, [r3, #16]
 800430e:	4313      	orrs	r3, r2
 8004310:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	695b      	ldr	r3, [r3, #20]
 800431c:	4313      	orrs	r3, r2
 800431e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	69db      	ldr	r3, [r3, #28]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	2200      	movs	r2, #0
 800433a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800433e:	2300      	movs	r3, #0
}
 8004340:	4618      	mov	r0, r3
 8004342:	3714      	adds	r7, #20
 8004344:	46bd      	mov	sp, r7
 8004346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800434a:	4770      	bx	lr

0800434c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800434c:	b580      	push	{r7, lr}
 800434e:	b082      	sub	sp, #8
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800435a:	2301      	movs	r3, #1
 800435c:	e042      	b.n	80043e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004364:	b2db      	uxtb	r3, r3
 8004366:	2b00      	cmp	r3, #0
 8004368:	d106      	bne.n	8004378 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	2200      	movs	r2, #0
 800436e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004372:	6878      	ldr	r0, [r7, #4]
 8004374:	f7fd fee8 	bl	8002148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	2224      	movs	r2, #36	@ 0x24
 800437c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	68da      	ldr	r2, [r3, #12]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800438e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004390:	6878      	ldr	r0, [r7, #4]
 8004392:	f000 fdd3 	bl	8004f3c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	691a      	ldr	r2, [r3, #16]
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80043a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80043b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80043c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	2200      	movs	r2, #0
 80043ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2220      	movs	r2, #32
 80043d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043e2:	2300      	movs	r3, #0
}
 80043e4:	4618      	mov	r0, r3
 80043e6:	3708      	adds	r7, #8
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b08a      	sub	sp, #40	@ 0x28
 80043f0:	af02      	add	r7, sp, #8
 80043f2:	60f8      	str	r0, [r7, #12]
 80043f4:	60b9      	str	r1, [r7, #8]
 80043f6:	603b      	str	r3, [r7, #0]
 80043f8:	4613      	mov	r3, r2
 80043fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043fc:	2300      	movs	r3, #0
 80043fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004406:	b2db      	uxtb	r3, r3
 8004408:	2b20      	cmp	r3, #32
 800440a:	d175      	bne.n	80044f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800440c:	68bb      	ldr	r3, [r7, #8]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <HAL_UART_Transmit+0x2c>
 8004412:	88fb      	ldrh	r3, [r7, #6]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e06e      	b.n	80044fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2200      	movs	r2, #0
 8004420:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2221      	movs	r2, #33	@ 0x21
 8004426:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800442a:	f7fe f87f 	bl	800252c <HAL_GetTick>
 800442e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	88fa      	ldrh	r2, [r7, #6]
 8004434:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	88fa      	ldrh	r2, [r7, #6]
 800443a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004444:	d108      	bne.n	8004458 <HAL_UART_Transmit+0x6c>
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d104      	bne.n	8004458 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800444e:	2300      	movs	r3, #0
 8004450:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004452:	68bb      	ldr	r3, [r7, #8]
 8004454:	61bb      	str	r3, [r7, #24]
 8004456:	e003      	b.n	8004460 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004458:	68bb      	ldr	r3, [r7, #8]
 800445a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800445c:	2300      	movs	r3, #0
 800445e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004460:	e02e      	b.n	80044c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	9300      	str	r3, [sp, #0]
 8004466:	697b      	ldr	r3, [r7, #20]
 8004468:	2200      	movs	r2, #0
 800446a:	2180      	movs	r1, #128	@ 0x80
 800446c:	68f8      	ldr	r0, [r7, #12]
 800446e:	f000 fb37 	bl	8004ae0 <UART_WaitOnFlagUntilTimeout>
 8004472:	4603      	mov	r3, r0
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	2220      	movs	r2, #32
 800447c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004480:	2303      	movs	r3, #3
 8004482:	e03a      	b.n	80044fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004484:	69fb      	ldr	r3, [r7, #28]
 8004486:	2b00      	cmp	r3, #0
 8004488:	d10b      	bne.n	80044a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800448a:	69bb      	ldr	r3, [r7, #24]
 800448c:	881b      	ldrh	r3, [r3, #0]
 800448e:	461a      	mov	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004498:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3302      	adds	r3, #2
 800449e:	61bb      	str	r3, [r7, #24]
 80044a0:	e007      	b.n	80044b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80044a2:	69fb      	ldr	r3, [r7, #28]
 80044a4:	781a      	ldrb	r2, [r3, #0]
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80044ac:	69fb      	ldr	r3, [r7, #28]
 80044ae:	3301      	adds	r3, #1
 80044b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d1cb      	bne.n	8004462 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	9300      	str	r3, [sp, #0]
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	2200      	movs	r2, #0
 80044d2:	2140      	movs	r1, #64	@ 0x40
 80044d4:	68f8      	ldr	r0, [r7, #12]
 80044d6:	f000 fb03 	bl	8004ae0 <UART_WaitOnFlagUntilTimeout>
 80044da:	4603      	mov	r3, r0
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d005      	beq.n	80044ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2220      	movs	r2, #32
 80044e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044e8:	2303      	movs	r3, #3
 80044ea:	e006      	b.n	80044fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2220      	movs	r2, #32
 80044f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044f4:	2300      	movs	r3, #0
 80044f6:	e000      	b.n	80044fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044f8:	2302      	movs	r3, #2
  }
}
 80044fa:	4618      	mov	r0, r3
 80044fc:	3720      	adds	r7, #32
 80044fe:	46bd      	mov	sp, r7
 8004500:	bd80      	pop	{r7, pc}

08004502 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004502:	b580      	push	{r7, lr}
 8004504:	b084      	sub	sp, #16
 8004506:	af00      	add	r7, sp, #0
 8004508:	60f8      	str	r0, [r7, #12]
 800450a:	60b9      	str	r1, [r7, #8]
 800450c:	4613      	mov	r3, r2
 800450e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004516:	b2db      	uxtb	r3, r3
 8004518:	2b20      	cmp	r3, #32
 800451a:	d112      	bne.n	8004542 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d002      	beq.n	8004528 <HAL_UART_Receive_IT+0x26>
 8004522:	88fb      	ldrh	r3, [r7, #6]
 8004524:	2b00      	cmp	r3, #0
 8004526:	d101      	bne.n	800452c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004528:	2301      	movs	r3, #1
 800452a:	e00b      	b.n	8004544 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2200      	movs	r2, #0
 8004530:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004532:	88fb      	ldrh	r3, [r7, #6]
 8004534:	461a      	mov	r2, r3
 8004536:	68b9      	ldr	r1, [r7, #8]
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f000 fb2a 	bl	8004b92 <UART_Start_Receive_IT>
 800453e:	4603      	mov	r3, r0
 8004540:	e000      	b.n	8004544 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004542:	2302      	movs	r3, #2
  }
}
 8004544:	4618      	mov	r0, r3
 8004546:	3710      	adds	r7, #16
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}

0800454c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b0ba      	sub	sp, #232	@ 0xe8
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	695b      	ldr	r3, [r3, #20]
 800456e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004572:	2300      	movs	r3, #0
 8004574:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004578:	2300      	movs	r3, #0
 800457a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800457e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004582:	f003 030f 	and.w	r3, r3, #15
 8004586:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800458a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004592:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004596:	f003 0320 	and.w	r3, r3, #32
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <HAL_UART_IRQHandler+0x66>
 800459e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045a2:	f003 0320 	and.w	r3, r3, #32
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d003      	beq.n	80045b2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f000 fc07 	bl	8004dbe <UART_Receive_IT>
      return;
 80045b0:	e273      	b.n	8004a9a <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80045b2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	f000 80de 	beq.w	8004778 <HAL_UART_IRQHandler+0x22c>
 80045bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80045c0:	f003 0301 	and.w	r3, r3, #1
 80045c4:	2b00      	cmp	r3, #0
 80045c6:	d106      	bne.n	80045d6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80045c8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045cc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	f000 80d1 	beq.w	8004778 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80045d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045da:	f003 0301 	and.w	r3, r3, #1
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00b      	beq.n	80045fa <HAL_UART_IRQHandler+0xae>
 80045e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80045e6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d005      	beq.n	80045fa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	f043 0201 	orr.w	r2, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80045fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80045fe:	f003 0304 	and.w	r3, r3, #4
 8004602:	2b00      	cmp	r3, #0
 8004604:	d00b      	beq.n	800461e <HAL_UART_IRQHandler+0xd2>
 8004606:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800460a:	f003 0301 	and.w	r3, r3, #1
 800460e:	2b00      	cmp	r3, #0
 8004610:	d005      	beq.n	800461e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004616:	f043 0202 	orr.w	r2, r3, #2
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800461e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004622:	f003 0302 	and.w	r3, r3, #2
 8004626:	2b00      	cmp	r3, #0
 8004628:	d00b      	beq.n	8004642 <HAL_UART_IRQHandler+0xf6>
 800462a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800462e:	f003 0301 	and.w	r3, r3, #1
 8004632:	2b00      	cmp	r3, #0
 8004634:	d005      	beq.n	8004642 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800463a:	f043 0204 	orr.w	r2, r3, #4
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004646:	f003 0308 	and.w	r3, r3, #8
 800464a:	2b00      	cmp	r3, #0
 800464c:	d011      	beq.n	8004672 <HAL_UART_IRQHandler+0x126>
 800464e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004652:	f003 0320 	and.w	r3, r3, #32
 8004656:	2b00      	cmp	r3, #0
 8004658:	d105      	bne.n	8004666 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800465a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800465e:	f003 0301 	and.w	r3, r3, #1
 8004662:	2b00      	cmp	r3, #0
 8004664:	d005      	beq.n	8004672 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800466a:	f043 0208 	orr.w	r2, r3, #8
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004676:	2b00      	cmp	r3, #0
 8004678:	f000 820a 	beq.w	8004a90 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800467c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004680:	f003 0320 	and.w	r3, r3, #32
 8004684:	2b00      	cmp	r3, #0
 8004686:	d008      	beq.n	800469a <HAL_UART_IRQHandler+0x14e>
 8004688:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800468c:	f003 0320 	and.w	r3, r3, #32
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 fb92 	bl	8004dbe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	2b40      	cmp	r3, #64	@ 0x40
 80046a6:	bf0c      	ite	eq
 80046a8:	2301      	moveq	r3, #1
 80046aa:	2300      	movne	r3, #0
 80046ac:	b2db      	uxtb	r3, r3
 80046ae:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046b6:	f003 0308 	and.w	r3, r3, #8
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d103      	bne.n	80046c6 <HAL_UART_IRQHandler+0x17a>
 80046be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d04f      	beq.n	8004766 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80046c6:	6878      	ldr	r0, [r7, #4]
 80046c8:	f000 fa9d 	bl	8004c06 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	695b      	ldr	r3, [r3, #20]
 80046d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046d6:	2b40      	cmp	r3, #64	@ 0x40
 80046d8:	d141      	bne.n	800475e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	3314      	adds	r3, #20
 80046e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80046e8:	e853 3f00 	ldrex	r3, [r3]
 80046ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80046f0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80046f4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046f8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	3314      	adds	r3, #20
 8004702:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004706:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800470a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800470e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004712:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004716:	e841 2300 	strex	r3, r2, [r1]
 800471a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800471e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1d9      	bne.n	80046da <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800472a:	2b00      	cmp	r3, #0
 800472c:	d013      	beq.n	8004756 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004732:	4a8a      	ldr	r2, [pc, #552]	@ (800495c <HAL_UART_IRQHandler+0x410>)
 8004734:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800473a:	4618      	mov	r0, r3
 800473c:	f7fe f883 	bl	8002846 <HAL_DMA_Abort_IT>
 8004740:	4603      	mov	r3, r0
 8004742:	2b00      	cmp	r3, #0
 8004744:	d016      	beq.n	8004774 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800474a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800474c:	687a      	ldr	r2, [r7, #4]
 800474e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004750:	4610      	mov	r0, r2
 8004752:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004754:	e00e      	b.n	8004774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004756:	6878      	ldr	r0, [r7, #4]
 8004758:	f000 f9ac 	bl	8004ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800475c:	e00a      	b.n	8004774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f000 f9a8 	bl	8004ab4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004764:	e006      	b.n	8004774 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f000 f9a4 	bl	8004ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2200      	movs	r2, #0
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004772:	e18d      	b.n	8004a90 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004774:	bf00      	nop
    return;
 8004776:	e18b      	b.n	8004a90 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800477c:	2b01      	cmp	r3, #1
 800477e:	f040 8167 	bne.w	8004a50 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004782:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004786:	f003 0310 	and.w	r3, r3, #16
 800478a:	2b00      	cmp	r3, #0
 800478c:	f000 8160 	beq.w	8004a50 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004790:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004794:	f003 0310 	and.w	r3, r3, #16
 8004798:	2b00      	cmp	r3, #0
 800479a:	f000 8159 	beq.w	8004a50 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800479e:	2300      	movs	r3, #0
 80047a0:	60bb      	str	r3, [r7, #8]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	60bb      	str	r3, [r7, #8]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	685b      	ldr	r3, [r3, #4]
 80047b0:	60bb      	str	r3, [r7, #8]
 80047b2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80047be:	2b40      	cmp	r3, #64	@ 0x40
 80047c0:	f040 80ce 	bne.w	8004960 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80047d0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	f000 80a9 	beq.w	800492c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80047de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047e2:	429a      	cmp	r2, r3
 80047e4:	f080 80a2 	bcs.w	800492c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80047ee:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047f4:	69db      	ldr	r3, [r3, #28]
 80047f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047fa:	f000 8088 	beq.w	800490e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	330c      	adds	r3, #12
 8004804:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800480c:	e853 3f00 	ldrex	r3, [r3]
 8004810:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004814:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004818:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800481c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	330c      	adds	r3, #12
 8004826:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800482a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800482e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004832:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004836:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800483a:	e841 2300 	strex	r3, r2, [r1]
 800483e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004842:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004846:	2b00      	cmp	r3, #0
 8004848:	d1d9      	bne.n	80047fe <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	3314      	adds	r3, #20
 8004850:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004852:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004854:	e853 3f00 	ldrex	r3, [r3]
 8004858:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800485a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800485c:	f023 0301 	bic.w	r3, r3, #1
 8004860:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	3314      	adds	r3, #20
 800486a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800486e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004872:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004874:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004876:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800487a:	e841 2300 	strex	r3, r2, [r1]
 800487e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004880:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004882:	2b00      	cmp	r3, #0
 8004884:	d1e1      	bne.n	800484a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	3314      	adds	r3, #20
 800488c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800488e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004890:	e853 3f00 	ldrex	r3, [r3]
 8004894:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004896:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004898:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800489c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	3314      	adds	r3, #20
 80048a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80048aa:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80048ac:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048ae:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80048b0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80048b2:	e841 2300 	strex	r3, r2, [r1]
 80048b6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80048b8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d1e3      	bne.n	8004886 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2220      	movs	r2, #32
 80048c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	2200      	movs	r2, #0
 80048ca:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80048dc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80048de:	f023 0310 	bic.w	r3, r3, #16
 80048e2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	330c      	adds	r3, #12
 80048ec:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80048f0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80048f2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80048f6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80048f8:	e841 2300 	strex	r3, r2, [r1]
 80048fc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80048fe:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1e3      	bne.n	80048cc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004908:	4618      	mov	r0, r3
 800490a:	f7fd ff2c 	bl	8002766 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2202      	movs	r2, #2
 8004912:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800491c:	b29b      	uxth	r3, r3
 800491e:	1ad3      	subs	r3, r2, r3
 8004920:	b29b      	uxth	r3, r3
 8004922:	4619      	mov	r1, r3
 8004924:	6878      	ldr	r0, [r7, #4]
 8004926:	f000 f8cf 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800492a:	e0b3      	b.n	8004a94 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004930:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004934:	429a      	cmp	r2, r3
 8004936:	f040 80ad 	bne.w	8004a94 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800493e:	69db      	ldr	r3, [r3, #28]
 8004940:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004944:	f040 80a6 	bne.w	8004a94 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2202      	movs	r2, #2
 800494c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004952:	4619      	mov	r1, r3
 8004954:	6878      	ldr	r0, [r7, #4]
 8004956:	f000 f8b7 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
      return;
 800495a:	e09b      	b.n	8004a94 <HAL_UART_IRQHandler+0x548>
 800495c:	08004ccd 	.word	0x08004ccd
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004968:	b29b      	uxth	r3, r3
 800496a:	1ad3      	subs	r3, r2, r3
 800496c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004974:	b29b      	uxth	r3, r3
 8004976:	2b00      	cmp	r3, #0
 8004978:	f000 808e 	beq.w	8004a98 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 800497c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004980:	2b00      	cmp	r3, #0
 8004982:	f000 8089 	beq.w	8004a98 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	330c      	adds	r3, #12
 800498c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800498e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004990:	e853 3f00 	ldrex	r3, [r3]
 8004994:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004996:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004998:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800499c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	330c      	adds	r3, #12
 80049a6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80049aa:	647a      	str	r2, [r7, #68]	@ 0x44
 80049ac:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049ae:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80049b0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80049b2:	e841 2300 	strex	r3, r2, [r1]
 80049b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80049b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d1e3      	bne.n	8004986 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	3314      	adds	r3, #20
 80049c4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049c8:	e853 3f00 	ldrex	r3, [r3]
 80049cc:	623b      	str	r3, [r7, #32]
   return(result);
 80049ce:	6a3b      	ldr	r3, [r7, #32]
 80049d0:	f023 0301 	bic.w	r3, r3, #1
 80049d4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	3314      	adds	r3, #20
 80049de:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80049e2:	633a      	str	r2, [r7, #48]	@ 0x30
 80049e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049e6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049ea:	e841 2300 	strex	r3, r2, [r1]
 80049ee:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d1e3      	bne.n	80049be <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2220      	movs	r2, #32
 80049fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	330c      	adds	r3, #12
 8004a0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a0c:	693b      	ldr	r3, [r7, #16]
 8004a0e:	e853 3f00 	ldrex	r3, [r3]
 8004a12:	60fb      	str	r3, [r7, #12]
   return(result);
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f023 0310 	bic.w	r3, r3, #16
 8004a1a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	330c      	adds	r3, #12
 8004a24:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004a28:	61fa      	str	r2, [r7, #28]
 8004a2a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a2c:	69b9      	ldr	r1, [r7, #24]
 8004a2e:	69fa      	ldr	r2, [r7, #28]
 8004a30:	e841 2300 	strex	r3, r2, [r1]
 8004a34:	617b      	str	r3, [r7, #20]
   return(result);
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d1e3      	bne.n	8004a04 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	2202      	movs	r2, #2
 8004a40:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004a42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004a46:	4619      	mov	r1, r3
 8004a48:	6878      	ldr	r0, [r7, #4]
 8004a4a:	f000 f83d 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004a4e:	e023      	b.n	8004a98 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d009      	beq.n	8004a70 <HAL_UART_IRQHandler+0x524>
 8004a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a60:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d003      	beq.n	8004a70 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f940 	bl	8004cee <UART_Transmit_IT>
    return;
 8004a6e:	e014      	b.n	8004a9a <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004a70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a74:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d00e      	beq.n	8004a9a <HAL_UART_IRQHandler+0x54e>
 8004a7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a80:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d008      	beq.n	8004a9a <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004a88:	6878      	ldr	r0, [r7, #4]
 8004a8a:	f000 f980 	bl	8004d8e <UART_EndTransmit_IT>
    return;
 8004a8e:	e004      	b.n	8004a9a <HAL_UART_IRQHandler+0x54e>
    return;
 8004a90:	bf00      	nop
 8004a92:	e002      	b.n	8004a9a <HAL_UART_IRQHandler+0x54e>
      return;
 8004a94:	bf00      	nop
 8004a96:	e000      	b.n	8004a9a <HAL_UART_IRQHandler+0x54e>
      return;
 8004a98:	bf00      	nop
  }
}
 8004a9a:	37e8      	adds	r7, #232	@ 0xe8
 8004a9c:	46bd      	mov	sp, r7
 8004a9e:	bd80      	pop	{r7, pc}

08004aa0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ac8:	b480      	push	{r7}
 8004aca:	b083      	sub	sp, #12
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
 8004ad0:	460b      	mov	r3, r1
 8004ad2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004ad4:	bf00      	nop
 8004ad6:	370c      	adds	r7, #12
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr

08004ae0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b086      	sub	sp, #24
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	60b9      	str	r1, [r7, #8]
 8004aea:	603b      	str	r3, [r7, #0]
 8004aec:	4613      	mov	r3, r2
 8004aee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004af0:	e03b      	b.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004af2:	6a3b      	ldr	r3, [r7, #32]
 8004af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004af8:	d037      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004afa:	f7fd fd17 	bl	800252c <HAL_GetTick>
 8004afe:	4602      	mov	r2, r0
 8004b00:	683b      	ldr	r3, [r7, #0]
 8004b02:	1ad3      	subs	r3, r2, r3
 8004b04:	6a3a      	ldr	r2, [r7, #32]
 8004b06:	429a      	cmp	r2, r3
 8004b08:	d302      	bcc.n	8004b10 <UART_WaitOnFlagUntilTimeout+0x30>
 8004b0a:	6a3b      	ldr	r3, [r7, #32]
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004b10:	2303      	movs	r3, #3
 8004b12:	e03a      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	68db      	ldr	r3, [r3, #12]
 8004b1a:	f003 0304 	and.w	r3, r3, #4
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d023      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	2b80      	cmp	r3, #128	@ 0x80
 8004b26:	d020      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x8a>
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	2b40      	cmp	r3, #64	@ 0x40
 8004b2c:	d01d      	beq.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0308 	and.w	r3, r3, #8
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d116      	bne.n	8004b6a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	617b      	str	r3, [r7, #20]
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	617b      	str	r3, [r7, #20]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	685b      	ldr	r3, [r3, #4]
 8004b4e:	617b      	str	r3, [r7, #20]
 8004b50:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b52:	68f8      	ldr	r0, [r7, #12]
 8004b54:	f000 f857 	bl	8004c06 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	2208      	movs	r2, #8
 8004b5c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	2200      	movs	r2, #0
 8004b62:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b66:	2301      	movs	r3, #1
 8004b68:	e00f      	b.n	8004b8a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681a      	ldr	r2, [r3, #0]
 8004b70:	68bb      	ldr	r3, [r7, #8]
 8004b72:	4013      	ands	r3, r2
 8004b74:	68ba      	ldr	r2, [r7, #8]
 8004b76:	429a      	cmp	r2, r3
 8004b78:	bf0c      	ite	eq
 8004b7a:	2301      	moveq	r3, #1
 8004b7c:	2300      	movne	r3, #0
 8004b7e:	b2db      	uxtb	r3, r3
 8004b80:	461a      	mov	r2, r3
 8004b82:	79fb      	ldrb	r3, [r7, #7]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d0b4      	beq.n	8004af2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3718      	adds	r7, #24
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}

08004b92 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b92:	b480      	push	{r7}
 8004b94:	b085      	sub	sp, #20
 8004b96:	af00      	add	r7, sp, #0
 8004b98:	60f8      	str	r0, [r7, #12]
 8004b9a:	60b9      	str	r1, [r7, #8]
 8004b9c:	4613      	mov	r3, r2
 8004b9e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	68ba      	ldr	r2, [r7, #8]
 8004ba4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	88fa      	ldrh	r2, [r7, #6]
 8004baa:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	88fa      	ldrh	r2, [r7, #6]
 8004bb0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2200      	movs	r2, #0
 8004bb6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	2222      	movs	r2, #34	@ 0x22
 8004bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	691b      	ldr	r3, [r3, #16]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d007      	beq.n	8004bd8 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68da      	ldr	r2, [r3, #12]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004bd6:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	695a      	ldr	r2, [r3, #20]
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	f042 0201 	orr.w	r2, r2, #1
 8004be6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	68da      	ldr	r2, [r3, #12]
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	f042 0220 	orr.w	r2, r2, #32
 8004bf6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004bf8:	2300      	movs	r3, #0
}
 8004bfa:	4618      	mov	r0, r3
 8004bfc:	3714      	adds	r7, #20
 8004bfe:	46bd      	mov	sp, r7
 8004c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c04:	4770      	bx	lr

08004c06 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c06:	b480      	push	{r7}
 8004c08:	b095      	sub	sp, #84	@ 0x54
 8004c0a:	af00      	add	r7, sp, #0
 8004c0c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	330c      	adds	r3, #12
 8004c14:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004c1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	330c      	adds	r3, #12
 8004c2c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004c2e:	643a      	str	r2, [r7, #64]	@ 0x40
 8004c30:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004c34:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004c3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e5      	bne.n	8004c0e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3314      	adds	r3, #20
 8004c48:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	6a3b      	ldr	r3, [r7, #32]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	61fb      	str	r3, [r7, #28]
   return(result);
 8004c52:	69fb      	ldr	r3, [r7, #28]
 8004c54:	f023 0301 	bic.w	r3, r3, #1
 8004c58:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	3314      	adds	r3, #20
 8004c60:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004c62:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004c64:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c68:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e5      	bne.n	8004c42 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d119      	bne.n	8004cb2 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	330c      	adds	r3, #12
 8004c84:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	e853 3f00 	ldrex	r3, [r3]
 8004c8c:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	f023 0310 	bic.w	r3, r3, #16
 8004c94:	647b      	str	r3, [r7, #68]	@ 0x44
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	330c      	adds	r3, #12
 8004c9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c9e:	61ba      	str	r2, [r7, #24]
 8004ca0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ca2:	6979      	ldr	r1, [r7, #20]
 8004ca4:	69ba      	ldr	r2, [r7, #24]
 8004ca6:	e841 2300 	strex	r3, r2, [r1]
 8004caa:	613b      	str	r3, [r7, #16]
   return(result);
 8004cac:	693b      	ldr	r3, [r7, #16]
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1e5      	bne.n	8004c7e <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	2220      	movs	r2, #32
 8004cb6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004cc0:	bf00      	nop
 8004cc2:	3754      	adds	r7, #84	@ 0x54
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cca:	4770      	bx	lr

08004ccc <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b084      	sub	sp, #16
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004cd8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f7ff fee7 	bl	8004ab4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ce6:	bf00      	nop
 8004ce8:	3710      	adds	r7, #16
 8004cea:	46bd      	mov	sp, r7
 8004cec:	bd80      	pop	{r7, pc}

08004cee <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004cee:	b480      	push	{r7}
 8004cf0:	b085      	sub	sp, #20
 8004cf2:	af00      	add	r7, sp, #0
 8004cf4:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004cfc:	b2db      	uxtb	r3, r3
 8004cfe:	2b21      	cmp	r3, #33	@ 0x21
 8004d00:	d13e      	bne.n	8004d80 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	689b      	ldr	r3, [r3, #8]
 8004d06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004d0a:	d114      	bne.n	8004d36 <UART_Transmit_IT+0x48>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d110      	bne.n	8004d36 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	6a1b      	ldr	r3, [r3, #32]
 8004d18:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d28:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	1c9a      	adds	r2, r3, #2
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	621a      	str	r2, [r3, #32]
 8004d34:	e008      	b.n	8004d48 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	6a1b      	ldr	r3, [r3, #32]
 8004d3a:	1c59      	adds	r1, r3, #1
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6211      	str	r1, [r2, #32]
 8004d40:	781a      	ldrb	r2, [r3, #0]
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	3b01      	subs	r3, #1
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	687a      	ldr	r2, [r7, #4]
 8004d54:	4619      	mov	r1, r3
 8004d56:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10f      	bne.n	8004d7c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	68da      	ldr	r2, [r3, #12]
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004d6a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	68da      	ldr	r2, [r3, #12]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004d7a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
 8004d7e:	e000      	b.n	8004d82 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004d80:	2302      	movs	r3, #2
  }
}
 8004d82:	4618      	mov	r0, r3
 8004d84:	3714      	adds	r7, #20
 8004d86:	46bd      	mov	sp, r7
 8004d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8c:	4770      	bx	lr

08004d8e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d8e:	b580      	push	{r7, lr}
 8004d90:	b082      	sub	sp, #8
 8004d92:	af00      	add	r7, sp, #0
 8004d94:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	68da      	ldr	r2, [r3, #12]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004da4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	2220      	movs	r2, #32
 8004daa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff fe76 	bl	8004aa0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004db4:	2300      	movs	r3, #0
}
 8004db6:	4618      	mov	r0, r3
 8004db8:	3708      	adds	r7, #8
 8004dba:	46bd      	mov	sp, r7
 8004dbc:	bd80      	pop	{r7, pc}

08004dbe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004dbe:	b580      	push	{r7, lr}
 8004dc0:	b08c      	sub	sp, #48	@ 0x30
 8004dc2:	af00      	add	r7, sp, #0
 8004dc4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004dca:	2300      	movs	r3, #0
 8004dcc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004dd4:	b2db      	uxtb	r3, r3
 8004dd6:	2b22      	cmp	r3, #34	@ 0x22
 8004dd8:	f040 80aa 	bne.w	8004f30 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004de4:	d115      	bne.n	8004e12 <UART_Receive_IT+0x54>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d111      	bne.n	8004e12 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004df2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	685b      	ldr	r3, [r3, #4]
 8004dfa:	b29b      	uxth	r3, r3
 8004dfc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e00:	b29a      	uxth	r2, r3
 8004e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e04:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e0a:	1c9a      	adds	r2, r3, #2
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	629a      	str	r2, [r3, #40]	@ 0x28
 8004e10:	e024      	b.n	8004e5c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e16:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	689b      	ldr	r3, [r3, #8]
 8004e1c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004e20:	d007      	beq.n	8004e32 <UART_Receive_IT+0x74>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	689b      	ldr	r3, [r3, #8]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d10a      	bne.n	8004e40 <UART_Receive_IT+0x82>
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	691b      	ldr	r3, [r3, #16]
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d106      	bne.n	8004e40 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	b2da      	uxtb	r2, r3
 8004e3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e3c:	701a      	strb	r2, [r3, #0]
 8004e3e:	e008      	b.n	8004e52 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004e4c:	b2da      	uxtb	r2, r3
 8004e4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004e50:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e56:	1c5a      	adds	r2, r3, #1
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	3b01      	subs	r3, #1
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	687a      	ldr	r2, [r7, #4]
 8004e68:	4619      	mov	r1, r3
 8004e6a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d15d      	bne.n	8004f2c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	68da      	ldr	r2, [r3, #12]
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f022 0220 	bic.w	r2, r2, #32
 8004e7e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	68da      	ldr	r2, [r3, #12]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004e8e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	695a      	ldr	r2, [r3, #20]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f022 0201 	bic.w	r2, r2, #1
 8004e9e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	2220      	movs	r2, #32
 8004ea4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2200      	movs	r2, #0
 8004eac:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d135      	bne.n	8004f22 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	697b      	ldr	r3, [r7, #20]
 8004ec6:	e853 3f00 	ldrex	r3, [r3]
 8004eca:	613b      	str	r3, [r7, #16]
   return(result);
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f023 0310 	bic.w	r3, r3, #16
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	330c      	adds	r3, #12
 8004eda:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004edc:	623a      	str	r2, [r7, #32]
 8004ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ee0:	69f9      	ldr	r1, [r7, #28]
 8004ee2:	6a3a      	ldr	r2, [r7, #32]
 8004ee4:	e841 2300 	strex	r3, r2, [r1]
 8004ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004eea:	69bb      	ldr	r3, [r7, #24]
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d1e5      	bne.n	8004ebc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0310 	and.w	r3, r3, #16
 8004efa:	2b10      	cmp	r3, #16
 8004efc:	d10a      	bne.n	8004f14 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004efe:	2300      	movs	r3, #0
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	685b      	ldr	r3, [r3, #4]
 8004f10:	60fb      	str	r3, [r7, #12]
 8004f12:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004f18:	4619      	mov	r1, r3
 8004f1a:	6878      	ldr	r0, [r7, #4]
 8004f1c:	f7ff fdd4 	bl	8004ac8 <HAL_UARTEx_RxEventCallback>
 8004f20:	e002      	b.n	8004f28 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004f22:	6878      	ldr	r0, [r7, #4]
 8004f24:	f7fc fa0a 	bl	800133c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004f28:	2300      	movs	r3, #0
 8004f2a:	e002      	b.n	8004f32 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	e000      	b.n	8004f32 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004f30:	2302      	movs	r3, #2
  }
}
 8004f32:	4618      	mov	r0, r3
 8004f34:	3730      	adds	r7, #48	@ 0x30
 8004f36:	46bd      	mov	sp, r7
 8004f38:	bd80      	pop	{r7, pc}
	...

08004f3c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f40:	b0c0      	sub	sp, #256	@ 0x100
 8004f42:	af00      	add	r7, sp, #0
 8004f44:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	691b      	ldr	r3, [r3, #16]
 8004f50:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004f54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f58:	68d9      	ldr	r1, [r3, #12]
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	ea40 0301 	orr.w	r3, r0, r1
 8004f64:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f70:	691b      	ldr	r3, [r3, #16]
 8004f72:	431a      	orrs	r2, r3
 8004f74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	431a      	orrs	r2, r3
 8004f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f80:	69db      	ldr	r3, [r3, #28]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	68db      	ldr	r3, [r3, #12]
 8004f90:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004f94:	f021 010c 	bic.w	r1, r1, #12
 8004f98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004fa2:	430b      	orrs	r3, r1
 8004fa4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	695b      	ldr	r3, [r3, #20]
 8004fae:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004fb2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb6:	6999      	ldr	r1, [r3, #24]
 8004fb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fbc:	681a      	ldr	r2, [r3, #0]
 8004fbe:	ea40 0301 	orr.w	r3, r0, r1
 8004fc2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004fc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	4b8f      	ldr	r3, [pc, #572]	@ (8005208 <UART_SetConfig+0x2cc>)
 8004fcc:	429a      	cmp	r2, r3
 8004fce:	d005      	beq.n	8004fdc <UART_SetConfig+0xa0>
 8004fd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b8d      	ldr	r3, [pc, #564]	@ (800520c <UART_SetConfig+0x2d0>)
 8004fd8:	429a      	cmp	r2, r3
 8004fda:	d104      	bne.n	8004fe6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004fdc:	f7fe fa78 	bl	80034d0 <HAL_RCC_GetPCLK2Freq>
 8004fe0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004fe4:	e003      	b.n	8004fee <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004fe6:	f7fe fa5f 	bl	80034a8 <HAL_RCC_GetPCLK1Freq>
 8004fea:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ff2:	69db      	ldr	r3, [r3, #28]
 8004ff4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ff8:	f040 810c 	bne.w	8005214 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005006:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800500a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800500e:	4622      	mov	r2, r4
 8005010:	462b      	mov	r3, r5
 8005012:	1891      	adds	r1, r2, r2
 8005014:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005016:	415b      	adcs	r3, r3
 8005018:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800501a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800501e:	4621      	mov	r1, r4
 8005020:	eb12 0801 	adds.w	r8, r2, r1
 8005024:	4629      	mov	r1, r5
 8005026:	eb43 0901 	adc.w	r9, r3, r1
 800502a:	f04f 0200 	mov.w	r2, #0
 800502e:	f04f 0300 	mov.w	r3, #0
 8005032:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005036:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800503a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800503e:	4690      	mov	r8, r2
 8005040:	4699      	mov	r9, r3
 8005042:	4623      	mov	r3, r4
 8005044:	eb18 0303 	adds.w	r3, r8, r3
 8005048:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800504c:	462b      	mov	r3, r5
 800504e:	eb49 0303 	adc.w	r3, r9, r3
 8005052:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005056:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005062:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005066:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800506a:	460b      	mov	r3, r1
 800506c:	18db      	adds	r3, r3, r3
 800506e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005070:	4613      	mov	r3, r2
 8005072:	eb42 0303 	adc.w	r3, r2, r3
 8005076:	657b      	str	r3, [r7, #84]	@ 0x54
 8005078:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800507c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005080:	f7fb fe0a 	bl	8000c98 <__aeabi_uldivmod>
 8005084:	4602      	mov	r2, r0
 8005086:	460b      	mov	r3, r1
 8005088:	4b61      	ldr	r3, [pc, #388]	@ (8005210 <UART_SetConfig+0x2d4>)
 800508a:	fba3 2302 	umull	r2, r3, r3, r2
 800508e:	095b      	lsrs	r3, r3, #5
 8005090:	011c      	lsls	r4, r3, #4
 8005092:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005096:	2200      	movs	r2, #0
 8005098:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800509c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80050a0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80050a4:	4642      	mov	r2, r8
 80050a6:	464b      	mov	r3, r9
 80050a8:	1891      	adds	r1, r2, r2
 80050aa:	64b9      	str	r1, [r7, #72]	@ 0x48
 80050ac:	415b      	adcs	r3, r3
 80050ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80050b4:	4641      	mov	r1, r8
 80050b6:	eb12 0a01 	adds.w	sl, r2, r1
 80050ba:	4649      	mov	r1, r9
 80050bc:	eb43 0b01 	adc.w	fp, r3, r1
 80050c0:	f04f 0200 	mov.w	r2, #0
 80050c4:	f04f 0300 	mov.w	r3, #0
 80050c8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80050cc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80050d0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80050d4:	4692      	mov	sl, r2
 80050d6:	469b      	mov	fp, r3
 80050d8:	4643      	mov	r3, r8
 80050da:	eb1a 0303 	adds.w	r3, sl, r3
 80050de:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80050e2:	464b      	mov	r3, r9
 80050e4:	eb4b 0303 	adc.w	r3, fp, r3
 80050e8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80050ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80050f8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80050fc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005100:	460b      	mov	r3, r1
 8005102:	18db      	adds	r3, r3, r3
 8005104:	643b      	str	r3, [r7, #64]	@ 0x40
 8005106:	4613      	mov	r3, r2
 8005108:	eb42 0303 	adc.w	r3, r2, r3
 800510c:	647b      	str	r3, [r7, #68]	@ 0x44
 800510e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005112:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005116:	f7fb fdbf 	bl	8000c98 <__aeabi_uldivmod>
 800511a:	4602      	mov	r2, r0
 800511c:	460b      	mov	r3, r1
 800511e:	4611      	mov	r1, r2
 8005120:	4b3b      	ldr	r3, [pc, #236]	@ (8005210 <UART_SetConfig+0x2d4>)
 8005122:	fba3 2301 	umull	r2, r3, r3, r1
 8005126:	095b      	lsrs	r3, r3, #5
 8005128:	2264      	movs	r2, #100	@ 0x64
 800512a:	fb02 f303 	mul.w	r3, r2, r3
 800512e:	1acb      	subs	r3, r1, r3
 8005130:	00db      	lsls	r3, r3, #3
 8005132:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005136:	4b36      	ldr	r3, [pc, #216]	@ (8005210 <UART_SetConfig+0x2d4>)
 8005138:	fba3 2302 	umull	r2, r3, r3, r2
 800513c:	095b      	lsrs	r3, r3, #5
 800513e:	005b      	lsls	r3, r3, #1
 8005140:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005150:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005154:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005158:	4642      	mov	r2, r8
 800515a:	464b      	mov	r3, r9
 800515c:	1891      	adds	r1, r2, r2
 800515e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005160:	415b      	adcs	r3, r3
 8005162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005164:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005168:	4641      	mov	r1, r8
 800516a:	1851      	adds	r1, r2, r1
 800516c:	6339      	str	r1, [r7, #48]	@ 0x30
 800516e:	4649      	mov	r1, r9
 8005170:	414b      	adcs	r3, r1
 8005172:	637b      	str	r3, [r7, #52]	@ 0x34
 8005174:	f04f 0200 	mov.w	r2, #0
 8005178:	f04f 0300 	mov.w	r3, #0
 800517c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005180:	4659      	mov	r1, fp
 8005182:	00cb      	lsls	r3, r1, #3
 8005184:	4651      	mov	r1, sl
 8005186:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800518a:	4651      	mov	r1, sl
 800518c:	00ca      	lsls	r2, r1, #3
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	4603      	mov	r3, r0
 8005194:	4642      	mov	r2, r8
 8005196:	189b      	adds	r3, r3, r2
 8005198:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800519c:	464b      	mov	r3, r9
 800519e:	460a      	mov	r2, r1
 80051a0:	eb42 0303 	adc.w	r3, r2, r3
 80051a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051ac:	685b      	ldr	r3, [r3, #4]
 80051ae:	2200      	movs	r2, #0
 80051b0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80051b4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80051b8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80051bc:	460b      	mov	r3, r1
 80051be:	18db      	adds	r3, r3, r3
 80051c0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80051c2:	4613      	mov	r3, r2
 80051c4:	eb42 0303 	adc.w	r3, r2, r3
 80051c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80051ca:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80051ce:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80051d2:	f7fb fd61 	bl	8000c98 <__aeabi_uldivmod>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4b0d      	ldr	r3, [pc, #52]	@ (8005210 <UART_SetConfig+0x2d4>)
 80051dc:	fba3 1302 	umull	r1, r3, r3, r2
 80051e0:	095b      	lsrs	r3, r3, #5
 80051e2:	2164      	movs	r1, #100	@ 0x64
 80051e4:	fb01 f303 	mul.w	r3, r1, r3
 80051e8:	1ad3      	subs	r3, r2, r3
 80051ea:	00db      	lsls	r3, r3, #3
 80051ec:	3332      	adds	r3, #50	@ 0x32
 80051ee:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <UART_SetConfig+0x2d4>)
 80051f0:	fba2 2303 	umull	r2, r3, r2, r3
 80051f4:	095b      	lsrs	r3, r3, #5
 80051f6:	f003 0207 	and.w	r2, r3, #7
 80051fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	4422      	add	r2, r4
 8005202:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005204:	e106      	b.n	8005414 <UART_SetConfig+0x4d8>
 8005206:	bf00      	nop
 8005208:	40011000 	.word	0x40011000
 800520c:	40011400 	.word	0x40011400
 8005210:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005214:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005218:	2200      	movs	r2, #0
 800521a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800521e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005222:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005226:	4642      	mov	r2, r8
 8005228:	464b      	mov	r3, r9
 800522a:	1891      	adds	r1, r2, r2
 800522c:	6239      	str	r1, [r7, #32]
 800522e:	415b      	adcs	r3, r3
 8005230:	627b      	str	r3, [r7, #36]	@ 0x24
 8005232:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005236:	4641      	mov	r1, r8
 8005238:	1854      	adds	r4, r2, r1
 800523a:	4649      	mov	r1, r9
 800523c:	eb43 0501 	adc.w	r5, r3, r1
 8005240:	f04f 0200 	mov.w	r2, #0
 8005244:	f04f 0300 	mov.w	r3, #0
 8005248:	00eb      	lsls	r3, r5, #3
 800524a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800524e:	00e2      	lsls	r2, r4, #3
 8005250:	4614      	mov	r4, r2
 8005252:	461d      	mov	r5, r3
 8005254:	4643      	mov	r3, r8
 8005256:	18e3      	adds	r3, r4, r3
 8005258:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800525c:	464b      	mov	r3, r9
 800525e:	eb45 0303 	adc.w	r3, r5, r3
 8005262:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800526a:	685b      	ldr	r3, [r3, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005272:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005276:	f04f 0200 	mov.w	r2, #0
 800527a:	f04f 0300 	mov.w	r3, #0
 800527e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005282:	4629      	mov	r1, r5
 8005284:	008b      	lsls	r3, r1, #2
 8005286:	4621      	mov	r1, r4
 8005288:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800528c:	4621      	mov	r1, r4
 800528e:	008a      	lsls	r2, r1, #2
 8005290:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005294:	f7fb fd00 	bl	8000c98 <__aeabi_uldivmod>
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	4b60      	ldr	r3, [pc, #384]	@ (8005420 <UART_SetConfig+0x4e4>)
 800529e:	fba3 2302 	umull	r2, r3, r3, r2
 80052a2:	095b      	lsrs	r3, r3, #5
 80052a4:	011c      	lsls	r4, r3, #4
 80052a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052aa:	2200      	movs	r2, #0
 80052ac:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80052b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80052b4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80052b8:	4642      	mov	r2, r8
 80052ba:	464b      	mov	r3, r9
 80052bc:	1891      	adds	r1, r2, r2
 80052be:	61b9      	str	r1, [r7, #24]
 80052c0:	415b      	adcs	r3, r3
 80052c2:	61fb      	str	r3, [r7, #28]
 80052c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80052c8:	4641      	mov	r1, r8
 80052ca:	1851      	adds	r1, r2, r1
 80052cc:	6139      	str	r1, [r7, #16]
 80052ce:	4649      	mov	r1, r9
 80052d0:	414b      	adcs	r3, r1
 80052d2:	617b      	str	r3, [r7, #20]
 80052d4:	f04f 0200 	mov.w	r2, #0
 80052d8:	f04f 0300 	mov.w	r3, #0
 80052dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052e0:	4659      	mov	r1, fp
 80052e2:	00cb      	lsls	r3, r1, #3
 80052e4:	4651      	mov	r1, sl
 80052e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80052ea:	4651      	mov	r1, sl
 80052ec:	00ca      	lsls	r2, r1, #3
 80052ee:	4610      	mov	r0, r2
 80052f0:	4619      	mov	r1, r3
 80052f2:	4603      	mov	r3, r0
 80052f4:	4642      	mov	r2, r8
 80052f6:	189b      	adds	r3, r3, r2
 80052f8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80052fc:	464b      	mov	r3, r9
 80052fe:	460a      	mov	r2, r1
 8005300:	eb42 0303 	adc.w	r3, r2, r3
 8005304:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005308:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800530c:	685b      	ldr	r3, [r3, #4]
 800530e:	2200      	movs	r2, #0
 8005310:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005312:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005314:	f04f 0200 	mov.w	r2, #0
 8005318:	f04f 0300 	mov.w	r3, #0
 800531c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005320:	4649      	mov	r1, r9
 8005322:	008b      	lsls	r3, r1, #2
 8005324:	4641      	mov	r1, r8
 8005326:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800532a:	4641      	mov	r1, r8
 800532c:	008a      	lsls	r2, r1, #2
 800532e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005332:	f7fb fcb1 	bl	8000c98 <__aeabi_uldivmod>
 8005336:	4602      	mov	r2, r0
 8005338:	460b      	mov	r3, r1
 800533a:	4611      	mov	r1, r2
 800533c:	4b38      	ldr	r3, [pc, #224]	@ (8005420 <UART_SetConfig+0x4e4>)
 800533e:	fba3 2301 	umull	r2, r3, r3, r1
 8005342:	095b      	lsrs	r3, r3, #5
 8005344:	2264      	movs	r2, #100	@ 0x64
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	1acb      	subs	r3, r1, r3
 800534c:	011b      	lsls	r3, r3, #4
 800534e:	3332      	adds	r3, #50	@ 0x32
 8005350:	4a33      	ldr	r2, [pc, #204]	@ (8005420 <UART_SetConfig+0x4e4>)
 8005352:	fba2 2303 	umull	r2, r3, r2, r3
 8005356:	095b      	lsrs	r3, r3, #5
 8005358:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800535c:	441c      	add	r4, r3
 800535e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005362:	2200      	movs	r2, #0
 8005364:	673b      	str	r3, [r7, #112]	@ 0x70
 8005366:	677a      	str	r2, [r7, #116]	@ 0x74
 8005368:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800536c:	4642      	mov	r2, r8
 800536e:	464b      	mov	r3, r9
 8005370:	1891      	adds	r1, r2, r2
 8005372:	60b9      	str	r1, [r7, #8]
 8005374:	415b      	adcs	r3, r3
 8005376:	60fb      	str	r3, [r7, #12]
 8005378:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800537c:	4641      	mov	r1, r8
 800537e:	1851      	adds	r1, r2, r1
 8005380:	6039      	str	r1, [r7, #0]
 8005382:	4649      	mov	r1, r9
 8005384:	414b      	adcs	r3, r1
 8005386:	607b      	str	r3, [r7, #4]
 8005388:	f04f 0200 	mov.w	r2, #0
 800538c:	f04f 0300 	mov.w	r3, #0
 8005390:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005394:	4659      	mov	r1, fp
 8005396:	00cb      	lsls	r3, r1, #3
 8005398:	4651      	mov	r1, sl
 800539a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800539e:	4651      	mov	r1, sl
 80053a0:	00ca      	lsls	r2, r1, #3
 80053a2:	4610      	mov	r0, r2
 80053a4:	4619      	mov	r1, r3
 80053a6:	4603      	mov	r3, r0
 80053a8:	4642      	mov	r2, r8
 80053aa:	189b      	adds	r3, r3, r2
 80053ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80053ae:	464b      	mov	r3, r9
 80053b0:	460a      	mov	r2, r1
 80053b2:	eb42 0303 	adc.w	r3, r2, r3
 80053b6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80053b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	2200      	movs	r2, #0
 80053c0:	663b      	str	r3, [r7, #96]	@ 0x60
 80053c2:	667a      	str	r2, [r7, #100]	@ 0x64
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	f04f 0300 	mov.w	r3, #0
 80053cc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80053d0:	4649      	mov	r1, r9
 80053d2:	008b      	lsls	r3, r1, #2
 80053d4:	4641      	mov	r1, r8
 80053d6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80053da:	4641      	mov	r1, r8
 80053dc:	008a      	lsls	r2, r1, #2
 80053de:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80053e2:	f7fb fc59 	bl	8000c98 <__aeabi_uldivmod>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	4b0d      	ldr	r3, [pc, #52]	@ (8005420 <UART_SetConfig+0x4e4>)
 80053ec:	fba3 1302 	umull	r1, r3, r3, r2
 80053f0:	095b      	lsrs	r3, r3, #5
 80053f2:	2164      	movs	r1, #100	@ 0x64
 80053f4:	fb01 f303 	mul.w	r3, r1, r3
 80053f8:	1ad3      	subs	r3, r2, r3
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	3332      	adds	r3, #50	@ 0x32
 80053fe:	4a08      	ldr	r2, [pc, #32]	@ (8005420 <UART_SetConfig+0x4e4>)
 8005400:	fba2 2303 	umull	r2, r3, r2, r3
 8005404:	095b      	lsrs	r3, r3, #5
 8005406:	f003 020f 	and.w	r2, r3, #15
 800540a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	4422      	add	r2, r4
 8005412:	609a      	str	r2, [r3, #8]
}
 8005414:	bf00      	nop
 8005416:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800541a:	46bd      	mov	sp, r7
 800541c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005420:	51eb851f 	.word	0x51eb851f

08005424 <atof>:
 8005424:	2100      	movs	r1, #0
 8005426:	f000 be09 	b.w	800603c <strtod>

0800542a <sulp>:
 800542a:	b570      	push	{r4, r5, r6, lr}
 800542c:	4604      	mov	r4, r0
 800542e:	460d      	mov	r5, r1
 8005430:	ec45 4b10 	vmov	d0, r4, r5
 8005434:	4616      	mov	r6, r2
 8005436:	f003 fc5b 	bl	8008cf0 <__ulp>
 800543a:	ec51 0b10 	vmov	r0, r1, d0
 800543e:	b17e      	cbz	r6, 8005460 <sulp+0x36>
 8005440:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8005444:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005448:	2b00      	cmp	r3, #0
 800544a:	dd09      	ble.n	8005460 <sulp+0x36>
 800544c:	051b      	lsls	r3, r3, #20
 800544e:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005452:	2400      	movs	r4, #0
 8005454:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005458:	4622      	mov	r2, r4
 800545a:	462b      	mov	r3, r5
 800545c:	f7fb f8d4 	bl	8000608 <__aeabi_dmul>
 8005460:	ec41 0b10 	vmov	d0, r0, r1
 8005464:	bd70      	pop	{r4, r5, r6, pc}
	...

08005468 <_strtod_l>:
 8005468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800546c:	b09f      	sub	sp, #124	@ 0x7c
 800546e:	460c      	mov	r4, r1
 8005470:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005472:	2200      	movs	r2, #0
 8005474:	921a      	str	r2, [sp, #104]	@ 0x68
 8005476:	9005      	str	r0, [sp, #20]
 8005478:	f04f 0a00 	mov.w	sl, #0
 800547c:	f04f 0b00 	mov.w	fp, #0
 8005480:	460a      	mov	r2, r1
 8005482:	9219      	str	r2, [sp, #100]	@ 0x64
 8005484:	7811      	ldrb	r1, [r2, #0]
 8005486:	292b      	cmp	r1, #43	@ 0x2b
 8005488:	d04a      	beq.n	8005520 <_strtod_l+0xb8>
 800548a:	d838      	bhi.n	80054fe <_strtod_l+0x96>
 800548c:	290d      	cmp	r1, #13
 800548e:	d832      	bhi.n	80054f6 <_strtod_l+0x8e>
 8005490:	2908      	cmp	r1, #8
 8005492:	d832      	bhi.n	80054fa <_strtod_l+0x92>
 8005494:	2900      	cmp	r1, #0
 8005496:	d03b      	beq.n	8005510 <_strtod_l+0xa8>
 8005498:	2200      	movs	r2, #0
 800549a:	920e      	str	r2, [sp, #56]	@ 0x38
 800549c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 800549e:	782a      	ldrb	r2, [r5, #0]
 80054a0:	2a30      	cmp	r2, #48	@ 0x30
 80054a2:	f040 80b2 	bne.w	800560a <_strtod_l+0x1a2>
 80054a6:	786a      	ldrb	r2, [r5, #1]
 80054a8:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80054ac:	2a58      	cmp	r2, #88	@ 0x58
 80054ae:	d16e      	bne.n	800558e <_strtod_l+0x126>
 80054b0:	9302      	str	r3, [sp, #8]
 80054b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	ab1a      	add	r3, sp, #104	@ 0x68
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	4a8f      	ldr	r2, [pc, #572]	@ (80056f8 <_strtod_l+0x290>)
 80054bc:	9805      	ldr	r0, [sp, #20]
 80054be:	ab1b      	add	r3, sp, #108	@ 0x6c
 80054c0:	a919      	add	r1, sp, #100	@ 0x64
 80054c2:	f002 fd0f 	bl	8007ee4 <__gethex>
 80054c6:	f010 060f 	ands.w	r6, r0, #15
 80054ca:	4604      	mov	r4, r0
 80054cc:	d005      	beq.n	80054da <_strtod_l+0x72>
 80054ce:	2e06      	cmp	r6, #6
 80054d0:	d128      	bne.n	8005524 <_strtod_l+0xbc>
 80054d2:	3501      	adds	r5, #1
 80054d4:	2300      	movs	r3, #0
 80054d6:	9519      	str	r5, [sp, #100]	@ 0x64
 80054d8:	930e      	str	r3, [sp, #56]	@ 0x38
 80054da:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f040 858e 	bne.w	8005ffe <_strtod_l+0xb96>
 80054e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80054e4:	b1cb      	cbz	r3, 800551a <_strtod_l+0xb2>
 80054e6:	4652      	mov	r2, sl
 80054e8:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 80054ec:	ec43 2b10 	vmov	d0, r2, r3
 80054f0:	b01f      	add	sp, #124	@ 0x7c
 80054f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054f6:	2920      	cmp	r1, #32
 80054f8:	d1ce      	bne.n	8005498 <_strtod_l+0x30>
 80054fa:	3201      	adds	r2, #1
 80054fc:	e7c1      	b.n	8005482 <_strtod_l+0x1a>
 80054fe:	292d      	cmp	r1, #45	@ 0x2d
 8005500:	d1ca      	bne.n	8005498 <_strtod_l+0x30>
 8005502:	2101      	movs	r1, #1
 8005504:	910e      	str	r1, [sp, #56]	@ 0x38
 8005506:	1c51      	adds	r1, r2, #1
 8005508:	9119      	str	r1, [sp, #100]	@ 0x64
 800550a:	7852      	ldrb	r2, [r2, #1]
 800550c:	2a00      	cmp	r2, #0
 800550e:	d1c5      	bne.n	800549c <_strtod_l+0x34>
 8005510:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005512:	9419      	str	r4, [sp, #100]	@ 0x64
 8005514:	2b00      	cmp	r3, #0
 8005516:	f040 8570 	bne.w	8005ffa <_strtod_l+0xb92>
 800551a:	4652      	mov	r2, sl
 800551c:	465b      	mov	r3, fp
 800551e:	e7e5      	b.n	80054ec <_strtod_l+0x84>
 8005520:	2100      	movs	r1, #0
 8005522:	e7ef      	b.n	8005504 <_strtod_l+0x9c>
 8005524:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005526:	b13a      	cbz	r2, 8005538 <_strtod_l+0xd0>
 8005528:	2135      	movs	r1, #53	@ 0x35
 800552a:	a81c      	add	r0, sp, #112	@ 0x70
 800552c:	f003 fcda 	bl	8008ee4 <__copybits>
 8005530:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005532:	9805      	ldr	r0, [sp, #20]
 8005534:	f003 f8b0 	bl	8008698 <_Bfree>
 8005538:	3e01      	subs	r6, #1
 800553a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 800553c:	2e04      	cmp	r6, #4
 800553e:	d806      	bhi.n	800554e <_strtod_l+0xe6>
 8005540:	e8df f006 	tbb	[pc, r6]
 8005544:	201d0314 	.word	0x201d0314
 8005548:	14          	.byte	0x14
 8005549:	00          	.byte	0x00
 800554a:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 800554e:	05e1      	lsls	r1, r4, #23
 8005550:	bf48      	it	mi
 8005552:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005556:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800555a:	0d1b      	lsrs	r3, r3, #20
 800555c:	051b      	lsls	r3, r3, #20
 800555e:	2b00      	cmp	r3, #0
 8005560:	d1bb      	bne.n	80054da <_strtod_l+0x72>
 8005562:	f001 fd67 	bl	8007034 <__errno>
 8005566:	2322      	movs	r3, #34	@ 0x22
 8005568:	6003      	str	r3, [r0, #0]
 800556a:	e7b6      	b.n	80054da <_strtod_l+0x72>
 800556c:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005570:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005574:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005578:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800557c:	e7e7      	b.n	800554e <_strtod_l+0xe6>
 800557e:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8005700 <_strtod_l+0x298>
 8005582:	e7e4      	b.n	800554e <_strtod_l+0xe6>
 8005584:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005588:	f04f 3aff 	mov.w	sl, #4294967295
 800558c:	e7df      	b.n	800554e <_strtod_l+0xe6>
 800558e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005590:	1c5a      	adds	r2, r3, #1
 8005592:	9219      	str	r2, [sp, #100]	@ 0x64
 8005594:	785b      	ldrb	r3, [r3, #1]
 8005596:	2b30      	cmp	r3, #48	@ 0x30
 8005598:	d0f9      	beq.n	800558e <_strtod_l+0x126>
 800559a:	2b00      	cmp	r3, #0
 800559c:	d09d      	beq.n	80054da <_strtod_l+0x72>
 800559e:	2301      	movs	r3, #1
 80055a0:	2700      	movs	r7, #0
 80055a2:	9308      	str	r3, [sp, #32]
 80055a4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80055a6:	930c      	str	r3, [sp, #48]	@ 0x30
 80055a8:	970b      	str	r7, [sp, #44]	@ 0x2c
 80055aa:	46b9      	mov	r9, r7
 80055ac:	220a      	movs	r2, #10
 80055ae:	9819      	ldr	r0, [sp, #100]	@ 0x64
 80055b0:	7805      	ldrb	r5, [r0, #0]
 80055b2:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 80055b6:	b2d9      	uxtb	r1, r3
 80055b8:	2909      	cmp	r1, #9
 80055ba:	d928      	bls.n	800560e <_strtod_l+0x1a6>
 80055bc:	494f      	ldr	r1, [pc, #316]	@ (80056fc <_strtod_l+0x294>)
 80055be:	2201      	movs	r2, #1
 80055c0:	f001 fcdb 	bl	8006f7a <strncmp>
 80055c4:	2800      	cmp	r0, #0
 80055c6:	d032      	beq.n	800562e <_strtod_l+0x1c6>
 80055c8:	2000      	movs	r0, #0
 80055ca:	462a      	mov	r2, r5
 80055cc:	900a      	str	r0, [sp, #40]	@ 0x28
 80055ce:	464d      	mov	r5, r9
 80055d0:	4603      	mov	r3, r0
 80055d2:	2a65      	cmp	r2, #101	@ 0x65
 80055d4:	d001      	beq.n	80055da <_strtod_l+0x172>
 80055d6:	2a45      	cmp	r2, #69	@ 0x45
 80055d8:	d114      	bne.n	8005604 <_strtod_l+0x19c>
 80055da:	b91d      	cbnz	r5, 80055e4 <_strtod_l+0x17c>
 80055dc:	9a08      	ldr	r2, [sp, #32]
 80055de:	4302      	orrs	r2, r0
 80055e0:	d096      	beq.n	8005510 <_strtod_l+0xa8>
 80055e2:	2500      	movs	r5, #0
 80055e4:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 80055e6:	1c62      	adds	r2, r4, #1
 80055e8:	9219      	str	r2, [sp, #100]	@ 0x64
 80055ea:	7862      	ldrb	r2, [r4, #1]
 80055ec:	2a2b      	cmp	r2, #43	@ 0x2b
 80055ee:	d07a      	beq.n	80056e6 <_strtod_l+0x27e>
 80055f0:	2a2d      	cmp	r2, #45	@ 0x2d
 80055f2:	d07e      	beq.n	80056f2 <_strtod_l+0x28a>
 80055f4:	f04f 0c00 	mov.w	ip, #0
 80055f8:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 80055fc:	2909      	cmp	r1, #9
 80055fe:	f240 8085 	bls.w	800570c <_strtod_l+0x2a4>
 8005602:	9419      	str	r4, [sp, #100]	@ 0x64
 8005604:	f04f 0800 	mov.w	r8, #0
 8005608:	e0a5      	b.n	8005756 <_strtod_l+0x2ee>
 800560a:	2300      	movs	r3, #0
 800560c:	e7c8      	b.n	80055a0 <_strtod_l+0x138>
 800560e:	f1b9 0f08 	cmp.w	r9, #8
 8005612:	bfd8      	it	le
 8005614:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8005616:	f100 0001 	add.w	r0, r0, #1
 800561a:	bfda      	itte	le
 800561c:	fb02 3301 	mlale	r3, r2, r1, r3
 8005620:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8005622:	fb02 3707 	mlagt	r7, r2, r7, r3
 8005626:	f109 0901 	add.w	r9, r9, #1
 800562a:	9019      	str	r0, [sp, #100]	@ 0x64
 800562c:	e7bf      	b.n	80055ae <_strtod_l+0x146>
 800562e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005630:	1c5a      	adds	r2, r3, #1
 8005632:	9219      	str	r2, [sp, #100]	@ 0x64
 8005634:	785a      	ldrb	r2, [r3, #1]
 8005636:	f1b9 0f00 	cmp.w	r9, #0
 800563a:	d03b      	beq.n	80056b4 <_strtod_l+0x24c>
 800563c:	900a      	str	r0, [sp, #40]	@ 0x28
 800563e:	464d      	mov	r5, r9
 8005640:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005644:	2b09      	cmp	r3, #9
 8005646:	d912      	bls.n	800566e <_strtod_l+0x206>
 8005648:	2301      	movs	r3, #1
 800564a:	e7c2      	b.n	80055d2 <_strtod_l+0x16a>
 800564c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800564e:	1c5a      	adds	r2, r3, #1
 8005650:	9219      	str	r2, [sp, #100]	@ 0x64
 8005652:	785a      	ldrb	r2, [r3, #1]
 8005654:	3001      	adds	r0, #1
 8005656:	2a30      	cmp	r2, #48	@ 0x30
 8005658:	d0f8      	beq.n	800564c <_strtod_l+0x1e4>
 800565a:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 800565e:	2b08      	cmp	r3, #8
 8005660:	f200 84d2 	bhi.w	8006008 <_strtod_l+0xba0>
 8005664:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005666:	900a      	str	r0, [sp, #40]	@ 0x28
 8005668:	2000      	movs	r0, #0
 800566a:	930c      	str	r3, [sp, #48]	@ 0x30
 800566c:	4605      	mov	r5, r0
 800566e:	3a30      	subs	r2, #48	@ 0x30
 8005670:	f100 0301 	add.w	r3, r0, #1
 8005674:	d018      	beq.n	80056a8 <_strtod_l+0x240>
 8005676:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005678:	4419      	add	r1, r3
 800567a:	910a      	str	r1, [sp, #40]	@ 0x28
 800567c:	462e      	mov	r6, r5
 800567e:	f04f 0e0a 	mov.w	lr, #10
 8005682:	1c71      	adds	r1, r6, #1
 8005684:	eba1 0c05 	sub.w	ip, r1, r5
 8005688:	4563      	cmp	r3, ip
 800568a:	dc15      	bgt.n	80056b8 <_strtod_l+0x250>
 800568c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8005690:	182b      	adds	r3, r5, r0
 8005692:	2b08      	cmp	r3, #8
 8005694:	f105 0501 	add.w	r5, r5, #1
 8005698:	4405      	add	r5, r0
 800569a:	dc1a      	bgt.n	80056d2 <_strtod_l+0x26a>
 800569c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800569e:	230a      	movs	r3, #10
 80056a0:	fb03 2301 	mla	r3, r3, r1, r2
 80056a4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80056a6:	2300      	movs	r3, #0
 80056a8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 80056aa:	1c51      	adds	r1, r2, #1
 80056ac:	9119      	str	r1, [sp, #100]	@ 0x64
 80056ae:	7852      	ldrb	r2, [r2, #1]
 80056b0:	4618      	mov	r0, r3
 80056b2:	e7c5      	b.n	8005640 <_strtod_l+0x1d8>
 80056b4:	4648      	mov	r0, r9
 80056b6:	e7ce      	b.n	8005656 <_strtod_l+0x1ee>
 80056b8:	2e08      	cmp	r6, #8
 80056ba:	dc05      	bgt.n	80056c8 <_strtod_l+0x260>
 80056bc:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 80056be:	fb0e f606 	mul.w	r6, lr, r6
 80056c2:	960b      	str	r6, [sp, #44]	@ 0x2c
 80056c4:	460e      	mov	r6, r1
 80056c6:	e7dc      	b.n	8005682 <_strtod_l+0x21a>
 80056c8:	2910      	cmp	r1, #16
 80056ca:	bfd8      	it	le
 80056cc:	fb0e f707 	mulle.w	r7, lr, r7
 80056d0:	e7f8      	b.n	80056c4 <_strtod_l+0x25c>
 80056d2:	2b0f      	cmp	r3, #15
 80056d4:	bfdc      	itt	le
 80056d6:	230a      	movle	r3, #10
 80056d8:	fb03 2707 	mlale	r7, r3, r7, r2
 80056dc:	e7e3      	b.n	80056a6 <_strtod_l+0x23e>
 80056de:	2300      	movs	r3, #0
 80056e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80056e2:	2301      	movs	r3, #1
 80056e4:	e77a      	b.n	80055dc <_strtod_l+0x174>
 80056e6:	f04f 0c00 	mov.w	ip, #0
 80056ea:	1ca2      	adds	r2, r4, #2
 80056ec:	9219      	str	r2, [sp, #100]	@ 0x64
 80056ee:	78a2      	ldrb	r2, [r4, #2]
 80056f0:	e782      	b.n	80055f8 <_strtod_l+0x190>
 80056f2:	f04f 0c01 	mov.w	ip, #1
 80056f6:	e7f8      	b.n	80056ea <_strtod_l+0x282>
 80056f8:	08009d44 	.word	0x08009d44
 80056fc:	08009b58 	.word	0x08009b58
 8005700:	7ff00000 	.word	0x7ff00000
 8005704:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005706:	1c51      	adds	r1, r2, #1
 8005708:	9119      	str	r1, [sp, #100]	@ 0x64
 800570a:	7852      	ldrb	r2, [r2, #1]
 800570c:	2a30      	cmp	r2, #48	@ 0x30
 800570e:	d0f9      	beq.n	8005704 <_strtod_l+0x29c>
 8005710:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005714:	2908      	cmp	r1, #8
 8005716:	f63f af75 	bhi.w	8005604 <_strtod_l+0x19c>
 800571a:	3a30      	subs	r2, #48	@ 0x30
 800571c:	9209      	str	r2, [sp, #36]	@ 0x24
 800571e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005720:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005722:	f04f 080a 	mov.w	r8, #10
 8005726:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005728:	1c56      	adds	r6, r2, #1
 800572a:	9619      	str	r6, [sp, #100]	@ 0x64
 800572c:	7852      	ldrb	r2, [r2, #1]
 800572e:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005732:	f1be 0f09 	cmp.w	lr, #9
 8005736:	d939      	bls.n	80057ac <_strtod_l+0x344>
 8005738:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800573a:	1a76      	subs	r6, r6, r1
 800573c:	2e08      	cmp	r6, #8
 800573e:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005742:	dc03      	bgt.n	800574c <_strtod_l+0x2e4>
 8005744:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005746:	4588      	cmp	r8, r1
 8005748:	bfa8      	it	ge
 800574a:	4688      	movge	r8, r1
 800574c:	f1bc 0f00 	cmp.w	ip, #0
 8005750:	d001      	beq.n	8005756 <_strtod_l+0x2ee>
 8005752:	f1c8 0800 	rsb	r8, r8, #0
 8005756:	2d00      	cmp	r5, #0
 8005758:	d14e      	bne.n	80057f8 <_strtod_l+0x390>
 800575a:	9908      	ldr	r1, [sp, #32]
 800575c:	4308      	orrs	r0, r1
 800575e:	f47f aebc 	bne.w	80054da <_strtod_l+0x72>
 8005762:	2b00      	cmp	r3, #0
 8005764:	f47f aed4 	bne.w	8005510 <_strtod_l+0xa8>
 8005768:	2a69      	cmp	r2, #105	@ 0x69
 800576a:	d028      	beq.n	80057be <_strtod_l+0x356>
 800576c:	dc25      	bgt.n	80057ba <_strtod_l+0x352>
 800576e:	2a49      	cmp	r2, #73	@ 0x49
 8005770:	d025      	beq.n	80057be <_strtod_l+0x356>
 8005772:	2a4e      	cmp	r2, #78	@ 0x4e
 8005774:	f47f aecc 	bne.w	8005510 <_strtod_l+0xa8>
 8005778:	499a      	ldr	r1, [pc, #616]	@ (80059e4 <_strtod_l+0x57c>)
 800577a:	a819      	add	r0, sp, #100	@ 0x64
 800577c:	f002 fdd4 	bl	8008328 <__match>
 8005780:	2800      	cmp	r0, #0
 8005782:	f43f aec5 	beq.w	8005510 <_strtod_l+0xa8>
 8005786:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005788:	781b      	ldrb	r3, [r3, #0]
 800578a:	2b28      	cmp	r3, #40	@ 0x28
 800578c:	d12e      	bne.n	80057ec <_strtod_l+0x384>
 800578e:	4996      	ldr	r1, [pc, #600]	@ (80059e8 <_strtod_l+0x580>)
 8005790:	aa1c      	add	r2, sp, #112	@ 0x70
 8005792:	a819      	add	r0, sp, #100	@ 0x64
 8005794:	f002 fddc 	bl	8008350 <__hexnan>
 8005798:	2805      	cmp	r0, #5
 800579a:	d127      	bne.n	80057ec <_strtod_l+0x384>
 800579c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 800579e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 80057a2:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 80057a6:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 80057aa:	e696      	b.n	80054da <_strtod_l+0x72>
 80057ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80057ae:	fb08 2101 	mla	r1, r8, r1, r2
 80057b2:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 80057b6:	9209      	str	r2, [sp, #36]	@ 0x24
 80057b8:	e7b5      	b.n	8005726 <_strtod_l+0x2be>
 80057ba:	2a6e      	cmp	r2, #110	@ 0x6e
 80057bc:	e7da      	b.n	8005774 <_strtod_l+0x30c>
 80057be:	498b      	ldr	r1, [pc, #556]	@ (80059ec <_strtod_l+0x584>)
 80057c0:	a819      	add	r0, sp, #100	@ 0x64
 80057c2:	f002 fdb1 	bl	8008328 <__match>
 80057c6:	2800      	cmp	r0, #0
 80057c8:	f43f aea2 	beq.w	8005510 <_strtod_l+0xa8>
 80057cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057ce:	4988      	ldr	r1, [pc, #544]	@ (80059f0 <_strtod_l+0x588>)
 80057d0:	3b01      	subs	r3, #1
 80057d2:	a819      	add	r0, sp, #100	@ 0x64
 80057d4:	9319      	str	r3, [sp, #100]	@ 0x64
 80057d6:	f002 fda7 	bl	8008328 <__match>
 80057da:	b910      	cbnz	r0, 80057e2 <_strtod_l+0x37a>
 80057dc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80057de:	3301      	adds	r3, #1
 80057e0:	9319      	str	r3, [sp, #100]	@ 0x64
 80057e2:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8005a00 <_strtod_l+0x598>
 80057e6:	f04f 0a00 	mov.w	sl, #0
 80057ea:	e676      	b.n	80054da <_strtod_l+0x72>
 80057ec:	4881      	ldr	r0, [pc, #516]	@ (80059f4 <_strtod_l+0x58c>)
 80057ee:	f001 fc5f 	bl	80070b0 <nan>
 80057f2:	ec5b ab10 	vmov	sl, fp, d0
 80057f6:	e670      	b.n	80054da <_strtod_l+0x72>
 80057f8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80057fa:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80057fc:	eba8 0303 	sub.w	r3, r8, r3
 8005800:	f1b9 0f00 	cmp.w	r9, #0
 8005804:	bf08      	it	eq
 8005806:	46a9      	moveq	r9, r5
 8005808:	2d10      	cmp	r5, #16
 800580a:	9309      	str	r3, [sp, #36]	@ 0x24
 800580c:	462c      	mov	r4, r5
 800580e:	bfa8      	it	ge
 8005810:	2410      	movge	r4, #16
 8005812:	f7fa fe7f 	bl	8000514 <__aeabi_ui2d>
 8005816:	2d09      	cmp	r5, #9
 8005818:	4682      	mov	sl, r0
 800581a:	468b      	mov	fp, r1
 800581c:	dc13      	bgt.n	8005846 <_strtod_l+0x3de>
 800581e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005820:	2b00      	cmp	r3, #0
 8005822:	f43f ae5a 	beq.w	80054da <_strtod_l+0x72>
 8005826:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005828:	dd78      	ble.n	800591c <_strtod_l+0x4b4>
 800582a:	2b16      	cmp	r3, #22
 800582c:	dc5f      	bgt.n	80058ee <_strtod_l+0x486>
 800582e:	4972      	ldr	r1, [pc, #456]	@ (80059f8 <_strtod_l+0x590>)
 8005830:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005834:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005838:	4652      	mov	r2, sl
 800583a:	465b      	mov	r3, fp
 800583c:	f7fa fee4 	bl	8000608 <__aeabi_dmul>
 8005840:	4682      	mov	sl, r0
 8005842:	468b      	mov	fp, r1
 8005844:	e649      	b.n	80054da <_strtod_l+0x72>
 8005846:	4b6c      	ldr	r3, [pc, #432]	@ (80059f8 <_strtod_l+0x590>)
 8005848:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800584c:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005850:	f7fa feda 	bl	8000608 <__aeabi_dmul>
 8005854:	4682      	mov	sl, r0
 8005856:	4638      	mov	r0, r7
 8005858:	468b      	mov	fp, r1
 800585a:	f7fa fe5b 	bl	8000514 <__aeabi_ui2d>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4650      	mov	r0, sl
 8005864:	4659      	mov	r1, fp
 8005866:	f7fa fd19 	bl	800029c <__adddf3>
 800586a:	2d0f      	cmp	r5, #15
 800586c:	4682      	mov	sl, r0
 800586e:	468b      	mov	fp, r1
 8005870:	ddd5      	ble.n	800581e <_strtod_l+0x3b6>
 8005872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005874:	1b2c      	subs	r4, r5, r4
 8005876:	441c      	add	r4, r3
 8005878:	2c00      	cmp	r4, #0
 800587a:	f340 8093 	ble.w	80059a4 <_strtod_l+0x53c>
 800587e:	f014 030f 	ands.w	r3, r4, #15
 8005882:	d00a      	beq.n	800589a <_strtod_l+0x432>
 8005884:	495c      	ldr	r1, [pc, #368]	@ (80059f8 <_strtod_l+0x590>)
 8005886:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800588a:	4652      	mov	r2, sl
 800588c:	465b      	mov	r3, fp
 800588e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005892:	f7fa feb9 	bl	8000608 <__aeabi_dmul>
 8005896:	4682      	mov	sl, r0
 8005898:	468b      	mov	fp, r1
 800589a:	f034 040f 	bics.w	r4, r4, #15
 800589e:	d073      	beq.n	8005988 <_strtod_l+0x520>
 80058a0:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 80058a4:	dd49      	ble.n	800593a <_strtod_l+0x4d2>
 80058a6:	2400      	movs	r4, #0
 80058a8:	46a0      	mov	r8, r4
 80058aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80058ac:	46a1      	mov	r9, r4
 80058ae:	9a05      	ldr	r2, [sp, #20]
 80058b0:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8005a00 <_strtod_l+0x598>
 80058b4:	2322      	movs	r3, #34	@ 0x22
 80058b6:	6013      	str	r3, [r2, #0]
 80058b8:	f04f 0a00 	mov.w	sl, #0
 80058bc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80058be:	2b00      	cmp	r3, #0
 80058c0:	f43f ae0b 	beq.w	80054da <_strtod_l+0x72>
 80058c4:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80058c6:	9805      	ldr	r0, [sp, #20]
 80058c8:	f002 fee6 	bl	8008698 <_Bfree>
 80058cc:	9805      	ldr	r0, [sp, #20]
 80058ce:	4649      	mov	r1, r9
 80058d0:	f002 fee2 	bl	8008698 <_Bfree>
 80058d4:	9805      	ldr	r0, [sp, #20]
 80058d6:	4641      	mov	r1, r8
 80058d8:	f002 fede 	bl	8008698 <_Bfree>
 80058dc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80058de:	9805      	ldr	r0, [sp, #20]
 80058e0:	f002 feda 	bl	8008698 <_Bfree>
 80058e4:	9805      	ldr	r0, [sp, #20]
 80058e6:	4621      	mov	r1, r4
 80058e8:	f002 fed6 	bl	8008698 <_Bfree>
 80058ec:	e5f5      	b.n	80054da <_strtod_l+0x72>
 80058ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80058f0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 80058f4:	4293      	cmp	r3, r2
 80058f6:	dbbc      	blt.n	8005872 <_strtod_l+0x40a>
 80058f8:	4c3f      	ldr	r4, [pc, #252]	@ (80059f8 <_strtod_l+0x590>)
 80058fa:	f1c5 050f 	rsb	r5, r5, #15
 80058fe:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005902:	4652      	mov	r2, sl
 8005904:	465b      	mov	r3, fp
 8005906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800590a:	f7fa fe7d 	bl	8000608 <__aeabi_dmul>
 800590e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005910:	1b5d      	subs	r5, r3, r5
 8005912:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005916:	e9d4 2300 	ldrd	r2, r3, [r4]
 800591a:	e78f      	b.n	800583c <_strtod_l+0x3d4>
 800591c:	3316      	adds	r3, #22
 800591e:	dba8      	blt.n	8005872 <_strtod_l+0x40a>
 8005920:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005922:	eba3 0808 	sub.w	r8, r3, r8
 8005926:	4b34      	ldr	r3, [pc, #208]	@ (80059f8 <_strtod_l+0x590>)
 8005928:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 800592c:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005930:	4650      	mov	r0, sl
 8005932:	4659      	mov	r1, fp
 8005934:	f7fa ff92 	bl	800085c <__aeabi_ddiv>
 8005938:	e782      	b.n	8005840 <_strtod_l+0x3d8>
 800593a:	2300      	movs	r3, #0
 800593c:	4f2f      	ldr	r7, [pc, #188]	@ (80059fc <_strtod_l+0x594>)
 800593e:	1124      	asrs	r4, r4, #4
 8005940:	4650      	mov	r0, sl
 8005942:	4659      	mov	r1, fp
 8005944:	461e      	mov	r6, r3
 8005946:	2c01      	cmp	r4, #1
 8005948:	dc21      	bgt.n	800598e <_strtod_l+0x526>
 800594a:	b10b      	cbz	r3, 8005950 <_strtod_l+0x4e8>
 800594c:	4682      	mov	sl, r0
 800594e:	468b      	mov	fp, r1
 8005950:	492a      	ldr	r1, [pc, #168]	@ (80059fc <_strtod_l+0x594>)
 8005952:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005956:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 800595a:	4652      	mov	r2, sl
 800595c:	465b      	mov	r3, fp
 800595e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005962:	f7fa fe51 	bl	8000608 <__aeabi_dmul>
 8005966:	4b26      	ldr	r3, [pc, #152]	@ (8005a00 <_strtod_l+0x598>)
 8005968:	460a      	mov	r2, r1
 800596a:	400b      	ands	r3, r1
 800596c:	4925      	ldr	r1, [pc, #148]	@ (8005a04 <_strtod_l+0x59c>)
 800596e:	428b      	cmp	r3, r1
 8005970:	4682      	mov	sl, r0
 8005972:	d898      	bhi.n	80058a6 <_strtod_l+0x43e>
 8005974:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005978:	428b      	cmp	r3, r1
 800597a:	bf86      	itte	hi
 800597c:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8005a08 <_strtod_l+0x5a0>
 8005980:	f04f 3aff 	movhi.w	sl, #4294967295
 8005984:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005988:	2300      	movs	r3, #0
 800598a:	9308      	str	r3, [sp, #32]
 800598c:	e076      	b.n	8005a7c <_strtod_l+0x614>
 800598e:	07e2      	lsls	r2, r4, #31
 8005990:	d504      	bpl.n	800599c <_strtod_l+0x534>
 8005992:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005996:	f7fa fe37 	bl	8000608 <__aeabi_dmul>
 800599a:	2301      	movs	r3, #1
 800599c:	3601      	adds	r6, #1
 800599e:	1064      	asrs	r4, r4, #1
 80059a0:	3708      	adds	r7, #8
 80059a2:	e7d0      	b.n	8005946 <_strtod_l+0x4de>
 80059a4:	d0f0      	beq.n	8005988 <_strtod_l+0x520>
 80059a6:	4264      	negs	r4, r4
 80059a8:	f014 020f 	ands.w	r2, r4, #15
 80059ac:	d00a      	beq.n	80059c4 <_strtod_l+0x55c>
 80059ae:	4b12      	ldr	r3, [pc, #72]	@ (80059f8 <_strtod_l+0x590>)
 80059b0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80059b4:	4650      	mov	r0, sl
 80059b6:	4659      	mov	r1, fp
 80059b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059bc:	f7fa ff4e 	bl	800085c <__aeabi_ddiv>
 80059c0:	4682      	mov	sl, r0
 80059c2:	468b      	mov	fp, r1
 80059c4:	1124      	asrs	r4, r4, #4
 80059c6:	d0df      	beq.n	8005988 <_strtod_l+0x520>
 80059c8:	2c1f      	cmp	r4, #31
 80059ca:	dd1f      	ble.n	8005a0c <_strtod_l+0x5a4>
 80059cc:	2400      	movs	r4, #0
 80059ce:	46a0      	mov	r8, r4
 80059d0:	940b      	str	r4, [sp, #44]	@ 0x2c
 80059d2:	46a1      	mov	r9, r4
 80059d4:	9a05      	ldr	r2, [sp, #20]
 80059d6:	2322      	movs	r3, #34	@ 0x22
 80059d8:	f04f 0a00 	mov.w	sl, #0
 80059dc:	f04f 0b00 	mov.w	fp, #0
 80059e0:	6013      	str	r3, [r2, #0]
 80059e2:	e76b      	b.n	80058bc <_strtod_l+0x454>
 80059e4:	08009b67 	.word	0x08009b67
 80059e8:	08009d30 	.word	0x08009d30
 80059ec:	08009b5f 	.word	0x08009b5f
 80059f0:	08009b9e 	.word	0x08009b9e
 80059f4:	08009d2d 	.word	0x08009d2d
 80059f8:	08009db8 	.word	0x08009db8
 80059fc:	08009d90 	.word	0x08009d90
 8005a00:	7ff00000 	.word	0x7ff00000
 8005a04:	7ca00000 	.word	0x7ca00000
 8005a08:	7fefffff 	.word	0x7fefffff
 8005a0c:	f014 0310 	ands.w	r3, r4, #16
 8005a10:	bf18      	it	ne
 8005a12:	236a      	movne	r3, #106	@ 0x6a
 8005a14:	4ea9      	ldr	r6, [pc, #676]	@ (8005cbc <_strtod_l+0x854>)
 8005a16:	9308      	str	r3, [sp, #32]
 8005a18:	4650      	mov	r0, sl
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	07e7      	lsls	r7, r4, #31
 8005a20:	d504      	bpl.n	8005a2c <_strtod_l+0x5c4>
 8005a22:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005a26:	f7fa fdef 	bl	8000608 <__aeabi_dmul>
 8005a2a:	2301      	movs	r3, #1
 8005a2c:	1064      	asrs	r4, r4, #1
 8005a2e:	f106 0608 	add.w	r6, r6, #8
 8005a32:	d1f4      	bne.n	8005a1e <_strtod_l+0x5b6>
 8005a34:	b10b      	cbz	r3, 8005a3a <_strtod_l+0x5d2>
 8005a36:	4682      	mov	sl, r0
 8005a38:	468b      	mov	fp, r1
 8005a3a:	9b08      	ldr	r3, [sp, #32]
 8005a3c:	b1b3      	cbz	r3, 8005a6c <_strtod_l+0x604>
 8005a3e:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005a42:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	4659      	mov	r1, fp
 8005a4a:	dd0f      	ble.n	8005a6c <_strtod_l+0x604>
 8005a4c:	2b1f      	cmp	r3, #31
 8005a4e:	dd56      	ble.n	8005afe <_strtod_l+0x696>
 8005a50:	2b34      	cmp	r3, #52	@ 0x34
 8005a52:	bfde      	ittt	le
 8005a54:	f04f 33ff 	movle.w	r3, #4294967295
 8005a58:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8005a5c:	4093      	lslle	r3, r2
 8005a5e:	f04f 0a00 	mov.w	sl, #0
 8005a62:	bfcc      	ite	gt
 8005a64:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8005a68:	ea03 0b01 	andle.w	fp, r3, r1
 8005a6c:	2200      	movs	r2, #0
 8005a6e:	2300      	movs	r3, #0
 8005a70:	4650      	mov	r0, sl
 8005a72:	4659      	mov	r1, fp
 8005a74:	f7fb f830 	bl	8000ad8 <__aeabi_dcmpeq>
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	d1a7      	bne.n	80059cc <_strtod_l+0x564>
 8005a7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a7e:	9300      	str	r3, [sp, #0]
 8005a80:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8005a82:	9805      	ldr	r0, [sp, #20]
 8005a84:	462b      	mov	r3, r5
 8005a86:	464a      	mov	r2, r9
 8005a88:	f002 fe6e 	bl	8008768 <__s2b>
 8005a8c:	900b      	str	r0, [sp, #44]	@ 0x2c
 8005a8e:	2800      	cmp	r0, #0
 8005a90:	f43f af09 	beq.w	80058a6 <_strtod_l+0x43e>
 8005a94:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005a96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a98:	2a00      	cmp	r2, #0
 8005a9a:	eba3 0308 	sub.w	r3, r3, r8
 8005a9e:	bfa8      	it	ge
 8005aa0:	2300      	movge	r3, #0
 8005aa2:	9312      	str	r3, [sp, #72]	@ 0x48
 8005aa4:	2400      	movs	r4, #0
 8005aa6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8005aaa:	9316      	str	r3, [sp, #88]	@ 0x58
 8005aac:	46a0      	mov	r8, r4
 8005aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ab0:	9805      	ldr	r0, [sp, #20]
 8005ab2:	6859      	ldr	r1, [r3, #4]
 8005ab4:	f002 fdb0 	bl	8008618 <_Balloc>
 8005ab8:	4681      	mov	r9, r0
 8005aba:	2800      	cmp	r0, #0
 8005abc:	f43f aef7 	beq.w	80058ae <_strtod_l+0x446>
 8005ac0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005ac2:	691a      	ldr	r2, [r3, #16]
 8005ac4:	3202      	adds	r2, #2
 8005ac6:	f103 010c 	add.w	r1, r3, #12
 8005aca:	0092      	lsls	r2, r2, #2
 8005acc:	300c      	adds	r0, #12
 8005ace:	f001 fade 	bl	800708e <memcpy>
 8005ad2:	ec4b ab10 	vmov	d0, sl, fp
 8005ad6:	9805      	ldr	r0, [sp, #20]
 8005ad8:	aa1c      	add	r2, sp, #112	@ 0x70
 8005ada:	a91b      	add	r1, sp, #108	@ 0x6c
 8005adc:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8005ae0:	f003 f976 	bl	8008dd0 <__d2b>
 8005ae4:	901a      	str	r0, [sp, #104]	@ 0x68
 8005ae6:	2800      	cmp	r0, #0
 8005ae8:	f43f aee1 	beq.w	80058ae <_strtod_l+0x446>
 8005aec:	9805      	ldr	r0, [sp, #20]
 8005aee:	2101      	movs	r1, #1
 8005af0:	f002 fed0 	bl	8008894 <__i2b>
 8005af4:	4680      	mov	r8, r0
 8005af6:	b948      	cbnz	r0, 8005b0c <_strtod_l+0x6a4>
 8005af8:	f04f 0800 	mov.w	r8, #0
 8005afc:	e6d7      	b.n	80058ae <_strtod_l+0x446>
 8005afe:	f04f 32ff 	mov.w	r2, #4294967295
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	ea03 0a0a 	and.w	sl, r3, sl
 8005b0a:	e7af      	b.n	8005a6c <_strtod_l+0x604>
 8005b0c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8005b0e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8005b10:	2d00      	cmp	r5, #0
 8005b12:	bfab      	itete	ge
 8005b14:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 8005b16:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8005b18:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8005b1a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8005b1c:	bfac      	ite	ge
 8005b1e:	18ef      	addge	r7, r5, r3
 8005b20:	1b5e      	sublt	r6, r3, r5
 8005b22:	9b08      	ldr	r3, [sp, #32]
 8005b24:	1aed      	subs	r5, r5, r3
 8005b26:	4415      	add	r5, r2
 8005b28:	4b65      	ldr	r3, [pc, #404]	@ (8005cc0 <_strtod_l+0x858>)
 8005b2a:	3d01      	subs	r5, #1
 8005b2c:	429d      	cmp	r5, r3
 8005b2e:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8005b32:	da50      	bge.n	8005bd6 <_strtod_l+0x76e>
 8005b34:	1b5b      	subs	r3, r3, r5
 8005b36:	2b1f      	cmp	r3, #31
 8005b38:	eba2 0203 	sub.w	r2, r2, r3
 8005b3c:	f04f 0101 	mov.w	r1, #1
 8005b40:	dc3d      	bgt.n	8005bbe <_strtod_l+0x756>
 8005b42:	fa01 f303 	lsl.w	r3, r1, r3
 8005b46:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005b48:	2300      	movs	r3, #0
 8005b4a:	9310      	str	r3, [sp, #64]	@ 0x40
 8005b4c:	18bd      	adds	r5, r7, r2
 8005b4e:	9b08      	ldr	r3, [sp, #32]
 8005b50:	42af      	cmp	r7, r5
 8005b52:	4416      	add	r6, r2
 8005b54:	441e      	add	r6, r3
 8005b56:	463b      	mov	r3, r7
 8005b58:	bfa8      	it	ge
 8005b5a:	462b      	movge	r3, r5
 8005b5c:	42b3      	cmp	r3, r6
 8005b5e:	bfa8      	it	ge
 8005b60:	4633      	movge	r3, r6
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	bfc2      	ittt	gt
 8005b66:	1aed      	subgt	r5, r5, r3
 8005b68:	1af6      	subgt	r6, r6, r3
 8005b6a:	1aff      	subgt	r7, r7, r3
 8005b6c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	dd16      	ble.n	8005ba0 <_strtod_l+0x738>
 8005b72:	4641      	mov	r1, r8
 8005b74:	9805      	ldr	r0, [sp, #20]
 8005b76:	461a      	mov	r2, r3
 8005b78:	f002 ff44 	bl	8008a04 <__pow5mult>
 8005b7c:	4680      	mov	r8, r0
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d0ba      	beq.n	8005af8 <_strtod_l+0x690>
 8005b82:	4601      	mov	r1, r0
 8005b84:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005b86:	9805      	ldr	r0, [sp, #20]
 8005b88:	f002 fe9a 	bl	80088c0 <__multiply>
 8005b8c:	900a      	str	r0, [sp, #40]	@ 0x28
 8005b8e:	2800      	cmp	r0, #0
 8005b90:	f43f ae8d 	beq.w	80058ae <_strtod_l+0x446>
 8005b94:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005b96:	9805      	ldr	r0, [sp, #20]
 8005b98:	f002 fd7e 	bl	8008698 <_Bfree>
 8005b9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005b9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ba0:	2d00      	cmp	r5, #0
 8005ba2:	dc1d      	bgt.n	8005be0 <_strtod_l+0x778>
 8005ba4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	dd23      	ble.n	8005bf2 <_strtod_l+0x78a>
 8005baa:	4649      	mov	r1, r9
 8005bac:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8005bae:	9805      	ldr	r0, [sp, #20]
 8005bb0:	f002 ff28 	bl	8008a04 <__pow5mult>
 8005bb4:	4681      	mov	r9, r0
 8005bb6:	b9e0      	cbnz	r0, 8005bf2 <_strtod_l+0x78a>
 8005bb8:	f04f 0900 	mov.w	r9, #0
 8005bbc:	e677      	b.n	80058ae <_strtod_l+0x446>
 8005bbe:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8005bc2:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 8005bc6:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8005bca:	35e2      	adds	r5, #226	@ 0xe2
 8005bcc:	fa01 f305 	lsl.w	r3, r1, r5
 8005bd0:	9310      	str	r3, [sp, #64]	@ 0x40
 8005bd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 8005bd4:	e7ba      	b.n	8005b4c <_strtod_l+0x6e4>
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	9310      	str	r3, [sp, #64]	@ 0x40
 8005bda:	2301      	movs	r3, #1
 8005bdc:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005bde:	e7b5      	b.n	8005b4c <_strtod_l+0x6e4>
 8005be0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005be2:	9805      	ldr	r0, [sp, #20]
 8005be4:	462a      	mov	r2, r5
 8005be6:	f002 ff67 	bl	8008ab8 <__lshift>
 8005bea:	901a      	str	r0, [sp, #104]	@ 0x68
 8005bec:	2800      	cmp	r0, #0
 8005bee:	d1d9      	bne.n	8005ba4 <_strtod_l+0x73c>
 8005bf0:	e65d      	b.n	80058ae <_strtod_l+0x446>
 8005bf2:	2e00      	cmp	r6, #0
 8005bf4:	dd07      	ble.n	8005c06 <_strtod_l+0x79e>
 8005bf6:	4649      	mov	r1, r9
 8005bf8:	9805      	ldr	r0, [sp, #20]
 8005bfa:	4632      	mov	r2, r6
 8005bfc:	f002 ff5c 	bl	8008ab8 <__lshift>
 8005c00:	4681      	mov	r9, r0
 8005c02:	2800      	cmp	r0, #0
 8005c04:	d0d8      	beq.n	8005bb8 <_strtod_l+0x750>
 8005c06:	2f00      	cmp	r7, #0
 8005c08:	dd08      	ble.n	8005c1c <_strtod_l+0x7b4>
 8005c0a:	4641      	mov	r1, r8
 8005c0c:	9805      	ldr	r0, [sp, #20]
 8005c0e:	463a      	mov	r2, r7
 8005c10:	f002 ff52 	bl	8008ab8 <__lshift>
 8005c14:	4680      	mov	r8, r0
 8005c16:	2800      	cmp	r0, #0
 8005c18:	f43f ae49 	beq.w	80058ae <_strtod_l+0x446>
 8005c1c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005c1e:	9805      	ldr	r0, [sp, #20]
 8005c20:	464a      	mov	r2, r9
 8005c22:	f002 ffd1 	bl	8008bc8 <__mdiff>
 8005c26:	4604      	mov	r4, r0
 8005c28:	2800      	cmp	r0, #0
 8005c2a:	f43f ae40 	beq.w	80058ae <_strtod_l+0x446>
 8005c2e:	68c3      	ldr	r3, [r0, #12]
 8005c30:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005c32:	2300      	movs	r3, #0
 8005c34:	60c3      	str	r3, [r0, #12]
 8005c36:	4641      	mov	r1, r8
 8005c38:	f002 ffaa 	bl	8008b90 <__mcmp>
 8005c3c:	2800      	cmp	r0, #0
 8005c3e:	da45      	bge.n	8005ccc <_strtod_l+0x864>
 8005c40:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005c42:	ea53 030a 	orrs.w	r3, r3, sl
 8005c46:	d16b      	bne.n	8005d20 <_strtod_l+0x8b8>
 8005c48:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d167      	bne.n	8005d20 <_strtod_l+0x8b8>
 8005c50:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c54:	0d1b      	lsrs	r3, r3, #20
 8005c56:	051b      	lsls	r3, r3, #20
 8005c58:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005c5c:	d960      	bls.n	8005d20 <_strtod_l+0x8b8>
 8005c5e:	6963      	ldr	r3, [r4, #20]
 8005c60:	b913      	cbnz	r3, 8005c68 <_strtod_l+0x800>
 8005c62:	6923      	ldr	r3, [r4, #16]
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	dd5b      	ble.n	8005d20 <_strtod_l+0x8b8>
 8005c68:	4621      	mov	r1, r4
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	9805      	ldr	r0, [sp, #20]
 8005c6e:	f002 ff23 	bl	8008ab8 <__lshift>
 8005c72:	4641      	mov	r1, r8
 8005c74:	4604      	mov	r4, r0
 8005c76:	f002 ff8b 	bl	8008b90 <__mcmp>
 8005c7a:	2800      	cmp	r0, #0
 8005c7c:	dd50      	ble.n	8005d20 <_strtod_l+0x8b8>
 8005c7e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005c82:	9a08      	ldr	r2, [sp, #32]
 8005c84:	0d1b      	lsrs	r3, r3, #20
 8005c86:	051b      	lsls	r3, r3, #20
 8005c88:	2a00      	cmp	r2, #0
 8005c8a:	d06a      	beq.n	8005d62 <_strtod_l+0x8fa>
 8005c8c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8005c90:	d867      	bhi.n	8005d62 <_strtod_l+0x8fa>
 8005c92:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 8005c96:	f67f ae9d 	bls.w	80059d4 <_strtod_l+0x56c>
 8005c9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005cc4 <_strtod_l+0x85c>)
 8005c9c:	4650      	mov	r0, sl
 8005c9e:	4659      	mov	r1, fp
 8005ca0:	2200      	movs	r2, #0
 8005ca2:	f7fa fcb1 	bl	8000608 <__aeabi_dmul>
 8005ca6:	4b08      	ldr	r3, [pc, #32]	@ (8005cc8 <_strtod_l+0x860>)
 8005ca8:	400b      	ands	r3, r1
 8005caa:	4682      	mov	sl, r0
 8005cac:	468b      	mov	fp, r1
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	f47f ae08 	bne.w	80058c4 <_strtod_l+0x45c>
 8005cb4:	9a05      	ldr	r2, [sp, #20]
 8005cb6:	2322      	movs	r3, #34	@ 0x22
 8005cb8:	6013      	str	r3, [r2, #0]
 8005cba:	e603      	b.n	80058c4 <_strtod_l+0x45c>
 8005cbc:	08009d58 	.word	0x08009d58
 8005cc0:	fffffc02 	.word	0xfffffc02
 8005cc4:	39500000 	.word	0x39500000
 8005cc8:	7ff00000 	.word	0x7ff00000
 8005ccc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005cd0:	d165      	bne.n	8005d9e <_strtod_l+0x936>
 8005cd2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8005cd4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8005cd8:	b35a      	cbz	r2, 8005d32 <_strtod_l+0x8ca>
 8005cda:	4a9f      	ldr	r2, [pc, #636]	@ (8005f58 <_strtod_l+0xaf0>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d12b      	bne.n	8005d38 <_strtod_l+0x8d0>
 8005ce0:	9b08      	ldr	r3, [sp, #32]
 8005ce2:	4651      	mov	r1, sl
 8005ce4:	b303      	cbz	r3, 8005d28 <_strtod_l+0x8c0>
 8005ce6:	4b9d      	ldr	r3, [pc, #628]	@ (8005f5c <_strtod_l+0xaf4>)
 8005ce8:	465a      	mov	r2, fp
 8005cea:	4013      	ands	r3, r2
 8005cec:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8005cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cf4:	d81b      	bhi.n	8005d2e <_strtod_l+0x8c6>
 8005cf6:	0d1b      	lsrs	r3, r3, #20
 8005cf8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8005cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005d00:	4299      	cmp	r1, r3
 8005d02:	d119      	bne.n	8005d38 <_strtod_l+0x8d0>
 8005d04:	4b96      	ldr	r3, [pc, #600]	@ (8005f60 <_strtod_l+0xaf8>)
 8005d06:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d08:	429a      	cmp	r2, r3
 8005d0a:	d102      	bne.n	8005d12 <_strtod_l+0x8aa>
 8005d0c:	3101      	adds	r1, #1
 8005d0e:	f43f adce 	beq.w	80058ae <_strtod_l+0x446>
 8005d12:	4b92      	ldr	r3, [pc, #584]	@ (8005f5c <_strtod_l+0xaf4>)
 8005d14:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d16:	401a      	ands	r2, r3
 8005d18:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8005d1c:	f04f 0a00 	mov.w	sl, #0
 8005d20:	9b08      	ldr	r3, [sp, #32]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d1b9      	bne.n	8005c9a <_strtod_l+0x832>
 8005d26:	e5cd      	b.n	80058c4 <_strtod_l+0x45c>
 8005d28:	f04f 33ff 	mov.w	r3, #4294967295
 8005d2c:	e7e8      	b.n	8005d00 <_strtod_l+0x898>
 8005d2e:	4613      	mov	r3, r2
 8005d30:	e7e6      	b.n	8005d00 <_strtod_l+0x898>
 8005d32:	ea53 030a 	orrs.w	r3, r3, sl
 8005d36:	d0a2      	beq.n	8005c7e <_strtod_l+0x816>
 8005d38:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8005d3a:	b1db      	cbz	r3, 8005d74 <_strtod_l+0x90c>
 8005d3c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005d3e:	4213      	tst	r3, r2
 8005d40:	d0ee      	beq.n	8005d20 <_strtod_l+0x8b8>
 8005d42:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005d44:	9a08      	ldr	r2, [sp, #32]
 8005d46:	4650      	mov	r0, sl
 8005d48:	4659      	mov	r1, fp
 8005d4a:	b1bb      	cbz	r3, 8005d7c <_strtod_l+0x914>
 8005d4c:	f7ff fb6d 	bl	800542a <sulp>
 8005d50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d54:	ec53 2b10 	vmov	r2, r3, d0
 8005d58:	f7fa faa0 	bl	800029c <__adddf3>
 8005d5c:	4682      	mov	sl, r0
 8005d5e:	468b      	mov	fp, r1
 8005d60:	e7de      	b.n	8005d20 <_strtod_l+0x8b8>
 8005d62:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 8005d66:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8005d6a:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8005d6e:	f04f 3aff 	mov.w	sl, #4294967295
 8005d72:	e7d5      	b.n	8005d20 <_strtod_l+0x8b8>
 8005d74:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8005d76:	ea13 0f0a 	tst.w	r3, sl
 8005d7a:	e7e1      	b.n	8005d40 <_strtod_l+0x8d8>
 8005d7c:	f7ff fb55 	bl	800542a <sulp>
 8005d80:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005d84:	ec53 2b10 	vmov	r2, r3, d0
 8005d88:	f7fa fa86 	bl	8000298 <__aeabi_dsub>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	2300      	movs	r3, #0
 8005d90:	4682      	mov	sl, r0
 8005d92:	468b      	mov	fp, r1
 8005d94:	f7fa fea0 	bl	8000ad8 <__aeabi_dcmpeq>
 8005d98:	2800      	cmp	r0, #0
 8005d9a:	d0c1      	beq.n	8005d20 <_strtod_l+0x8b8>
 8005d9c:	e61a      	b.n	80059d4 <_strtod_l+0x56c>
 8005d9e:	4641      	mov	r1, r8
 8005da0:	4620      	mov	r0, r4
 8005da2:	f003 f86d 	bl	8008e80 <__ratio>
 8005da6:	ec57 6b10 	vmov	r6, r7, d0
 8005daa:	2200      	movs	r2, #0
 8005dac:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8005db0:	4630      	mov	r0, r6
 8005db2:	4639      	mov	r1, r7
 8005db4:	f7fa fea4 	bl	8000b00 <__aeabi_dcmple>
 8005db8:	2800      	cmp	r0, #0
 8005dba:	d06f      	beq.n	8005e9c <_strtod_l+0xa34>
 8005dbc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d17a      	bne.n	8005eb8 <_strtod_l+0xa50>
 8005dc2:	f1ba 0f00 	cmp.w	sl, #0
 8005dc6:	d158      	bne.n	8005e7a <_strtod_l+0xa12>
 8005dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005dca:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d15a      	bne.n	8005e88 <_strtod_l+0xa20>
 8005dd2:	4b64      	ldr	r3, [pc, #400]	@ (8005f64 <_strtod_l+0xafc>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	4630      	mov	r0, r6
 8005dd8:	4639      	mov	r1, r7
 8005dda:	f7fa fe87 	bl	8000aec <__aeabi_dcmplt>
 8005dde:	2800      	cmp	r0, #0
 8005de0:	d159      	bne.n	8005e96 <_strtod_l+0xa2e>
 8005de2:	4630      	mov	r0, r6
 8005de4:	4639      	mov	r1, r7
 8005de6:	4b60      	ldr	r3, [pc, #384]	@ (8005f68 <_strtod_l+0xb00>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	f7fa fc0d 	bl	8000608 <__aeabi_dmul>
 8005dee:	4606      	mov	r6, r0
 8005df0:	460f      	mov	r7, r1
 8005df2:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 8005df6:	9606      	str	r6, [sp, #24]
 8005df8:	9307      	str	r3, [sp, #28]
 8005dfa:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005dfe:	4d57      	ldr	r5, [pc, #348]	@ (8005f5c <_strtod_l+0xaf4>)
 8005e00:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005e04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e06:	401d      	ands	r5, r3
 8005e08:	4b58      	ldr	r3, [pc, #352]	@ (8005f6c <_strtod_l+0xb04>)
 8005e0a:	429d      	cmp	r5, r3
 8005e0c:	f040 80b2 	bne.w	8005f74 <_strtod_l+0xb0c>
 8005e10:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e12:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 8005e16:	ec4b ab10 	vmov	d0, sl, fp
 8005e1a:	f002 ff69 	bl	8008cf0 <__ulp>
 8005e1e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e22:	ec51 0b10 	vmov	r0, r1, d0
 8005e26:	f7fa fbef 	bl	8000608 <__aeabi_dmul>
 8005e2a:	4652      	mov	r2, sl
 8005e2c:	465b      	mov	r3, fp
 8005e2e:	f7fa fa35 	bl	800029c <__adddf3>
 8005e32:	460b      	mov	r3, r1
 8005e34:	4949      	ldr	r1, [pc, #292]	@ (8005f5c <_strtod_l+0xaf4>)
 8005e36:	4a4e      	ldr	r2, [pc, #312]	@ (8005f70 <_strtod_l+0xb08>)
 8005e38:	4019      	ands	r1, r3
 8005e3a:	4291      	cmp	r1, r2
 8005e3c:	4682      	mov	sl, r0
 8005e3e:	d942      	bls.n	8005ec6 <_strtod_l+0xa5e>
 8005e40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8005e42:	4b47      	ldr	r3, [pc, #284]	@ (8005f60 <_strtod_l+0xaf8>)
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d103      	bne.n	8005e50 <_strtod_l+0x9e8>
 8005e48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8005e4a:	3301      	adds	r3, #1
 8005e4c:	f43f ad2f 	beq.w	80058ae <_strtod_l+0x446>
 8005e50:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8005f60 <_strtod_l+0xaf8>
 8005e54:	f04f 3aff 	mov.w	sl, #4294967295
 8005e58:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e5a:	9805      	ldr	r0, [sp, #20]
 8005e5c:	f002 fc1c 	bl	8008698 <_Bfree>
 8005e60:	9805      	ldr	r0, [sp, #20]
 8005e62:	4649      	mov	r1, r9
 8005e64:	f002 fc18 	bl	8008698 <_Bfree>
 8005e68:	9805      	ldr	r0, [sp, #20]
 8005e6a:	4641      	mov	r1, r8
 8005e6c:	f002 fc14 	bl	8008698 <_Bfree>
 8005e70:	9805      	ldr	r0, [sp, #20]
 8005e72:	4621      	mov	r1, r4
 8005e74:	f002 fc10 	bl	8008698 <_Bfree>
 8005e78:	e619      	b.n	8005aae <_strtod_l+0x646>
 8005e7a:	f1ba 0f01 	cmp.w	sl, #1
 8005e7e:	d103      	bne.n	8005e88 <_strtod_l+0xa20>
 8005e80:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	f43f ada6 	beq.w	80059d4 <_strtod_l+0x56c>
 8005e88:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8005f38 <_strtod_l+0xad0>
 8005e8c:	4f35      	ldr	r7, [pc, #212]	@ (8005f64 <_strtod_l+0xafc>)
 8005e8e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005e92:	2600      	movs	r6, #0
 8005e94:	e7b1      	b.n	8005dfa <_strtod_l+0x992>
 8005e96:	4f34      	ldr	r7, [pc, #208]	@ (8005f68 <_strtod_l+0xb00>)
 8005e98:	2600      	movs	r6, #0
 8005e9a:	e7aa      	b.n	8005df2 <_strtod_l+0x98a>
 8005e9c:	4b32      	ldr	r3, [pc, #200]	@ (8005f68 <_strtod_l+0xb00>)
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f7fa fbb0 	bl	8000608 <__aeabi_dmul>
 8005ea8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005eaa:	4606      	mov	r6, r0
 8005eac:	460f      	mov	r7, r1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d09f      	beq.n	8005df2 <_strtod_l+0x98a>
 8005eb2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8005eb6:	e7a0      	b.n	8005dfa <_strtod_l+0x992>
 8005eb8:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8005f40 <_strtod_l+0xad8>
 8005ebc:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005ec0:	ec57 6b17 	vmov	r6, r7, d7
 8005ec4:	e799      	b.n	8005dfa <_strtod_l+0x992>
 8005ec6:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8005eca:	9b08      	ldr	r3, [sp, #32]
 8005ecc:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d1c1      	bne.n	8005e58 <_strtod_l+0x9f0>
 8005ed4:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005ed8:	0d1b      	lsrs	r3, r3, #20
 8005eda:	051b      	lsls	r3, r3, #20
 8005edc:	429d      	cmp	r5, r3
 8005ede:	d1bb      	bne.n	8005e58 <_strtod_l+0x9f0>
 8005ee0:	4630      	mov	r0, r6
 8005ee2:	4639      	mov	r1, r7
 8005ee4:	f7fa fef0 	bl	8000cc8 <__aeabi_d2lz>
 8005ee8:	f7fa fb60 	bl	80005ac <__aeabi_l2d>
 8005eec:	4602      	mov	r2, r0
 8005eee:	460b      	mov	r3, r1
 8005ef0:	4630      	mov	r0, r6
 8005ef2:	4639      	mov	r1, r7
 8005ef4:	f7fa f9d0 	bl	8000298 <__aeabi_dsub>
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4602      	mov	r2, r0
 8005efc:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8005f00:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8005f04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005f06:	ea46 060a 	orr.w	r6, r6, sl
 8005f0a:	431e      	orrs	r6, r3
 8005f0c:	d06f      	beq.n	8005fee <_strtod_l+0xb86>
 8005f0e:	a30e      	add	r3, pc, #56	@ (adr r3, 8005f48 <_strtod_l+0xae0>)
 8005f10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f14:	f7fa fdea 	bl	8000aec <__aeabi_dcmplt>
 8005f18:	2800      	cmp	r0, #0
 8005f1a:	f47f acd3 	bne.w	80058c4 <_strtod_l+0x45c>
 8005f1e:	a30c      	add	r3, pc, #48	@ (adr r3, 8005f50 <_strtod_l+0xae8>)
 8005f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f24:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8005f28:	f7fa fdfe 	bl	8000b28 <__aeabi_dcmpgt>
 8005f2c:	2800      	cmp	r0, #0
 8005f2e:	d093      	beq.n	8005e58 <_strtod_l+0x9f0>
 8005f30:	e4c8      	b.n	80058c4 <_strtod_l+0x45c>
 8005f32:	bf00      	nop
 8005f34:	f3af 8000 	nop.w
 8005f38:	00000000 	.word	0x00000000
 8005f3c:	bff00000 	.word	0xbff00000
 8005f40:	00000000 	.word	0x00000000
 8005f44:	3ff00000 	.word	0x3ff00000
 8005f48:	94a03595 	.word	0x94a03595
 8005f4c:	3fdfffff 	.word	0x3fdfffff
 8005f50:	35afe535 	.word	0x35afe535
 8005f54:	3fe00000 	.word	0x3fe00000
 8005f58:	000fffff 	.word	0x000fffff
 8005f5c:	7ff00000 	.word	0x7ff00000
 8005f60:	7fefffff 	.word	0x7fefffff
 8005f64:	3ff00000 	.word	0x3ff00000
 8005f68:	3fe00000 	.word	0x3fe00000
 8005f6c:	7fe00000 	.word	0x7fe00000
 8005f70:	7c9fffff 	.word	0x7c9fffff
 8005f74:	9b08      	ldr	r3, [sp, #32]
 8005f76:	b323      	cbz	r3, 8005fc2 <_strtod_l+0xb5a>
 8005f78:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8005f7c:	d821      	bhi.n	8005fc2 <_strtod_l+0xb5a>
 8005f7e:	a328      	add	r3, pc, #160	@ (adr r3, 8006020 <_strtod_l+0xbb8>)
 8005f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f84:	4630      	mov	r0, r6
 8005f86:	4639      	mov	r1, r7
 8005f88:	f7fa fdba 	bl	8000b00 <__aeabi_dcmple>
 8005f8c:	b1a0      	cbz	r0, 8005fb8 <_strtod_l+0xb50>
 8005f8e:	4639      	mov	r1, r7
 8005f90:	4630      	mov	r0, r6
 8005f92:	f7fa fe11 	bl	8000bb8 <__aeabi_d2uiz>
 8005f96:	2801      	cmp	r0, #1
 8005f98:	bf38      	it	cc
 8005f9a:	2001      	movcc	r0, #1
 8005f9c:	f7fa faba 	bl	8000514 <__aeabi_ui2d>
 8005fa0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005fa2:	4606      	mov	r6, r0
 8005fa4:	460f      	mov	r7, r1
 8005fa6:	b9fb      	cbnz	r3, 8005fe8 <_strtod_l+0xb80>
 8005fa8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005fac:	9014      	str	r0, [sp, #80]	@ 0x50
 8005fae:	9315      	str	r3, [sp, #84]	@ 0x54
 8005fb0:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8005fb4:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8005fb8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005fba:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8005fbe:	1b5b      	subs	r3, r3, r5
 8005fc0:	9311      	str	r3, [sp, #68]	@ 0x44
 8005fc2:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8005fc6:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8005fca:	f002 fe91 	bl	8008cf0 <__ulp>
 8005fce:	4650      	mov	r0, sl
 8005fd0:	ec53 2b10 	vmov	r2, r3, d0
 8005fd4:	4659      	mov	r1, fp
 8005fd6:	f7fa fb17 	bl	8000608 <__aeabi_dmul>
 8005fda:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8005fde:	f7fa f95d 	bl	800029c <__adddf3>
 8005fe2:	4682      	mov	sl, r0
 8005fe4:	468b      	mov	fp, r1
 8005fe6:	e770      	b.n	8005eca <_strtod_l+0xa62>
 8005fe8:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8005fec:	e7e0      	b.n	8005fb0 <_strtod_l+0xb48>
 8005fee:	a30e      	add	r3, pc, #56	@ (adr r3, 8006028 <_strtod_l+0xbc0>)
 8005ff0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ff4:	f7fa fd7a 	bl	8000aec <__aeabi_dcmplt>
 8005ff8:	e798      	b.n	8005f2c <_strtod_l+0xac4>
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	930e      	str	r3, [sp, #56]	@ 0x38
 8005ffe:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8006000:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006002:	6013      	str	r3, [r2, #0]
 8006004:	f7ff ba6d 	b.w	80054e2 <_strtod_l+0x7a>
 8006008:	2a65      	cmp	r2, #101	@ 0x65
 800600a:	f43f ab68 	beq.w	80056de <_strtod_l+0x276>
 800600e:	2a45      	cmp	r2, #69	@ 0x45
 8006010:	f43f ab65 	beq.w	80056de <_strtod_l+0x276>
 8006014:	2301      	movs	r3, #1
 8006016:	f7ff bba0 	b.w	800575a <_strtod_l+0x2f2>
 800601a:	bf00      	nop
 800601c:	f3af 8000 	nop.w
 8006020:	ffc00000 	.word	0xffc00000
 8006024:	41dfffff 	.word	0x41dfffff
 8006028:	94a03595 	.word	0x94a03595
 800602c:	3fcfffff 	.word	0x3fcfffff

08006030 <_strtod_r>:
 8006030:	4b01      	ldr	r3, [pc, #4]	@ (8006038 <_strtod_r+0x8>)
 8006032:	f7ff ba19 	b.w	8005468 <_strtod_l>
 8006036:	bf00      	nop
 8006038:	20000018 	.word	0x20000018

0800603c <strtod>:
 800603c:	460a      	mov	r2, r1
 800603e:	4601      	mov	r1, r0
 8006040:	4802      	ldr	r0, [pc, #8]	@ (800604c <strtod+0x10>)
 8006042:	4b03      	ldr	r3, [pc, #12]	@ (8006050 <strtod+0x14>)
 8006044:	6800      	ldr	r0, [r0, #0]
 8006046:	f7ff ba0f 	b.w	8005468 <_strtod_l>
 800604a:	bf00      	nop
 800604c:	20000184 	.word	0x20000184
 8006050:	20000018 	.word	0x20000018

08006054 <__cvt>:
 8006054:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006058:	ec57 6b10 	vmov	r6, r7, d0
 800605c:	2f00      	cmp	r7, #0
 800605e:	460c      	mov	r4, r1
 8006060:	4619      	mov	r1, r3
 8006062:	463b      	mov	r3, r7
 8006064:	bfbb      	ittet	lt
 8006066:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800606a:	461f      	movlt	r7, r3
 800606c:	2300      	movge	r3, #0
 800606e:	232d      	movlt	r3, #45	@ 0x2d
 8006070:	700b      	strb	r3, [r1, #0]
 8006072:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006074:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006078:	4691      	mov	r9, r2
 800607a:	f023 0820 	bic.w	r8, r3, #32
 800607e:	bfbc      	itt	lt
 8006080:	4632      	movlt	r2, r6
 8006082:	4616      	movlt	r6, r2
 8006084:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006088:	d005      	beq.n	8006096 <__cvt+0x42>
 800608a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800608e:	d100      	bne.n	8006092 <__cvt+0x3e>
 8006090:	3401      	adds	r4, #1
 8006092:	2102      	movs	r1, #2
 8006094:	e000      	b.n	8006098 <__cvt+0x44>
 8006096:	2103      	movs	r1, #3
 8006098:	ab03      	add	r3, sp, #12
 800609a:	9301      	str	r3, [sp, #4]
 800609c:	ab02      	add	r3, sp, #8
 800609e:	9300      	str	r3, [sp, #0]
 80060a0:	ec47 6b10 	vmov	d0, r6, r7
 80060a4:	4653      	mov	r3, sl
 80060a6:	4622      	mov	r2, r4
 80060a8:	f001 f89a 	bl	80071e0 <_dtoa_r>
 80060ac:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80060b0:	4605      	mov	r5, r0
 80060b2:	d119      	bne.n	80060e8 <__cvt+0x94>
 80060b4:	f019 0f01 	tst.w	r9, #1
 80060b8:	d00e      	beq.n	80060d8 <__cvt+0x84>
 80060ba:	eb00 0904 	add.w	r9, r0, r4
 80060be:	2200      	movs	r2, #0
 80060c0:	2300      	movs	r3, #0
 80060c2:	4630      	mov	r0, r6
 80060c4:	4639      	mov	r1, r7
 80060c6:	f7fa fd07 	bl	8000ad8 <__aeabi_dcmpeq>
 80060ca:	b108      	cbz	r0, 80060d0 <__cvt+0x7c>
 80060cc:	f8cd 900c 	str.w	r9, [sp, #12]
 80060d0:	2230      	movs	r2, #48	@ 0x30
 80060d2:	9b03      	ldr	r3, [sp, #12]
 80060d4:	454b      	cmp	r3, r9
 80060d6:	d31e      	bcc.n	8006116 <__cvt+0xc2>
 80060d8:	9b03      	ldr	r3, [sp, #12]
 80060da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80060dc:	1b5b      	subs	r3, r3, r5
 80060de:	4628      	mov	r0, r5
 80060e0:	6013      	str	r3, [r2, #0]
 80060e2:	b004      	add	sp, #16
 80060e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80060ec:	eb00 0904 	add.w	r9, r0, r4
 80060f0:	d1e5      	bne.n	80060be <__cvt+0x6a>
 80060f2:	7803      	ldrb	r3, [r0, #0]
 80060f4:	2b30      	cmp	r3, #48	@ 0x30
 80060f6:	d10a      	bne.n	800610e <__cvt+0xba>
 80060f8:	2200      	movs	r2, #0
 80060fa:	2300      	movs	r3, #0
 80060fc:	4630      	mov	r0, r6
 80060fe:	4639      	mov	r1, r7
 8006100:	f7fa fcea 	bl	8000ad8 <__aeabi_dcmpeq>
 8006104:	b918      	cbnz	r0, 800610e <__cvt+0xba>
 8006106:	f1c4 0401 	rsb	r4, r4, #1
 800610a:	f8ca 4000 	str.w	r4, [sl]
 800610e:	f8da 3000 	ldr.w	r3, [sl]
 8006112:	4499      	add	r9, r3
 8006114:	e7d3      	b.n	80060be <__cvt+0x6a>
 8006116:	1c59      	adds	r1, r3, #1
 8006118:	9103      	str	r1, [sp, #12]
 800611a:	701a      	strb	r2, [r3, #0]
 800611c:	e7d9      	b.n	80060d2 <__cvt+0x7e>

0800611e <__exponent>:
 800611e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006120:	2900      	cmp	r1, #0
 8006122:	bfba      	itte	lt
 8006124:	4249      	neglt	r1, r1
 8006126:	232d      	movlt	r3, #45	@ 0x2d
 8006128:	232b      	movge	r3, #43	@ 0x2b
 800612a:	2909      	cmp	r1, #9
 800612c:	7002      	strb	r2, [r0, #0]
 800612e:	7043      	strb	r3, [r0, #1]
 8006130:	dd29      	ble.n	8006186 <__exponent+0x68>
 8006132:	f10d 0307 	add.w	r3, sp, #7
 8006136:	461d      	mov	r5, r3
 8006138:	270a      	movs	r7, #10
 800613a:	461a      	mov	r2, r3
 800613c:	fbb1 f6f7 	udiv	r6, r1, r7
 8006140:	fb07 1416 	mls	r4, r7, r6, r1
 8006144:	3430      	adds	r4, #48	@ 0x30
 8006146:	f802 4c01 	strb.w	r4, [r2, #-1]
 800614a:	460c      	mov	r4, r1
 800614c:	2c63      	cmp	r4, #99	@ 0x63
 800614e:	f103 33ff 	add.w	r3, r3, #4294967295
 8006152:	4631      	mov	r1, r6
 8006154:	dcf1      	bgt.n	800613a <__exponent+0x1c>
 8006156:	3130      	adds	r1, #48	@ 0x30
 8006158:	1e94      	subs	r4, r2, #2
 800615a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800615e:	1c41      	adds	r1, r0, #1
 8006160:	4623      	mov	r3, r4
 8006162:	42ab      	cmp	r3, r5
 8006164:	d30a      	bcc.n	800617c <__exponent+0x5e>
 8006166:	f10d 0309 	add.w	r3, sp, #9
 800616a:	1a9b      	subs	r3, r3, r2
 800616c:	42ac      	cmp	r4, r5
 800616e:	bf88      	it	hi
 8006170:	2300      	movhi	r3, #0
 8006172:	3302      	adds	r3, #2
 8006174:	4403      	add	r3, r0
 8006176:	1a18      	subs	r0, r3, r0
 8006178:	b003      	add	sp, #12
 800617a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800617c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006180:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006184:	e7ed      	b.n	8006162 <__exponent+0x44>
 8006186:	2330      	movs	r3, #48	@ 0x30
 8006188:	3130      	adds	r1, #48	@ 0x30
 800618a:	7083      	strb	r3, [r0, #2]
 800618c:	70c1      	strb	r1, [r0, #3]
 800618e:	1d03      	adds	r3, r0, #4
 8006190:	e7f1      	b.n	8006176 <__exponent+0x58>
	...

08006194 <_printf_float>:
 8006194:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006198:	b08d      	sub	sp, #52	@ 0x34
 800619a:	460c      	mov	r4, r1
 800619c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80061a0:	4616      	mov	r6, r2
 80061a2:	461f      	mov	r7, r3
 80061a4:	4605      	mov	r5, r0
 80061a6:	f000 fefb 	bl	8006fa0 <_localeconv_r>
 80061aa:	6803      	ldr	r3, [r0, #0]
 80061ac:	9304      	str	r3, [sp, #16]
 80061ae:	4618      	mov	r0, r3
 80061b0:	f7fa f866 	bl	8000280 <strlen>
 80061b4:	2300      	movs	r3, #0
 80061b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80061b8:	f8d8 3000 	ldr.w	r3, [r8]
 80061bc:	9005      	str	r0, [sp, #20]
 80061be:	3307      	adds	r3, #7
 80061c0:	f023 0307 	bic.w	r3, r3, #7
 80061c4:	f103 0208 	add.w	r2, r3, #8
 80061c8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80061cc:	f8d4 b000 	ldr.w	fp, [r4]
 80061d0:	f8c8 2000 	str.w	r2, [r8]
 80061d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80061d8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80061dc:	9307      	str	r3, [sp, #28]
 80061de:	f8cd 8018 	str.w	r8, [sp, #24]
 80061e2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80061e6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061ea:	4b9c      	ldr	r3, [pc, #624]	@ (800645c <_printf_float+0x2c8>)
 80061ec:	f04f 32ff 	mov.w	r2, #4294967295
 80061f0:	f7fa fca4 	bl	8000b3c <__aeabi_dcmpun>
 80061f4:	bb70      	cbnz	r0, 8006254 <_printf_float+0xc0>
 80061f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80061fa:	4b98      	ldr	r3, [pc, #608]	@ (800645c <_printf_float+0x2c8>)
 80061fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006200:	f7fa fc7e 	bl	8000b00 <__aeabi_dcmple>
 8006204:	bb30      	cbnz	r0, 8006254 <_printf_float+0xc0>
 8006206:	2200      	movs	r2, #0
 8006208:	2300      	movs	r3, #0
 800620a:	4640      	mov	r0, r8
 800620c:	4649      	mov	r1, r9
 800620e:	f7fa fc6d 	bl	8000aec <__aeabi_dcmplt>
 8006212:	b110      	cbz	r0, 800621a <_printf_float+0x86>
 8006214:	232d      	movs	r3, #45	@ 0x2d
 8006216:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800621a:	4a91      	ldr	r2, [pc, #580]	@ (8006460 <_printf_float+0x2cc>)
 800621c:	4b91      	ldr	r3, [pc, #580]	@ (8006464 <_printf_float+0x2d0>)
 800621e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006222:	bf8c      	ite	hi
 8006224:	4690      	movhi	r8, r2
 8006226:	4698      	movls	r8, r3
 8006228:	2303      	movs	r3, #3
 800622a:	6123      	str	r3, [r4, #16]
 800622c:	f02b 0304 	bic.w	r3, fp, #4
 8006230:	6023      	str	r3, [r4, #0]
 8006232:	f04f 0900 	mov.w	r9, #0
 8006236:	9700      	str	r7, [sp, #0]
 8006238:	4633      	mov	r3, r6
 800623a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800623c:	4621      	mov	r1, r4
 800623e:	4628      	mov	r0, r5
 8006240:	f000 f9d2 	bl	80065e8 <_printf_common>
 8006244:	3001      	adds	r0, #1
 8006246:	f040 808d 	bne.w	8006364 <_printf_float+0x1d0>
 800624a:	f04f 30ff 	mov.w	r0, #4294967295
 800624e:	b00d      	add	sp, #52	@ 0x34
 8006250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006254:	4642      	mov	r2, r8
 8006256:	464b      	mov	r3, r9
 8006258:	4640      	mov	r0, r8
 800625a:	4649      	mov	r1, r9
 800625c:	f7fa fc6e 	bl	8000b3c <__aeabi_dcmpun>
 8006260:	b140      	cbz	r0, 8006274 <_printf_float+0xe0>
 8006262:	464b      	mov	r3, r9
 8006264:	2b00      	cmp	r3, #0
 8006266:	bfbc      	itt	lt
 8006268:	232d      	movlt	r3, #45	@ 0x2d
 800626a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800626e:	4a7e      	ldr	r2, [pc, #504]	@ (8006468 <_printf_float+0x2d4>)
 8006270:	4b7e      	ldr	r3, [pc, #504]	@ (800646c <_printf_float+0x2d8>)
 8006272:	e7d4      	b.n	800621e <_printf_float+0x8a>
 8006274:	6863      	ldr	r3, [r4, #4]
 8006276:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800627a:	9206      	str	r2, [sp, #24]
 800627c:	1c5a      	adds	r2, r3, #1
 800627e:	d13b      	bne.n	80062f8 <_printf_float+0x164>
 8006280:	2306      	movs	r3, #6
 8006282:	6063      	str	r3, [r4, #4]
 8006284:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006288:	2300      	movs	r3, #0
 800628a:	6022      	str	r2, [r4, #0]
 800628c:	9303      	str	r3, [sp, #12]
 800628e:	ab0a      	add	r3, sp, #40	@ 0x28
 8006290:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006294:	ab09      	add	r3, sp, #36	@ 0x24
 8006296:	9300      	str	r3, [sp, #0]
 8006298:	6861      	ldr	r1, [r4, #4]
 800629a:	ec49 8b10 	vmov	d0, r8, r9
 800629e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80062a2:	4628      	mov	r0, r5
 80062a4:	f7ff fed6 	bl	8006054 <__cvt>
 80062a8:	9b06      	ldr	r3, [sp, #24]
 80062aa:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80062ac:	2b47      	cmp	r3, #71	@ 0x47
 80062ae:	4680      	mov	r8, r0
 80062b0:	d129      	bne.n	8006306 <_printf_float+0x172>
 80062b2:	1cc8      	adds	r0, r1, #3
 80062b4:	db02      	blt.n	80062bc <_printf_float+0x128>
 80062b6:	6863      	ldr	r3, [r4, #4]
 80062b8:	4299      	cmp	r1, r3
 80062ba:	dd41      	ble.n	8006340 <_printf_float+0x1ac>
 80062bc:	f1aa 0a02 	sub.w	sl, sl, #2
 80062c0:	fa5f fa8a 	uxtb.w	sl, sl
 80062c4:	3901      	subs	r1, #1
 80062c6:	4652      	mov	r2, sl
 80062c8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80062cc:	9109      	str	r1, [sp, #36]	@ 0x24
 80062ce:	f7ff ff26 	bl	800611e <__exponent>
 80062d2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80062d4:	1813      	adds	r3, r2, r0
 80062d6:	2a01      	cmp	r2, #1
 80062d8:	4681      	mov	r9, r0
 80062da:	6123      	str	r3, [r4, #16]
 80062dc:	dc02      	bgt.n	80062e4 <_printf_float+0x150>
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	07d2      	lsls	r2, r2, #31
 80062e2:	d501      	bpl.n	80062e8 <_printf_float+0x154>
 80062e4:	3301      	adds	r3, #1
 80062e6:	6123      	str	r3, [r4, #16]
 80062e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d0a2      	beq.n	8006236 <_printf_float+0xa2>
 80062f0:	232d      	movs	r3, #45	@ 0x2d
 80062f2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80062f6:	e79e      	b.n	8006236 <_printf_float+0xa2>
 80062f8:	9a06      	ldr	r2, [sp, #24]
 80062fa:	2a47      	cmp	r2, #71	@ 0x47
 80062fc:	d1c2      	bne.n	8006284 <_printf_float+0xf0>
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d1c0      	bne.n	8006284 <_printf_float+0xf0>
 8006302:	2301      	movs	r3, #1
 8006304:	e7bd      	b.n	8006282 <_printf_float+0xee>
 8006306:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800630a:	d9db      	bls.n	80062c4 <_printf_float+0x130>
 800630c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8006310:	d118      	bne.n	8006344 <_printf_float+0x1b0>
 8006312:	2900      	cmp	r1, #0
 8006314:	6863      	ldr	r3, [r4, #4]
 8006316:	dd0b      	ble.n	8006330 <_printf_float+0x19c>
 8006318:	6121      	str	r1, [r4, #16]
 800631a:	b913      	cbnz	r3, 8006322 <_printf_float+0x18e>
 800631c:	6822      	ldr	r2, [r4, #0]
 800631e:	07d0      	lsls	r0, r2, #31
 8006320:	d502      	bpl.n	8006328 <_printf_float+0x194>
 8006322:	3301      	adds	r3, #1
 8006324:	440b      	add	r3, r1
 8006326:	6123      	str	r3, [r4, #16]
 8006328:	65a1      	str	r1, [r4, #88]	@ 0x58
 800632a:	f04f 0900 	mov.w	r9, #0
 800632e:	e7db      	b.n	80062e8 <_printf_float+0x154>
 8006330:	b913      	cbnz	r3, 8006338 <_printf_float+0x1a4>
 8006332:	6822      	ldr	r2, [r4, #0]
 8006334:	07d2      	lsls	r2, r2, #31
 8006336:	d501      	bpl.n	800633c <_printf_float+0x1a8>
 8006338:	3302      	adds	r3, #2
 800633a:	e7f4      	b.n	8006326 <_printf_float+0x192>
 800633c:	2301      	movs	r3, #1
 800633e:	e7f2      	b.n	8006326 <_printf_float+0x192>
 8006340:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006344:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006346:	4299      	cmp	r1, r3
 8006348:	db05      	blt.n	8006356 <_printf_float+0x1c2>
 800634a:	6823      	ldr	r3, [r4, #0]
 800634c:	6121      	str	r1, [r4, #16]
 800634e:	07d8      	lsls	r0, r3, #31
 8006350:	d5ea      	bpl.n	8006328 <_printf_float+0x194>
 8006352:	1c4b      	adds	r3, r1, #1
 8006354:	e7e7      	b.n	8006326 <_printf_float+0x192>
 8006356:	2900      	cmp	r1, #0
 8006358:	bfd4      	ite	le
 800635a:	f1c1 0202 	rsble	r2, r1, #2
 800635e:	2201      	movgt	r2, #1
 8006360:	4413      	add	r3, r2
 8006362:	e7e0      	b.n	8006326 <_printf_float+0x192>
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	055a      	lsls	r2, r3, #21
 8006368:	d407      	bmi.n	800637a <_printf_float+0x1e6>
 800636a:	6923      	ldr	r3, [r4, #16]
 800636c:	4642      	mov	r2, r8
 800636e:	4631      	mov	r1, r6
 8006370:	4628      	mov	r0, r5
 8006372:	47b8      	blx	r7
 8006374:	3001      	adds	r0, #1
 8006376:	d12b      	bne.n	80063d0 <_printf_float+0x23c>
 8006378:	e767      	b.n	800624a <_printf_float+0xb6>
 800637a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800637e:	f240 80dd 	bls.w	800653c <_printf_float+0x3a8>
 8006382:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006386:	2200      	movs	r2, #0
 8006388:	2300      	movs	r3, #0
 800638a:	f7fa fba5 	bl	8000ad8 <__aeabi_dcmpeq>
 800638e:	2800      	cmp	r0, #0
 8006390:	d033      	beq.n	80063fa <_printf_float+0x266>
 8006392:	4a37      	ldr	r2, [pc, #220]	@ (8006470 <_printf_float+0x2dc>)
 8006394:	2301      	movs	r3, #1
 8006396:	4631      	mov	r1, r6
 8006398:	4628      	mov	r0, r5
 800639a:	47b8      	blx	r7
 800639c:	3001      	adds	r0, #1
 800639e:	f43f af54 	beq.w	800624a <_printf_float+0xb6>
 80063a2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80063a6:	4543      	cmp	r3, r8
 80063a8:	db02      	blt.n	80063b0 <_printf_float+0x21c>
 80063aa:	6823      	ldr	r3, [r4, #0]
 80063ac:	07d8      	lsls	r0, r3, #31
 80063ae:	d50f      	bpl.n	80063d0 <_printf_float+0x23c>
 80063b0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80063b4:	4631      	mov	r1, r6
 80063b6:	4628      	mov	r0, r5
 80063b8:	47b8      	blx	r7
 80063ba:	3001      	adds	r0, #1
 80063bc:	f43f af45 	beq.w	800624a <_printf_float+0xb6>
 80063c0:	f04f 0900 	mov.w	r9, #0
 80063c4:	f108 38ff 	add.w	r8, r8, #4294967295
 80063c8:	f104 0a1a 	add.w	sl, r4, #26
 80063cc:	45c8      	cmp	r8, r9
 80063ce:	dc09      	bgt.n	80063e4 <_printf_float+0x250>
 80063d0:	6823      	ldr	r3, [r4, #0]
 80063d2:	079b      	lsls	r3, r3, #30
 80063d4:	f100 8103 	bmi.w	80065de <_printf_float+0x44a>
 80063d8:	68e0      	ldr	r0, [r4, #12]
 80063da:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80063dc:	4298      	cmp	r0, r3
 80063de:	bfb8      	it	lt
 80063e0:	4618      	movlt	r0, r3
 80063e2:	e734      	b.n	800624e <_printf_float+0xba>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4652      	mov	r2, sl
 80063e8:	4631      	mov	r1, r6
 80063ea:	4628      	mov	r0, r5
 80063ec:	47b8      	blx	r7
 80063ee:	3001      	adds	r0, #1
 80063f0:	f43f af2b 	beq.w	800624a <_printf_float+0xb6>
 80063f4:	f109 0901 	add.w	r9, r9, #1
 80063f8:	e7e8      	b.n	80063cc <_printf_float+0x238>
 80063fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	dc39      	bgt.n	8006474 <_printf_float+0x2e0>
 8006400:	4a1b      	ldr	r2, [pc, #108]	@ (8006470 <_printf_float+0x2dc>)
 8006402:	2301      	movs	r3, #1
 8006404:	4631      	mov	r1, r6
 8006406:	4628      	mov	r0, r5
 8006408:	47b8      	blx	r7
 800640a:	3001      	adds	r0, #1
 800640c:	f43f af1d 	beq.w	800624a <_printf_float+0xb6>
 8006410:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006414:	ea59 0303 	orrs.w	r3, r9, r3
 8006418:	d102      	bne.n	8006420 <_printf_float+0x28c>
 800641a:	6823      	ldr	r3, [r4, #0]
 800641c:	07d9      	lsls	r1, r3, #31
 800641e:	d5d7      	bpl.n	80063d0 <_printf_float+0x23c>
 8006420:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006424:	4631      	mov	r1, r6
 8006426:	4628      	mov	r0, r5
 8006428:	47b8      	blx	r7
 800642a:	3001      	adds	r0, #1
 800642c:	f43f af0d 	beq.w	800624a <_printf_float+0xb6>
 8006430:	f04f 0a00 	mov.w	sl, #0
 8006434:	f104 0b1a 	add.w	fp, r4, #26
 8006438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800643a:	425b      	negs	r3, r3
 800643c:	4553      	cmp	r3, sl
 800643e:	dc01      	bgt.n	8006444 <_printf_float+0x2b0>
 8006440:	464b      	mov	r3, r9
 8006442:	e793      	b.n	800636c <_printf_float+0x1d8>
 8006444:	2301      	movs	r3, #1
 8006446:	465a      	mov	r2, fp
 8006448:	4631      	mov	r1, r6
 800644a:	4628      	mov	r0, r5
 800644c:	47b8      	blx	r7
 800644e:	3001      	adds	r0, #1
 8006450:	f43f aefb 	beq.w	800624a <_printf_float+0xb6>
 8006454:	f10a 0a01 	add.w	sl, sl, #1
 8006458:	e7ee      	b.n	8006438 <_printf_float+0x2a4>
 800645a:	bf00      	nop
 800645c:	7fefffff 	.word	0x7fefffff
 8006460:	08009b5e 	.word	0x08009b5e
 8006464:	08009b5a 	.word	0x08009b5a
 8006468:	08009b66 	.word	0x08009b66
 800646c:	08009b62 	.word	0x08009b62
 8006470:	08009b6a 	.word	0x08009b6a
 8006474:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006476:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800647a:	4553      	cmp	r3, sl
 800647c:	bfa8      	it	ge
 800647e:	4653      	movge	r3, sl
 8006480:	2b00      	cmp	r3, #0
 8006482:	4699      	mov	r9, r3
 8006484:	dc36      	bgt.n	80064f4 <_printf_float+0x360>
 8006486:	f04f 0b00 	mov.w	fp, #0
 800648a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800648e:	f104 021a 	add.w	r2, r4, #26
 8006492:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006494:	9306      	str	r3, [sp, #24]
 8006496:	eba3 0309 	sub.w	r3, r3, r9
 800649a:	455b      	cmp	r3, fp
 800649c:	dc31      	bgt.n	8006502 <_printf_float+0x36e>
 800649e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064a0:	459a      	cmp	sl, r3
 80064a2:	dc3a      	bgt.n	800651a <_printf_float+0x386>
 80064a4:	6823      	ldr	r3, [r4, #0]
 80064a6:	07da      	lsls	r2, r3, #31
 80064a8:	d437      	bmi.n	800651a <_printf_float+0x386>
 80064aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064ac:	ebaa 0903 	sub.w	r9, sl, r3
 80064b0:	9b06      	ldr	r3, [sp, #24]
 80064b2:	ebaa 0303 	sub.w	r3, sl, r3
 80064b6:	4599      	cmp	r9, r3
 80064b8:	bfa8      	it	ge
 80064ba:	4699      	movge	r9, r3
 80064bc:	f1b9 0f00 	cmp.w	r9, #0
 80064c0:	dc33      	bgt.n	800652a <_printf_float+0x396>
 80064c2:	f04f 0800 	mov.w	r8, #0
 80064c6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80064ca:	f104 0b1a 	add.w	fp, r4, #26
 80064ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064d0:	ebaa 0303 	sub.w	r3, sl, r3
 80064d4:	eba3 0309 	sub.w	r3, r3, r9
 80064d8:	4543      	cmp	r3, r8
 80064da:	f77f af79 	ble.w	80063d0 <_printf_float+0x23c>
 80064de:	2301      	movs	r3, #1
 80064e0:	465a      	mov	r2, fp
 80064e2:	4631      	mov	r1, r6
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b8      	blx	r7
 80064e8:	3001      	adds	r0, #1
 80064ea:	f43f aeae 	beq.w	800624a <_printf_float+0xb6>
 80064ee:	f108 0801 	add.w	r8, r8, #1
 80064f2:	e7ec      	b.n	80064ce <_printf_float+0x33a>
 80064f4:	4642      	mov	r2, r8
 80064f6:	4631      	mov	r1, r6
 80064f8:	4628      	mov	r0, r5
 80064fa:	47b8      	blx	r7
 80064fc:	3001      	adds	r0, #1
 80064fe:	d1c2      	bne.n	8006486 <_printf_float+0x2f2>
 8006500:	e6a3      	b.n	800624a <_printf_float+0xb6>
 8006502:	2301      	movs	r3, #1
 8006504:	4631      	mov	r1, r6
 8006506:	4628      	mov	r0, r5
 8006508:	9206      	str	r2, [sp, #24]
 800650a:	47b8      	blx	r7
 800650c:	3001      	adds	r0, #1
 800650e:	f43f ae9c 	beq.w	800624a <_printf_float+0xb6>
 8006512:	9a06      	ldr	r2, [sp, #24]
 8006514:	f10b 0b01 	add.w	fp, fp, #1
 8006518:	e7bb      	b.n	8006492 <_printf_float+0x2fe>
 800651a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800651e:	4631      	mov	r1, r6
 8006520:	4628      	mov	r0, r5
 8006522:	47b8      	blx	r7
 8006524:	3001      	adds	r0, #1
 8006526:	d1c0      	bne.n	80064aa <_printf_float+0x316>
 8006528:	e68f      	b.n	800624a <_printf_float+0xb6>
 800652a:	9a06      	ldr	r2, [sp, #24]
 800652c:	464b      	mov	r3, r9
 800652e:	4442      	add	r2, r8
 8006530:	4631      	mov	r1, r6
 8006532:	4628      	mov	r0, r5
 8006534:	47b8      	blx	r7
 8006536:	3001      	adds	r0, #1
 8006538:	d1c3      	bne.n	80064c2 <_printf_float+0x32e>
 800653a:	e686      	b.n	800624a <_printf_float+0xb6>
 800653c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006540:	f1ba 0f01 	cmp.w	sl, #1
 8006544:	dc01      	bgt.n	800654a <_printf_float+0x3b6>
 8006546:	07db      	lsls	r3, r3, #31
 8006548:	d536      	bpl.n	80065b8 <_printf_float+0x424>
 800654a:	2301      	movs	r3, #1
 800654c:	4642      	mov	r2, r8
 800654e:	4631      	mov	r1, r6
 8006550:	4628      	mov	r0, r5
 8006552:	47b8      	blx	r7
 8006554:	3001      	adds	r0, #1
 8006556:	f43f ae78 	beq.w	800624a <_printf_float+0xb6>
 800655a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800655e:	4631      	mov	r1, r6
 8006560:	4628      	mov	r0, r5
 8006562:	47b8      	blx	r7
 8006564:	3001      	adds	r0, #1
 8006566:	f43f ae70 	beq.w	800624a <_printf_float+0xb6>
 800656a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800656e:	2200      	movs	r2, #0
 8006570:	2300      	movs	r3, #0
 8006572:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006576:	f7fa faaf 	bl	8000ad8 <__aeabi_dcmpeq>
 800657a:	b9c0      	cbnz	r0, 80065ae <_printf_float+0x41a>
 800657c:	4653      	mov	r3, sl
 800657e:	f108 0201 	add.w	r2, r8, #1
 8006582:	4631      	mov	r1, r6
 8006584:	4628      	mov	r0, r5
 8006586:	47b8      	blx	r7
 8006588:	3001      	adds	r0, #1
 800658a:	d10c      	bne.n	80065a6 <_printf_float+0x412>
 800658c:	e65d      	b.n	800624a <_printf_float+0xb6>
 800658e:	2301      	movs	r3, #1
 8006590:	465a      	mov	r2, fp
 8006592:	4631      	mov	r1, r6
 8006594:	4628      	mov	r0, r5
 8006596:	47b8      	blx	r7
 8006598:	3001      	adds	r0, #1
 800659a:	f43f ae56 	beq.w	800624a <_printf_float+0xb6>
 800659e:	f108 0801 	add.w	r8, r8, #1
 80065a2:	45d0      	cmp	r8, sl
 80065a4:	dbf3      	blt.n	800658e <_printf_float+0x3fa>
 80065a6:	464b      	mov	r3, r9
 80065a8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80065ac:	e6df      	b.n	800636e <_printf_float+0x1da>
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	f104 0b1a 	add.w	fp, r4, #26
 80065b6:	e7f4      	b.n	80065a2 <_printf_float+0x40e>
 80065b8:	2301      	movs	r3, #1
 80065ba:	4642      	mov	r2, r8
 80065bc:	e7e1      	b.n	8006582 <_printf_float+0x3ee>
 80065be:	2301      	movs	r3, #1
 80065c0:	464a      	mov	r2, r9
 80065c2:	4631      	mov	r1, r6
 80065c4:	4628      	mov	r0, r5
 80065c6:	47b8      	blx	r7
 80065c8:	3001      	adds	r0, #1
 80065ca:	f43f ae3e 	beq.w	800624a <_printf_float+0xb6>
 80065ce:	f108 0801 	add.w	r8, r8, #1
 80065d2:	68e3      	ldr	r3, [r4, #12]
 80065d4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80065d6:	1a5b      	subs	r3, r3, r1
 80065d8:	4543      	cmp	r3, r8
 80065da:	dcf0      	bgt.n	80065be <_printf_float+0x42a>
 80065dc:	e6fc      	b.n	80063d8 <_printf_float+0x244>
 80065de:	f04f 0800 	mov.w	r8, #0
 80065e2:	f104 0919 	add.w	r9, r4, #25
 80065e6:	e7f4      	b.n	80065d2 <_printf_float+0x43e>

080065e8 <_printf_common>:
 80065e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065ec:	4616      	mov	r6, r2
 80065ee:	4698      	mov	r8, r3
 80065f0:	688a      	ldr	r2, [r1, #8]
 80065f2:	690b      	ldr	r3, [r1, #16]
 80065f4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80065f8:	4293      	cmp	r3, r2
 80065fa:	bfb8      	it	lt
 80065fc:	4613      	movlt	r3, r2
 80065fe:	6033      	str	r3, [r6, #0]
 8006600:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006604:	4607      	mov	r7, r0
 8006606:	460c      	mov	r4, r1
 8006608:	b10a      	cbz	r2, 800660e <_printf_common+0x26>
 800660a:	3301      	adds	r3, #1
 800660c:	6033      	str	r3, [r6, #0]
 800660e:	6823      	ldr	r3, [r4, #0]
 8006610:	0699      	lsls	r1, r3, #26
 8006612:	bf42      	ittt	mi
 8006614:	6833      	ldrmi	r3, [r6, #0]
 8006616:	3302      	addmi	r3, #2
 8006618:	6033      	strmi	r3, [r6, #0]
 800661a:	6825      	ldr	r5, [r4, #0]
 800661c:	f015 0506 	ands.w	r5, r5, #6
 8006620:	d106      	bne.n	8006630 <_printf_common+0x48>
 8006622:	f104 0a19 	add.w	sl, r4, #25
 8006626:	68e3      	ldr	r3, [r4, #12]
 8006628:	6832      	ldr	r2, [r6, #0]
 800662a:	1a9b      	subs	r3, r3, r2
 800662c:	42ab      	cmp	r3, r5
 800662e:	dc26      	bgt.n	800667e <_printf_common+0x96>
 8006630:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006634:	6822      	ldr	r2, [r4, #0]
 8006636:	3b00      	subs	r3, #0
 8006638:	bf18      	it	ne
 800663a:	2301      	movne	r3, #1
 800663c:	0692      	lsls	r2, r2, #26
 800663e:	d42b      	bmi.n	8006698 <_printf_common+0xb0>
 8006640:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006644:	4641      	mov	r1, r8
 8006646:	4638      	mov	r0, r7
 8006648:	47c8      	blx	r9
 800664a:	3001      	adds	r0, #1
 800664c:	d01e      	beq.n	800668c <_printf_common+0xa4>
 800664e:	6823      	ldr	r3, [r4, #0]
 8006650:	6922      	ldr	r2, [r4, #16]
 8006652:	f003 0306 	and.w	r3, r3, #6
 8006656:	2b04      	cmp	r3, #4
 8006658:	bf02      	ittt	eq
 800665a:	68e5      	ldreq	r5, [r4, #12]
 800665c:	6833      	ldreq	r3, [r6, #0]
 800665e:	1aed      	subeq	r5, r5, r3
 8006660:	68a3      	ldr	r3, [r4, #8]
 8006662:	bf0c      	ite	eq
 8006664:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006668:	2500      	movne	r5, #0
 800666a:	4293      	cmp	r3, r2
 800666c:	bfc4      	itt	gt
 800666e:	1a9b      	subgt	r3, r3, r2
 8006670:	18ed      	addgt	r5, r5, r3
 8006672:	2600      	movs	r6, #0
 8006674:	341a      	adds	r4, #26
 8006676:	42b5      	cmp	r5, r6
 8006678:	d11a      	bne.n	80066b0 <_printf_common+0xc8>
 800667a:	2000      	movs	r0, #0
 800667c:	e008      	b.n	8006690 <_printf_common+0xa8>
 800667e:	2301      	movs	r3, #1
 8006680:	4652      	mov	r2, sl
 8006682:	4641      	mov	r1, r8
 8006684:	4638      	mov	r0, r7
 8006686:	47c8      	blx	r9
 8006688:	3001      	adds	r0, #1
 800668a:	d103      	bne.n	8006694 <_printf_common+0xac>
 800668c:	f04f 30ff 	mov.w	r0, #4294967295
 8006690:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006694:	3501      	adds	r5, #1
 8006696:	e7c6      	b.n	8006626 <_printf_common+0x3e>
 8006698:	18e1      	adds	r1, r4, r3
 800669a:	1c5a      	adds	r2, r3, #1
 800669c:	2030      	movs	r0, #48	@ 0x30
 800669e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80066a2:	4422      	add	r2, r4
 80066a4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80066a8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80066ac:	3302      	adds	r3, #2
 80066ae:	e7c7      	b.n	8006640 <_printf_common+0x58>
 80066b0:	2301      	movs	r3, #1
 80066b2:	4622      	mov	r2, r4
 80066b4:	4641      	mov	r1, r8
 80066b6:	4638      	mov	r0, r7
 80066b8:	47c8      	blx	r9
 80066ba:	3001      	adds	r0, #1
 80066bc:	d0e6      	beq.n	800668c <_printf_common+0xa4>
 80066be:	3601      	adds	r6, #1
 80066c0:	e7d9      	b.n	8006676 <_printf_common+0x8e>
	...

080066c4 <_printf_i>:
 80066c4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80066c8:	7e0f      	ldrb	r7, [r1, #24]
 80066ca:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80066cc:	2f78      	cmp	r7, #120	@ 0x78
 80066ce:	4691      	mov	r9, r2
 80066d0:	4680      	mov	r8, r0
 80066d2:	460c      	mov	r4, r1
 80066d4:	469a      	mov	sl, r3
 80066d6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80066da:	d807      	bhi.n	80066ec <_printf_i+0x28>
 80066dc:	2f62      	cmp	r7, #98	@ 0x62
 80066de:	d80a      	bhi.n	80066f6 <_printf_i+0x32>
 80066e0:	2f00      	cmp	r7, #0
 80066e2:	f000 80d1 	beq.w	8006888 <_printf_i+0x1c4>
 80066e6:	2f58      	cmp	r7, #88	@ 0x58
 80066e8:	f000 80b8 	beq.w	800685c <_printf_i+0x198>
 80066ec:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80066f0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80066f4:	e03a      	b.n	800676c <_printf_i+0xa8>
 80066f6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80066fa:	2b15      	cmp	r3, #21
 80066fc:	d8f6      	bhi.n	80066ec <_printf_i+0x28>
 80066fe:	a101      	add	r1, pc, #4	@ (adr r1, 8006704 <_printf_i+0x40>)
 8006700:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006704:	0800675d 	.word	0x0800675d
 8006708:	08006771 	.word	0x08006771
 800670c:	080066ed 	.word	0x080066ed
 8006710:	080066ed 	.word	0x080066ed
 8006714:	080066ed 	.word	0x080066ed
 8006718:	080066ed 	.word	0x080066ed
 800671c:	08006771 	.word	0x08006771
 8006720:	080066ed 	.word	0x080066ed
 8006724:	080066ed 	.word	0x080066ed
 8006728:	080066ed 	.word	0x080066ed
 800672c:	080066ed 	.word	0x080066ed
 8006730:	0800686f 	.word	0x0800686f
 8006734:	0800679b 	.word	0x0800679b
 8006738:	08006829 	.word	0x08006829
 800673c:	080066ed 	.word	0x080066ed
 8006740:	080066ed 	.word	0x080066ed
 8006744:	08006891 	.word	0x08006891
 8006748:	080066ed 	.word	0x080066ed
 800674c:	0800679b 	.word	0x0800679b
 8006750:	080066ed 	.word	0x080066ed
 8006754:	080066ed 	.word	0x080066ed
 8006758:	08006831 	.word	0x08006831
 800675c:	6833      	ldr	r3, [r6, #0]
 800675e:	1d1a      	adds	r2, r3, #4
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6032      	str	r2, [r6, #0]
 8006764:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006768:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800676c:	2301      	movs	r3, #1
 800676e:	e09c      	b.n	80068aa <_printf_i+0x1e6>
 8006770:	6833      	ldr	r3, [r6, #0]
 8006772:	6820      	ldr	r0, [r4, #0]
 8006774:	1d19      	adds	r1, r3, #4
 8006776:	6031      	str	r1, [r6, #0]
 8006778:	0606      	lsls	r6, r0, #24
 800677a:	d501      	bpl.n	8006780 <_printf_i+0xbc>
 800677c:	681d      	ldr	r5, [r3, #0]
 800677e:	e003      	b.n	8006788 <_printf_i+0xc4>
 8006780:	0645      	lsls	r5, r0, #25
 8006782:	d5fb      	bpl.n	800677c <_printf_i+0xb8>
 8006784:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006788:	2d00      	cmp	r5, #0
 800678a:	da03      	bge.n	8006794 <_printf_i+0xd0>
 800678c:	232d      	movs	r3, #45	@ 0x2d
 800678e:	426d      	negs	r5, r5
 8006790:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006794:	4858      	ldr	r0, [pc, #352]	@ (80068f8 <_printf_i+0x234>)
 8006796:	230a      	movs	r3, #10
 8006798:	e011      	b.n	80067be <_printf_i+0xfa>
 800679a:	6821      	ldr	r1, [r4, #0]
 800679c:	6833      	ldr	r3, [r6, #0]
 800679e:	0608      	lsls	r0, r1, #24
 80067a0:	f853 5b04 	ldr.w	r5, [r3], #4
 80067a4:	d402      	bmi.n	80067ac <_printf_i+0xe8>
 80067a6:	0649      	lsls	r1, r1, #25
 80067a8:	bf48      	it	mi
 80067aa:	b2ad      	uxthmi	r5, r5
 80067ac:	2f6f      	cmp	r7, #111	@ 0x6f
 80067ae:	4852      	ldr	r0, [pc, #328]	@ (80068f8 <_printf_i+0x234>)
 80067b0:	6033      	str	r3, [r6, #0]
 80067b2:	bf14      	ite	ne
 80067b4:	230a      	movne	r3, #10
 80067b6:	2308      	moveq	r3, #8
 80067b8:	2100      	movs	r1, #0
 80067ba:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80067be:	6866      	ldr	r6, [r4, #4]
 80067c0:	60a6      	str	r6, [r4, #8]
 80067c2:	2e00      	cmp	r6, #0
 80067c4:	db05      	blt.n	80067d2 <_printf_i+0x10e>
 80067c6:	6821      	ldr	r1, [r4, #0]
 80067c8:	432e      	orrs	r6, r5
 80067ca:	f021 0104 	bic.w	r1, r1, #4
 80067ce:	6021      	str	r1, [r4, #0]
 80067d0:	d04b      	beq.n	800686a <_printf_i+0x1a6>
 80067d2:	4616      	mov	r6, r2
 80067d4:	fbb5 f1f3 	udiv	r1, r5, r3
 80067d8:	fb03 5711 	mls	r7, r3, r1, r5
 80067dc:	5dc7      	ldrb	r7, [r0, r7]
 80067de:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80067e2:	462f      	mov	r7, r5
 80067e4:	42bb      	cmp	r3, r7
 80067e6:	460d      	mov	r5, r1
 80067e8:	d9f4      	bls.n	80067d4 <_printf_i+0x110>
 80067ea:	2b08      	cmp	r3, #8
 80067ec:	d10b      	bne.n	8006806 <_printf_i+0x142>
 80067ee:	6823      	ldr	r3, [r4, #0]
 80067f0:	07df      	lsls	r7, r3, #31
 80067f2:	d508      	bpl.n	8006806 <_printf_i+0x142>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	6861      	ldr	r1, [r4, #4]
 80067f8:	4299      	cmp	r1, r3
 80067fa:	bfde      	ittt	le
 80067fc:	2330      	movle	r3, #48	@ 0x30
 80067fe:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006802:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006806:	1b92      	subs	r2, r2, r6
 8006808:	6122      	str	r2, [r4, #16]
 800680a:	f8cd a000 	str.w	sl, [sp]
 800680e:	464b      	mov	r3, r9
 8006810:	aa03      	add	r2, sp, #12
 8006812:	4621      	mov	r1, r4
 8006814:	4640      	mov	r0, r8
 8006816:	f7ff fee7 	bl	80065e8 <_printf_common>
 800681a:	3001      	adds	r0, #1
 800681c:	d14a      	bne.n	80068b4 <_printf_i+0x1f0>
 800681e:	f04f 30ff 	mov.w	r0, #4294967295
 8006822:	b004      	add	sp, #16
 8006824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006828:	6823      	ldr	r3, [r4, #0]
 800682a:	f043 0320 	orr.w	r3, r3, #32
 800682e:	6023      	str	r3, [r4, #0]
 8006830:	4832      	ldr	r0, [pc, #200]	@ (80068fc <_printf_i+0x238>)
 8006832:	2778      	movs	r7, #120	@ 0x78
 8006834:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006838:	6823      	ldr	r3, [r4, #0]
 800683a:	6831      	ldr	r1, [r6, #0]
 800683c:	061f      	lsls	r7, r3, #24
 800683e:	f851 5b04 	ldr.w	r5, [r1], #4
 8006842:	d402      	bmi.n	800684a <_printf_i+0x186>
 8006844:	065f      	lsls	r7, r3, #25
 8006846:	bf48      	it	mi
 8006848:	b2ad      	uxthmi	r5, r5
 800684a:	6031      	str	r1, [r6, #0]
 800684c:	07d9      	lsls	r1, r3, #31
 800684e:	bf44      	itt	mi
 8006850:	f043 0320 	orrmi.w	r3, r3, #32
 8006854:	6023      	strmi	r3, [r4, #0]
 8006856:	b11d      	cbz	r5, 8006860 <_printf_i+0x19c>
 8006858:	2310      	movs	r3, #16
 800685a:	e7ad      	b.n	80067b8 <_printf_i+0xf4>
 800685c:	4826      	ldr	r0, [pc, #152]	@ (80068f8 <_printf_i+0x234>)
 800685e:	e7e9      	b.n	8006834 <_printf_i+0x170>
 8006860:	6823      	ldr	r3, [r4, #0]
 8006862:	f023 0320 	bic.w	r3, r3, #32
 8006866:	6023      	str	r3, [r4, #0]
 8006868:	e7f6      	b.n	8006858 <_printf_i+0x194>
 800686a:	4616      	mov	r6, r2
 800686c:	e7bd      	b.n	80067ea <_printf_i+0x126>
 800686e:	6833      	ldr	r3, [r6, #0]
 8006870:	6825      	ldr	r5, [r4, #0]
 8006872:	6961      	ldr	r1, [r4, #20]
 8006874:	1d18      	adds	r0, r3, #4
 8006876:	6030      	str	r0, [r6, #0]
 8006878:	062e      	lsls	r6, r5, #24
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	d501      	bpl.n	8006882 <_printf_i+0x1be>
 800687e:	6019      	str	r1, [r3, #0]
 8006880:	e002      	b.n	8006888 <_printf_i+0x1c4>
 8006882:	0668      	lsls	r0, r5, #25
 8006884:	d5fb      	bpl.n	800687e <_printf_i+0x1ba>
 8006886:	8019      	strh	r1, [r3, #0]
 8006888:	2300      	movs	r3, #0
 800688a:	6123      	str	r3, [r4, #16]
 800688c:	4616      	mov	r6, r2
 800688e:	e7bc      	b.n	800680a <_printf_i+0x146>
 8006890:	6833      	ldr	r3, [r6, #0]
 8006892:	1d1a      	adds	r2, r3, #4
 8006894:	6032      	str	r2, [r6, #0]
 8006896:	681e      	ldr	r6, [r3, #0]
 8006898:	6862      	ldr	r2, [r4, #4]
 800689a:	2100      	movs	r1, #0
 800689c:	4630      	mov	r0, r6
 800689e:	f7f9 fc9f 	bl	80001e0 <memchr>
 80068a2:	b108      	cbz	r0, 80068a8 <_printf_i+0x1e4>
 80068a4:	1b80      	subs	r0, r0, r6
 80068a6:	6060      	str	r0, [r4, #4]
 80068a8:	6863      	ldr	r3, [r4, #4]
 80068aa:	6123      	str	r3, [r4, #16]
 80068ac:	2300      	movs	r3, #0
 80068ae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068b2:	e7aa      	b.n	800680a <_printf_i+0x146>
 80068b4:	6923      	ldr	r3, [r4, #16]
 80068b6:	4632      	mov	r2, r6
 80068b8:	4649      	mov	r1, r9
 80068ba:	4640      	mov	r0, r8
 80068bc:	47d0      	blx	sl
 80068be:	3001      	adds	r0, #1
 80068c0:	d0ad      	beq.n	800681e <_printf_i+0x15a>
 80068c2:	6823      	ldr	r3, [r4, #0]
 80068c4:	079b      	lsls	r3, r3, #30
 80068c6:	d413      	bmi.n	80068f0 <_printf_i+0x22c>
 80068c8:	68e0      	ldr	r0, [r4, #12]
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	4298      	cmp	r0, r3
 80068ce:	bfb8      	it	lt
 80068d0:	4618      	movlt	r0, r3
 80068d2:	e7a6      	b.n	8006822 <_printf_i+0x15e>
 80068d4:	2301      	movs	r3, #1
 80068d6:	4632      	mov	r2, r6
 80068d8:	4649      	mov	r1, r9
 80068da:	4640      	mov	r0, r8
 80068dc:	47d0      	blx	sl
 80068de:	3001      	adds	r0, #1
 80068e0:	d09d      	beq.n	800681e <_printf_i+0x15a>
 80068e2:	3501      	adds	r5, #1
 80068e4:	68e3      	ldr	r3, [r4, #12]
 80068e6:	9903      	ldr	r1, [sp, #12]
 80068e8:	1a5b      	subs	r3, r3, r1
 80068ea:	42ab      	cmp	r3, r5
 80068ec:	dcf2      	bgt.n	80068d4 <_printf_i+0x210>
 80068ee:	e7eb      	b.n	80068c8 <_printf_i+0x204>
 80068f0:	2500      	movs	r5, #0
 80068f2:	f104 0619 	add.w	r6, r4, #25
 80068f6:	e7f5      	b.n	80068e4 <_printf_i+0x220>
 80068f8:	08009b6c 	.word	0x08009b6c
 80068fc:	08009b7d 	.word	0x08009b7d

08006900 <_scanf_float>:
 8006900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006904:	b087      	sub	sp, #28
 8006906:	4691      	mov	r9, r2
 8006908:	9303      	str	r3, [sp, #12]
 800690a:	688b      	ldr	r3, [r1, #8]
 800690c:	1e5a      	subs	r2, r3, #1
 800690e:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006912:	bf81      	itttt	hi
 8006914:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006918:	eb03 0b05 	addhi.w	fp, r3, r5
 800691c:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006920:	608b      	strhi	r3, [r1, #8]
 8006922:	680b      	ldr	r3, [r1, #0]
 8006924:	460a      	mov	r2, r1
 8006926:	f04f 0500 	mov.w	r5, #0
 800692a:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 800692e:	f842 3b1c 	str.w	r3, [r2], #28
 8006932:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006936:	4680      	mov	r8, r0
 8006938:	460c      	mov	r4, r1
 800693a:	bf98      	it	ls
 800693c:	f04f 0b00 	movls.w	fp, #0
 8006940:	9201      	str	r2, [sp, #4]
 8006942:	4616      	mov	r6, r2
 8006944:	46aa      	mov	sl, r5
 8006946:	462f      	mov	r7, r5
 8006948:	9502      	str	r5, [sp, #8]
 800694a:	68a2      	ldr	r2, [r4, #8]
 800694c:	b15a      	cbz	r2, 8006966 <_scanf_float+0x66>
 800694e:	f8d9 3000 	ldr.w	r3, [r9]
 8006952:	781b      	ldrb	r3, [r3, #0]
 8006954:	2b4e      	cmp	r3, #78	@ 0x4e
 8006956:	d863      	bhi.n	8006a20 <_scanf_float+0x120>
 8006958:	2b40      	cmp	r3, #64	@ 0x40
 800695a:	d83b      	bhi.n	80069d4 <_scanf_float+0xd4>
 800695c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006960:	b2c8      	uxtb	r0, r1
 8006962:	280e      	cmp	r0, #14
 8006964:	d939      	bls.n	80069da <_scanf_float+0xda>
 8006966:	b11f      	cbz	r7, 8006970 <_scanf_float+0x70>
 8006968:	6823      	ldr	r3, [r4, #0]
 800696a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800696e:	6023      	str	r3, [r4, #0]
 8006970:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006974:	f1ba 0f01 	cmp.w	sl, #1
 8006978:	f200 8114 	bhi.w	8006ba4 <_scanf_float+0x2a4>
 800697c:	9b01      	ldr	r3, [sp, #4]
 800697e:	429e      	cmp	r6, r3
 8006980:	f200 8105 	bhi.w	8006b8e <_scanf_float+0x28e>
 8006984:	2001      	movs	r0, #1
 8006986:	b007      	add	sp, #28
 8006988:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800698c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006990:	2a0d      	cmp	r2, #13
 8006992:	d8e8      	bhi.n	8006966 <_scanf_float+0x66>
 8006994:	a101      	add	r1, pc, #4	@ (adr r1, 800699c <_scanf_float+0x9c>)
 8006996:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800699a:	bf00      	nop
 800699c:	08006ae5 	.word	0x08006ae5
 80069a0:	08006967 	.word	0x08006967
 80069a4:	08006967 	.word	0x08006967
 80069a8:	08006967 	.word	0x08006967
 80069ac:	08006b41 	.word	0x08006b41
 80069b0:	08006b1b 	.word	0x08006b1b
 80069b4:	08006967 	.word	0x08006967
 80069b8:	08006967 	.word	0x08006967
 80069bc:	08006af3 	.word	0x08006af3
 80069c0:	08006967 	.word	0x08006967
 80069c4:	08006967 	.word	0x08006967
 80069c8:	08006967 	.word	0x08006967
 80069cc:	08006967 	.word	0x08006967
 80069d0:	08006aaf 	.word	0x08006aaf
 80069d4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80069d8:	e7da      	b.n	8006990 <_scanf_float+0x90>
 80069da:	290e      	cmp	r1, #14
 80069dc:	d8c3      	bhi.n	8006966 <_scanf_float+0x66>
 80069de:	a001      	add	r0, pc, #4	@ (adr r0, 80069e4 <_scanf_float+0xe4>)
 80069e0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80069e4:	08006a9f 	.word	0x08006a9f
 80069e8:	08006967 	.word	0x08006967
 80069ec:	08006a9f 	.word	0x08006a9f
 80069f0:	08006b2f 	.word	0x08006b2f
 80069f4:	08006967 	.word	0x08006967
 80069f8:	08006a41 	.word	0x08006a41
 80069fc:	08006a85 	.word	0x08006a85
 8006a00:	08006a85 	.word	0x08006a85
 8006a04:	08006a85 	.word	0x08006a85
 8006a08:	08006a85 	.word	0x08006a85
 8006a0c:	08006a85 	.word	0x08006a85
 8006a10:	08006a85 	.word	0x08006a85
 8006a14:	08006a85 	.word	0x08006a85
 8006a18:	08006a85 	.word	0x08006a85
 8006a1c:	08006a85 	.word	0x08006a85
 8006a20:	2b6e      	cmp	r3, #110	@ 0x6e
 8006a22:	d809      	bhi.n	8006a38 <_scanf_float+0x138>
 8006a24:	2b60      	cmp	r3, #96	@ 0x60
 8006a26:	d8b1      	bhi.n	800698c <_scanf_float+0x8c>
 8006a28:	2b54      	cmp	r3, #84	@ 0x54
 8006a2a:	d07b      	beq.n	8006b24 <_scanf_float+0x224>
 8006a2c:	2b59      	cmp	r3, #89	@ 0x59
 8006a2e:	d19a      	bne.n	8006966 <_scanf_float+0x66>
 8006a30:	2d07      	cmp	r5, #7
 8006a32:	d198      	bne.n	8006966 <_scanf_float+0x66>
 8006a34:	2508      	movs	r5, #8
 8006a36:	e02f      	b.n	8006a98 <_scanf_float+0x198>
 8006a38:	2b74      	cmp	r3, #116	@ 0x74
 8006a3a:	d073      	beq.n	8006b24 <_scanf_float+0x224>
 8006a3c:	2b79      	cmp	r3, #121	@ 0x79
 8006a3e:	e7f6      	b.n	8006a2e <_scanf_float+0x12e>
 8006a40:	6821      	ldr	r1, [r4, #0]
 8006a42:	05c8      	lsls	r0, r1, #23
 8006a44:	d51e      	bpl.n	8006a84 <_scanf_float+0x184>
 8006a46:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006a4a:	6021      	str	r1, [r4, #0]
 8006a4c:	3701      	adds	r7, #1
 8006a4e:	f1bb 0f00 	cmp.w	fp, #0
 8006a52:	d003      	beq.n	8006a5c <_scanf_float+0x15c>
 8006a54:	3201      	adds	r2, #1
 8006a56:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006a5a:	60a2      	str	r2, [r4, #8]
 8006a5c:	68a3      	ldr	r3, [r4, #8]
 8006a5e:	3b01      	subs	r3, #1
 8006a60:	60a3      	str	r3, [r4, #8]
 8006a62:	6923      	ldr	r3, [r4, #16]
 8006a64:	3301      	adds	r3, #1
 8006a66:	6123      	str	r3, [r4, #16]
 8006a68:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	f8c9 3004 	str.w	r3, [r9, #4]
 8006a74:	f340 8082 	ble.w	8006b7c <_scanf_float+0x27c>
 8006a78:	f8d9 3000 	ldr.w	r3, [r9]
 8006a7c:	3301      	adds	r3, #1
 8006a7e:	f8c9 3000 	str.w	r3, [r9]
 8006a82:	e762      	b.n	800694a <_scanf_float+0x4a>
 8006a84:	eb1a 0105 	adds.w	r1, sl, r5
 8006a88:	f47f af6d 	bne.w	8006966 <_scanf_float+0x66>
 8006a8c:	6822      	ldr	r2, [r4, #0]
 8006a8e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006a92:	6022      	str	r2, [r4, #0]
 8006a94:	460d      	mov	r5, r1
 8006a96:	468a      	mov	sl, r1
 8006a98:	f806 3b01 	strb.w	r3, [r6], #1
 8006a9c:	e7de      	b.n	8006a5c <_scanf_float+0x15c>
 8006a9e:	6822      	ldr	r2, [r4, #0]
 8006aa0:	0610      	lsls	r0, r2, #24
 8006aa2:	f57f af60 	bpl.w	8006966 <_scanf_float+0x66>
 8006aa6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006aaa:	6022      	str	r2, [r4, #0]
 8006aac:	e7f4      	b.n	8006a98 <_scanf_float+0x198>
 8006aae:	f1ba 0f00 	cmp.w	sl, #0
 8006ab2:	d10c      	bne.n	8006ace <_scanf_float+0x1ce>
 8006ab4:	b977      	cbnz	r7, 8006ad4 <_scanf_float+0x1d4>
 8006ab6:	6822      	ldr	r2, [r4, #0]
 8006ab8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006abc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006ac0:	d108      	bne.n	8006ad4 <_scanf_float+0x1d4>
 8006ac2:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ac6:	6022      	str	r2, [r4, #0]
 8006ac8:	f04f 0a01 	mov.w	sl, #1
 8006acc:	e7e4      	b.n	8006a98 <_scanf_float+0x198>
 8006ace:	f1ba 0f02 	cmp.w	sl, #2
 8006ad2:	d050      	beq.n	8006b76 <_scanf_float+0x276>
 8006ad4:	2d01      	cmp	r5, #1
 8006ad6:	d002      	beq.n	8006ade <_scanf_float+0x1de>
 8006ad8:	2d04      	cmp	r5, #4
 8006ada:	f47f af44 	bne.w	8006966 <_scanf_float+0x66>
 8006ade:	3501      	adds	r5, #1
 8006ae0:	b2ed      	uxtb	r5, r5
 8006ae2:	e7d9      	b.n	8006a98 <_scanf_float+0x198>
 8006ae4:	f1ba 0f01 	cmp.w	sl, #1
 8006ae8:	f47f af3d 	bne.w	8006966 <_scanf_float+0x66>
 8006aec:	f04f 0a02 	mov.w	sl, #2
 8006af0:	e7d2      	b.n	8006a98 <_scanf_float+0x198>
 8006af2:	b975      	cbnz	r5, 8006b12 <_scanf_float+0x212>
 8006af4:	2f00      	cmp	r7, #0
 8006af6:	f47f af37 	bne.w	8006968 <_scanf_float+0x68>
 8006afa:	6822      	ldr	r2, [r4, #0]
 8006afc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006b00:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006b04:	f040 8103 	bne.w	8006d0e <_scanf_float+0x40e>
 8006b08:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b0c:	6022      	str	r2, [r4, #0]
 8006b0e:	2501      	movs	r5, #1
 8006b10:	e7c2      	b.n	8006a98 <_scanf_float+0x198>
 8006b12:	2d03      	cmp	r5, #3
 8006b14:	d0e3      	beq.n	8006ade <_scanf_float+0x1de>
 8006b16:	2d05      	cmp	r5, #5
 8006b18:	e7df      	b.n	8006ada <_scanf_float+0x1da>
 8006b1a:	2d02      	cmp	r5, #2
 8006b1c:	f47f af23 	bne.w	8006966 <_scanf_float+0x66>
 8006b20:	2503      	movs	r5, #3
 8006b22:	e7b9      	b.n	8006a98 <_scanf_float+0x198>
 8006b24:	2d06      	cmp	r5, #6
 8006b26:	f47f af1e 	bne.w	8006966 <_scanf_float+0x66>
 8006b2a:	2507      	movs	r5, #7
 8006b2c:	e7b4      	b.n	8006a98 <_scanf_float+0x198>
 8006b2e:	6822      	ldr	r2, [r4, #0]
 8006b30:	0591      	lsls	r1, r2, #22
 8006b32:	f57f af18 	bpl.w	8006966 <_scanf_float+0x66>
 8006b36:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8006b3a:	6022      	str	r2, [r4, #0]
 8006b3c:	9702      	str	r7, [sp, #8]
 8006b3e:	e7ab      	b.n	8006a98 <_scanf_float+0x198>
 8006b40:	6822      	ldr	r2, [r4, #0]
 8006b42:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8006b46:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8006b4a:	d005      	beq.n	8006b58 <_scanf_float+0x258>
 8006b4c:	0550      	lsls	r0, r2, #21
 8006b4e:	f57f af0a 	bpl.w	8006966 <_scanf_float+0x66>
 8006b52:	2f00      	cmp	r7, #0
 8006b54:	f000 80db 	beq.w	8006d0e <_scanf_float+0x40e>
 8006b58:	0591      	lsls	r1, r2, #22
 8006b5a:	bf58      	it	pl
 8006b5c:	9902      	ldrpl	r1, [sp, #8]
 8006b5e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006b62:	bf58      	it	pl
 8006b64:	1a79      	subpl	r1, r7, r1
 8006b66:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8006b6a:	bf58      	it	pl
 8006b6c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8006b70:	6022      	str	r2, [r4, #0]
 8006b72:	2700      	movs	r7, #0
 8006b74:	e790      	b.n	8006a98 <_scanf_float+0x198>
 8006b76:	f04f 0a03 	mov.w	sl, #3
 8006b7a:	e78d      	b.n	8006a98 <_scanf_float+0x198>
 8006b7c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8006b80:	4649      	mov	r1, r9
 8006b82:	4640      	mov	r0, r8
 8006b84:	4798      	blx	r3
 8006b86:	2800      	cmp	r0, #0
 8006b88:	f43f aedf 	beq.w	800694a <_scanf_float+0x4a>
 8006b8c:	e6eb      	b.n	8006966 <_scanf_float+0x66>
 8006b8e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006b92:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006b96:	464a      	mov	r2, r9
 8006b98:	4640      	mov	r0, r8
 8006b9a:	4798      	blx	r3
 8006b9c:	6923      	ldr	r3, [r4, #16]
 8006b9e:	3b01      	subs	r3, #1
 8006ba0:	6123      	str	r3, [r4, #16]
 8006ba2:	e6eb      	b.n	800697c <_scanf_float+0x7c>
 8006ba4:	1e6b      	subs	r3, r5, #1
 8006ba6:	2b06      	cmp	r3, #6
 8006ba8:	d824      	bhi.n	8006bf4 <_scanf_float+0x2f4>
 8006baa:	2d02      	cmp	r5, #2
 8006bac:	d836      	bhi.n	8006c1c <_scanf_float+0x31c>
 8006bae:	9b01      	ldr	r3, [sp, #4]
 8006bb0:	429e      	cmp	r6, r3
 8006bb2:	f67f aee7 	bls.w	8006984 <_scanf_float+0x84>
 8006bb6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006bbe:	464a      	mov	r2, r9
 8006bc0:	4640      	mov	r0, r8
 8006bc2:	4798      	blx	r3
 8006bc4:	6923      	ldr	r3, [r4, #16]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	6123      	str	r3, [r4, #16]
 8006bca:	e7f0      	b.n	8006bae <_scanf_float+0x2ae>
 8006bcc:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006bd0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8006bd4:	464a      	mov	r2, r9
 8006bd6:	4640      	mov	r0, r8
 8006bd8:	4798      	blx	r3
 8006bda:	6923      	ldr	r3, [r4, #16]
 8006bdc:	3b01      	subs	r3, #1
 8006bde:	6123      	str	r3, [r4, #16]
 8006be0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006be4:	fa5f fa8a 	uxtb.w	sl, sl
 8006be8:	f1ba 0f02 	cmp.w	sl, #2
 8006bec:	d1ee      	bne.n	8006bcc <_scanf_float+0x2cc>
 8006bee:	3d03      	subs	r5, #3
 8006bf0:	b2ed      	uxtb	r5, r5
 8006bf2:	1b76      	subs	r6, r6, r5
 8006bf4:	6823      	ldr	r3, [r4, #0]
 8006bf6:	05da      	lsls	r2, r3, #23
 8006bf8:	d530      	bpl.n	8006c5c <_scanf_float+0x35c>
 8006bfa:	055b      	lsls	r3, r3, #21
 8006bfc:	d511      	bpl.n	8006c22 <_scanf_float+0x322>
 8006bfe:	9b01      	ldr	r3, [sp, #4]
 8006c00:	429e      	cmp	r6, r3
 8006c02:	f67f aebf 	bls.w	8006984 <_scanf_float+0x84>
 8006c06:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c0a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8006c0e:	464a      	mov	r2, r9
 8006c10:	4640      	mov	r0, r8
 8006c12:	4798      	blx	r3
 8006c14:	6923      	ldr	r3, [r4, #16]
 8006c16:	3b01      	subs	r3, #1
 8006c18:	6123      	str	r3, [r4, #16]
 8006c1a:	e7f0      	b.n	8006bfe <_scanf_float+0x2fe>
 8006c1c:	46aa      	mov	sl, r5
 8006c1e:	46b3      	mov	fp, r6
 8006c20:	e7de      	b.n	8006be0 <_scanf_float+0x2e0>
 8006c22:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8006c26:	6923      	ldr	r3, [r4, #16]
 8006c28:	2965      	cmp	r1, #101	@ 0x65
 8006c2a:	f103 33ff 	add.w	r3, r3, #4294967295
 8006c2e:	f106 35ff 	add.w	r5, r6, #4294967295
 8006c32:	6123      	str	r3, [r4, #16]
 8006c34:	d00c      	beq.n	8006c50 <_scanf_float+0x350>
 8006c36:	2945      	cmp	r1, #69	@ 0x45
 8006c38:	d00a      	beq.n	8006c50 <_scanf_float+0x350>
 8006c3a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c3e:	464a      	mov	r2, r9
 8006c40:	4640      	mov	r0, r8
 8006c42:	4798      	blx	r3
 8006c44:	6923      	ldr	r3, [r4, #16]
 8006c46:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	1eb5      	subs	r5, r6, #2
 8006c4e:	6123      	str	r3, [r4, #16]
 8006c50:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8006c54:	464a      	mov	r2, r9
 8006c56:	4640      	mov	r0, r8
 8006c58:	4798      	blx	r3
 8006c5a:	462e      	mov	r6, r5
 8006c5c:	6822      	ldr	r2, [r4, #0]
 8006c5e:	f012 0210 	ands.w	r2, r2, #16
 8006c62:	d001      	beq.n	8006c68 <_scanf_float+0x368>
 8006c64:	2000      	movs	r0, #0
 8006c66:	e68e      	b.n	8006986 <_scanf_float+0x86>
 8006c68:	7032      	strb	r2, [r6, #0]
 8006c6a:	6823      	ldr	r3, [r4, #0]
 8006c6c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8006c70:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006c74:	d125      	bne.n	8006cc2 <_scanf_float+0x3c2>
 8006c76:	9b02      	ldr	r3, [sp, #8]
 8006c78:	429f      	cmp	r7, r3
 8006c7a:	d00a      	beq.n	8006c92 <_scanf_float+0x392>
 8006c7c:	1bda      	subs	r2, r3, r7
 8006c7e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8006c82:	429e      	cmp	r6, r3
 8006c84:	bf28      	it	cs
 8006c86:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8006c8a:	4922      	ldr	r1, [pc, #136]	@ (8006d14 <_scanf_float+0x414>)
 8006c8c:	4630      	mov	r0, r6
 8006c8e:	f000 f907 	bl	8006ea0 <siprintf>
 8006c92:	9901      	ldr	r1, [sp, #4]
 8006c94:	2200      	movs	r2, #0
 8006c96:	4640      	mov	r0, r8
 8006c98:	f7ff f9ca 	bl	8006030 <_strtod_r>
 8006c9c:	9b03      	ldr	r3, [sp, #12]
 8006c9e:	6821      	ldr	r1, [r4, #0]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	f011 0f02 	tst.w	r1, #2
 8006ca6:	ec57 6b10 	vmov	r6, r7, d0
 8006caa:	f103 0204 	add.w	r2, r3, #4
 8006cae:	d015      	beq.n	8006cdc <_scanf_float+0x3dc>
 8006cb0:	9903      	ldr	r1, [sp, #12]
 8006cb2:	600a      	str	r2, [r1, #0]
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	e9c3 6700 	strd	r6, r7, [r3]
 8006cba:	68e3      	ldr	r3, [r4, #12]
 8006cbc:	3301      	adds	r3, #1
 8006cbe:	60e3      	str	r3, [r4, #12]
 8006cc0:	e7d0      	b.n	8006c64 <_scanf_float+0x364>
 8006cc2:	9b04      	ldr	r3, [sp, #16]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d0e4      	beq.n	8006c92 <_scanf_float+0x392>
 8006cc8:	9905      	ldr	r1, [sp, #20]
 8006cca:	230a      	movs	r3, #10
 8006ccc:	3101      	adds	r1, #1
 8006cce:	4640      	mov	r0, r8
 8006cd0:	f002 f9c6 	bl	8009060 <_strtol_r>
 8006cd4:	9b04      	ldr	r3, [sp, #16]
 8006cd6:	9e05      	ldr	r6, [sp, #20]
 8006cd8:	1ac2      	subs	r2, r0, r3
 8006cda:	e7d0      	b.n	8006c7e <_scanf_float+0x37e>
 8006cdc:	f011 0f04 	tst.w	r1, #4
 8006ce0:	9903      	ldr	r1, [sp, #12]
 8006ce2:	600a      	str	r2, [r1, #0]
 8006ce4:	d1e6      	bne.n	8006cb4 <_scanf_float+0x3b4>
 8006ce6:	681d      	ldr	r5, [r3, #0]
 8006ce8:	4632      	mov	r2, r6
 8006cea:	463b      	mov	r3, r7
 8006cec:	4630      	mov	r0, r6
 8006cee:	4639      	mov	r1, r7
 8006cf0:	f7f9 ff24 	bl	8000b3c <__aeabi_dcmpun>
 8006cf4:	b128      	cbz	r0, 8006d02 <_scanf_float+0x402>
 8006cf6:	4808      	ldr	r0, [pc, #32]	@ (8006d18 <_scanf_float+0x418>)
 8006cf8:	f000 f9e2 	bl	80070c0 <nanf>
 8006cfc:	ed85 0a00 	vstr	s0, [r5]
 8006d00:	e7db      	b.n	8006cba <_scanf_float+0x3ba>
 8006d02:	4630      	mov	r0, r6
 8006d04:	4639      	mov	r1, r7
 8006d06:	f7f9 ff77 	bl	8000bf8 <__aeabi_d2f>
 8006d0a:	6028      	str	r0, [r5, #0]
 8006d0c:	e7d5      	b.n	8006cba <_scanf_float+0x3ba>
 8006d0e:	2700      	movs	r7, #0
 8006d10:	e62e      	b.n	8006970 <_scanf_float+0x70>
 8006d12:	bf00      	nop
 8006d14:	08009b8e 	.word	0x08009b8e
 8006d18:	08009d2d 	.word	0x08009d2d

08006d1c <std>:
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	b510      	push	{r4, lr}
 8006d20:	4604      	mov	r4, r0
 8006d22:	e9c0 3300 	strd	r3, r3, [r0]
 8006d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d2a:	6083      	str	r3, [r0, #8]
 8006d2c:	8181      	strh	r1, [r0, #12]
 8006d2e:	6643      	str	r3, [r0, #100]	@ 0x64
 8006d30:	81c2      	strh	r2, [r0, #14]
 8006d32:	6183      	str	r3, [r0, #24]
 8006d34:	4619      	mov	r1, r3
 8006d36:	2208      	movs	r2, #8
 8006d38:	305c      	adds	r0, #92	@ 0x5c
 8006d3a:	f000 f916 	bl	8006f6a <memset>
 8006d3e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d74 <std+0x58>)
 8006d40:	6263      	str	r3, [r4, #36]	@ 0x24
 8006d42:	4b0d      	ldr	r3, [pc, #52]	@ (8006d78 <std+0x5c>)
 8006d44:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006d46:	4b0d      	ldr	r3, [pc, #52]	@ (8006d7c <std+0x60>)
 8006d48:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006d4a:	4b0d      	ldr	r3, [pc, #52]	@ (8006d80 <std+0x64>)
 8006d4c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006d4e:	4b0d      	ldr	r3, [pc, #52]	@ (8006d84 <std+0x68>)
 8006d50:	6224      	str	r4, [r4, #32]
 8006d52:	429c      	cmp	r4, r3
 8006d54:	d006      	beq.n	8006d64 <std+0x48>
 8006d56:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006d5a:	4294      	cmp	r4, r2
 8006d5c:	d002      	beq.n	8006d64 <std+0x48>
 8006d5e:	33d0      	adds	r3, #208	@ 0xd0
 8006d60:	429c      	cmp	r4, r3
 8006d62:	d105      	bne.n	8006d70 <std+0x54>
 8006d64:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006d6c:	f000 b98c 	b.w	8007088 <__retarget_lock_init_recursive>
 8006d70:	bd10      	pop	{r4, pc}
 8006d72:	bf00      	nop
 8006d74:	08006ee5 	.word	0x08006ee5
 8006d78:	08006f07 	.word	0x08006f07
 8006d7c:	08006f3f 	.word	0x08006f3f
 8006d80:	08006f63 	.word	0x08006f63
 8006d84:	20000434 	.word	0x20000434

08006d88 <stdio_exit_handler>:
 8006d88:	4a02      	ldr	r2, [pc, #8]	@ (8006d94 <stdio_exit_handler+0xc>)
 8006d8a:	4903      	ldr	r1, [pc, #12]	@ (8006d98 <stdio_exit_handler+0x10>)
 8006d8c:	4803      	ldr	r0, [pc, #12]	@ (8006d9c <stdio_exit_handler+0x14>)
 8006d8e:	f000 b869 	b.w	8006e64 <_fwalk_sglue>
 8006d92:	bf00      	nop
 8006d94:	2000000c 	.word	0x2000000c
 8006d98:	08009435 	.word	0x08009435
 8006d9c:	20000188 	.word	0x20000188

08006da0 <cleanup_stdio>:
 8006da0:	6841      	ldr	r1, [r0, #4]
 8006da2:	4b0c      	ldr	r3, [pc, #48]	@ (8006dd4 <cleanup_stdio+0x34>)
 8006da4:	4299      	cmp	r1, r3
 8006da6:	b510      	push	{r4, lr}
 8006da8:	4604      	mov	r4, r0
 8006daa:	d001      	beq.n	8006db0 <cleanup_stdio+0x10>
 8006dac:	f002 fb42 	bl	8009434 <_fflush_r>
 8006db0:	68a1      	ldr	r1, [r4, #8]
 8006db2:	4b09      	ldr	r3, [pc, #36]	@ (8006dd8 <cleanup_stdio+0x38>)
 8006db4:	4299      	cmp	r1, r3
 8006db6:	d002      	beq.n	8006dbe <cleanup_stdio+0x1e>
 8006db8:	4620      	mov	r0, r4
 8006dba:	f002 fb3b 	bl	8009434 <_fflush_r>
 8006dbe:	68e1      	ldr	r1, [r4, #12]
 8006dc0:	4b06      	ldr	r3, [pc, #24]	@ (8006ddc <cleanup_stdio+0x3c>)
 8006dc2:	4299      	cmp	r1, r3
 8006dc4:	d004      	beq.n	8006dd0 <cleanup_stdio+0x30>
 8006dc6:	4620      	mov	r0, r4
 8006dc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006dcc:	f002 bb32 	b.w	8009434 <_fflush_r>
 8006dd0:	bd10      	pop	{r4, pc}
 8006dd2:	bf00      	nop
 8006dd4:	20000434 	.word	0x20000434
 8006dd8:	2000049c 	.word	0x2000049c
 8006ddc:	20000504 	.word	0x20000504

08006de0 <global_stdio_init.part.0>:
 8006de0:	b510      	push	{r4, lr}
 8006de2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <global_stdio_init.part.0+0x30>)
 8006de4:	4c0b      	ldr	r4, [pc, #44]	@ (8006e14 <global_stdio_init.part.0+0x34>)
 8006de6:	4a0c      	ldr	r2, [pc, #48]	@ (8006e18 <global_stdio_init.part.0+0x38>)
 8006de8:	601a      	str	r2, [r3, #0]
 8006dea:	4620      	mov	r0, r4
 8006dec:	2200      	movs	r2, #0
 8006dee:	2104      	movs	r1, #4
 8006df0:	f7ff ff94 	bl	8006d1c <std>
 8006df4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006df8:	2201      	movs	r2, #1
 8006dfa:	2109      	movs	r1, #9
 8006dfc:	f7ff ff8e 	bl	8006d1c <std>
 8006e00:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006e04:	2202      	movs	r2, #2
 8006e06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e0a:	2112      	movs	r1, #18
 8006e0c:	f7ff bf86 	b.w	8006d1c <std>
 8006e10:	2000056c 	.word	0x2000056c
 8006e14:	20000434 	.word	0x20000434
 8006e18:	08006d89 	.word	0x08006d89

08006e1c <__sfp_lock_acquire>:
 8006e1c:	4801      	ldr	r0, [pc, #4]	@ (8006e24 <__sfp_lock_acquire+0x8>)
 8006e1e:	f000 b934 	b.w	800708a <__retarget_lock_acquire_recursive>
 8006e22:	bf00      	nop
 8006e24:	20000575 	.word	0x20000575

08006e28 <__sfp_lock_release>:
 8006e28:	4801      	ldr	r0, [pc, #4]	@ (8006e30 <__sfp_lock_release+0x8>)
 8006e2a:	f000 b92f 	b.w	800708c <__retarget_lock_release_recursive>
 8006e2e:	bf00      	nop
 8006e30:	20000575 	.word	0x20000575

08006e34 <__sinit>:
 8006e34:	b510      	push	{r4, lr}
 8006e36:	4604      	mov	r4, r0
 8006e38:	f7ff fff0 	bl	8006e1c <__sfp_lock_acquire>
 8006e3c:	6a23      	ldr	r3, [r4, #32]
 8006e3e:	b11b      	cbz	r3, 8006e48 <__sinit+0x14>
 8006e40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006e44:	f7ff bff0 	b.w	8006e28 <__sfp_lock_release>
 8006e48:	4b04      	ldr	r3, [pc, #16]	@ (8006e5c <__sinit+0x28>)
 8006e4a:	6223      	str	r3, [r4, #32]
 8006e4c:	4b04      	ldr	r3, [pc, #16]	@ (8006e60 <__sinit+0x2c>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1f5      	bne.n	8006e40 <__sinit+0xc>
 8006e54:	f7ff ffc4 	bl	8006de0 <global_stdio_init.part.0>
 8006e58:	e7f2      	b.n	8006e40 <__sinit+0xc>
 8006e5a:	bf00      	nop
 8006e5c:	08006da1 	.word	0x08006da1
 8006e60:	2000056c 	.word	0x2000056c

08006e64 <_fwalk_sglue>:
 8006e64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e68:	4607      	mov	r7, r0
 8006e6a:	4688      	mov	r8, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	2600      	movs	r6, #0
 8006e70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006e74:	f1b9 0901 	subs.w	r9, r9, #1
 8006e78:	d505      	bpl.n	8006e86 <_fwalk_sglue+0x22>
 8006e7a:	6824      	ldr	r4, [r4, #0]
 8006e7c:	2c00      	cmp	r4, #0
 8006e7e:	d1f7      	bne.n	8006e70 <_fwalk_sglue+0xc>
 8006e80:	4630      	mov	r0, r6
 8006e82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e86:	89ab      	ldrh	r3, [r5, #12]
 8006e88:	2b01      	cmp	r3, #1
 8006e8a:	d907      	bls.n	8006e9c <_fwalk_sglue+0x38>
 8006e8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006e90:	3301      	adds	r3, #1
 8006e92:	d003      	beq.n	8006e9c <_fwalk_sglue+0x38>
 8006e94:	4629      	mov	r1, r5
 8006e96:	4638      	mov	r0, r7
 8006e98:	47c0      	blx	r8
 8006e9a:	4306      	orrs	r6, r0
 8006e9c:	3568      	adds	r5, #104	@ 0x68
 8006e9e:	e7e9      	b.n	8006e74 <_fwalk_sglue+0x10>

08006ea0 <siprintf>:
 8006ea0:	b40e      	push	{r1, r2, r3}
 8006ea2:	b510      	push	{r4, lr}
 8006ea4:	b09d      	sub	sp, #116	@ 0x74
 8006ea6:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ea8:	9002      	str	r0, [sp, #8]
 8006eaa:	9006      	str	r0, [sp, #24]
 8006eac:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006eb0:	480a      	ldr	r0, [pc, #40]	@ (8006edc <siprintf+0x3c>)
 8006eb2:	9107      	str	r1, [sp, #28]
 8006eb4:	9104      	str	r1, [sp, #16]
 8006eb6:	490a      	ldr	r1, [pc, #40]	@ (8006ee0 <siprintf+0x40>)
 8006eb8:	f853 2b04 	ldr.w	r2, [r3], #4
 8006ebc:	9105      	str	r1, [sp, #20]
 8006ebe:	2400      	movs	r4, #0
 8006ec0:	a902      	add	r1, sp, #8
 8006ec2:	6800      	ldr	r0, [r0, #0]
 8006ec4:	9301      	str	r3, [sp, #4]
 8006ec6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006ec8:	f002 f934 	bl	8009134 <_svfiprintf_r>
 8006ecc:	9b02      	ldr	r3, [sp, #8]
 8006ece:	701c      	strb	r4, [r3, #0]
 8006ed0:	b01d      	add	sp, #116	@ 0x74
 8006ed2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ed6:	b003      	add	sp, #12
 8006ed8:	4770      	bx	lr
 8006eda:	bf00      	nop
 8006edc:	20000184 	.word	0x20000184
 8006ee0:	ffff0208 	.word	0xffff0208

08006ee4 <__sread>:
 8006ee4:	b510      	push	{r4, lr}
 8006ee6:	460c      	mov	r4, r1
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	f000 f87e 	bl	8006fec <_read_r>
 8006ef0:	2800      	cmp	r0, #0
 8006ef2:	bfab      	itete	ge
 8006ef4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006ef6:	89a3      	ldrhlt	r3, [r4, #12]
 8006ef8:	181b      	addge	r3, r3, r0
 8006efa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006efe:	bfac      	ite	ge
 8006f00:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006f02:	81a3      	strhlt	r3, [r4, #12]
 8006f04:	bd10      	pop	{r4, pc}

08006f06 <__swrite>:
 8006f06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f0a:	461f      	mov	r7, r3
 8006f0c:	898b      	ldrh	r3, [r1, #12]
 8006f0e:	05db      	lsls	r3, r3, #23
 8006f10:	4605      	mov	r5, r0
 8006f12:	460c      	mov	r4, r1
 8006f14:	4616      	mov	r6, r2
 8006f16:	d505      	bpl.n	8006f24 <__swrite+0x1e>
 8006f18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f1c:	2302      	movs	r3, #2
 8006f1e:	2200      	movs	r2, #0
 8006f20:	f000 f852 	bl	8006fc8 <_lseek_r>
 8006f24:	89a3      	ldrh	r3, [r4, #12]
 8006f26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f2a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006f2e:	81a3      	strh	r3, [r4, #12]
 8006f30:	4632      	mov	r2, r6
 8006f32:	463b      	mov	r3, r7
 8006f34:	4628      	mov	r0, r5
 8006f36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f3a:	f000 b869 	b.w	8007010 <_write_r>

08006f3e <__sseek>:
 8006f3e:	b510      	push	{r4, lr}
 8006f40:	460c      	mov	r4, r1
 8006f42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f46:	f000 f83f 	bl	8006fc8 <_lseek_r>
 8006f4a:	1c43      	adds	r3, r0, #1
 8006f4c:	89a3      	ldrh	r3, [r4, #12]
 8006f4e:	bf15      	itete	ne
 8006f50:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006f52:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006f56:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006f5a:	81a3      	strheq	r3, [r4, #12]
 8006f5c:	bf18      	it	ne
 8006f5e:	81a3      	strhne	r3, [r4, #12]
 8006f60:	bd10      	pop	{r4, pc}

08006f62 <__sclose>:
 8006f62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f66:	f000 b81f 	b.w	8006fa8 <_close_r>

08006f6a <memset>:
 8006f6a:	4402      	add	r2, r0
 8006f6c:	4603      	mov	r3, r0
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d100      	bne.n	8006f74 <memset+0xa>
 8006f72:	4770      	bx	lr
 8006f74:	f803 1b01 	strb.w	r1, [r3], #1
 8006f78:	e7f9      	b.n	8006f6e <memset+0x4>

08006f7a <strncmp>:
 8006f7a:	b510      	push	{r4, lr}
 8006f7c:	b16a      	cbz	r2, 8006f9a <strncmp+0x20>
 8006f7e:	3901      	subs	r1, #1
 8006f80:	1884      	adds	r4, r0, r2
 8006f82:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006f86:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d103      	bne.n	8006f96 <strncmp+0x1c>
 8006f8e:	42a0      	cmp	r0, r4
 8006f90:	d001      	beq.n	8006f96 <strncmp+0x1c>
 8006f92:	2a00      	cmp	r2, #0
 8006f94:	d1f5      	bne.n	8006f82 <strncmp+0x8>
 8006f96:	1ad0      	subs	r0, r2, r3
 8006f98:	bd10      	pop	{r4, pc}
 8006f9a:	4610      	mov	r0, r2
 8006f9c:	e7fc      	b.n	8006f98 <strncmp+0x1e>
	...

08006fa0 <_localeconv_r>:
 8006fa0:	4800      	ldr	r0, [pc, #0]	@ (8006fa4 <_localeconv_r+0x4>)
 8006fa2:	4770      	bx	lr
 8006fa4:	20000108 	.word	0x20000108

08006fa8 <_close_r>:
 8006fa8:	b538      	push	{r3, r4, r5, lr}
 8006faa:	4d06      	ldr	r5, [pc, #24]	@ (8006fc4 <_close_r+0x1c>)
 8006fac:	2300      	movs	r3, #0
 8006fae:	4604      	mov	r4, r0
 8006fb0:	4608      	mov	r0, r1
 8006fb2:	602b      	str	r3, [r5, #0]
 8006fb4:	f7fb f9ae 	bl	8002314 <_close>
 8006fb8:	1c43      	adds	r3, r0, #1
 8006fba:	d102      	bne.n	8006fc2 <_close_r+0x1a>
 8006fbc:	682b      	ldr	r3, [r5, #0]
 8006fbe:	b103      	cbz	r3, 8006fc2 <_close_r+0x1a>
 8006fc0:	6023      	str	r3, [r4, #0]
 8006fc2:	bd38      	pop	{r3, r4, r5, pc}
 8006fc4:	20000570 	.word	0x20000570

08006fc8 <_lseek_r>:
 8006fc8:	b538      	push	{r3, r4, r5, lr}
 8006fca:	4d07      	ldr	r5, [pc, #28]	@ (8006fe8 <_lseek_r+0x20>)
 8006fcc:	4604      	mov	r4, r0
 8006fce:	4608      	mov	r0, r1
 8006fd0:	4611      	mov	r1, r2
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	602a      	str	r2, [r5, #0]
 8006fd6:	461a      	mov	r2, r3
 8006fd8:	f7fb f9c3 	bl	8002362 <_lseek>
 8006fdc:	1c43      	adds	r3, r0, #1
 8006fde:	d102      	bne.n	8006fe6 <_lseek_r+0x1e>
 8006fe0:	682b      	ldr	r3, [r5, #0]
 8006fe2:	b103      	cbz	r3, 8006fe6 <_lseek_r+0x1e>
 8006fe4:	6023      	str	r3, [r4, #0]
 8006fe6:	bd38      	pop	{r3, r4, r5, pc}
 8006fe8:	20000570 	.word	0x20000570

08006fec <_read_r>:
 8006fec:	b538      	push	{r3, r4, r5, lr}
 8006fee:	4d07      	ldr	r5, [pc, #28]	@ (800700c <_read_r+0x20>)
 8006ff0:	4604      	mov	r4, r0
 8006ff2:	4608      	mov	r0, r1
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	2200      	movs	r2, #0
 8006ff8:	602a      	str	r2, [r5, #0]
 8006ffa:	461a      	mov	r2, r3
 8006ffc:	f7fb f951 	bl	80022a2 <_read>
 8007000:	1c43      	adds	r3, r0, #1
 8007002:	d102      	bne.n	800700a <_read_r+0x1e>
 8007004:	682b      	ldr	r3, [r5, #0]
 8007006:	b103      	cbz	r3, 800700a <_read_r+0x1e>
 8007008:	6023      	str	r3, [r4, #0]
 800700a:	bd38      	pop	{r3, r4, r5, pc}
 800700c:	20000570 	.word	0x20000570

08007010 <_write_r>:
 8007010:	b538      	push	{r3, r4, r5, lr}
 8007012:	4d07      	ldr	r5, [pc, #28]	@ (8007030 <_write_r+0x20>)
 8007014:	4604      	mov	r4, r0
 8007016:	4608      	mov	r0, r1
 8007018:	4611      	mov	r1, r2
 800701a:	2200      	movs	r2, #0
 800701c:	602a      	str	r2, [r5, #0]
 800701e:	461a      	mov	r2, r3
 8007020:	f7fb f95c 	bl	80022dc <_write>
 8007024:	1c43      	adds	r3, r0, #1
 8007026:	d102      	bne.n	800702e <_write_r+0x1e>
 8007028:	682b      	ldr	r3, [r5, #0]
 800702a:	b103      	cbz	r3, 800702e <_write_r+0x1e>
 800702c:	6023      	str	r3, [r4, #0]
 800702e:	bd38      	pop	{r3, r4, r5, pc}
 8007030:	20000570 	.word	0x20000570

08007034 <__errno>:
 8007034:	4b01      	ldr	r3, [pc, #4]	@ (800703c <__errno+0x8>)
 8007036:	6818      	ldr	r0, [r3, #0]
 8007038:	4770      	bx	lr
 800703a:	bf00      	nop
 800703c:	20000184 	.word	0x20000184

08007040 <__libc_init_array>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4d0d      	ldr	r5, [pc, #52]	@ (8007078 <__libc_init_array+0x38>)
 8007044:	4c0d      	ldr	r4, [pc, #52]	@ (800707c <__libc_init_array+0x3c>)
 8007046:	1b64      	subs	r4, r4, r5
 8007048:	10a4      	asrs	r4, r4, #2
 800704a:	2600      	movs	r6, #0
 800704c:	42a6      	cmp	r6, r4
 800704e:	d109      	bne.n	8007064 <__libc_init_array+0x24>
 8007050:	4d0b      	ldr	r5, [pc, #44]	@ (8007080 <__libc_init_array+0x40>)
 8007052:	4c0c      	ldr	r4, [pc, #48]	@ (8007084 <__libc_init_array+0x44>)
 8007054:	f002 fd5e 	bl	8009b14 <_init>
 8007058:	1b64      	subs	r4, r4, r5
 800705a:	10a4      	asrs	r4, r4, #2
 800705c:	2600      	movs	r6, #0
 800705e:	42a6      	cmp	r6, r4
 8007060:	d105      	bne.n	800706e <__libc_init_array+0x2e>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	f855 3b04 	ldr.w	r3, [r5], #4
 8007068:	4798      	blx	r3
 800706a:	3601      	adds	r6, #1
 800706c:	e7ee      	b.n	800704c <__libc_init_array+0xc>
 800706e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007072:	4798      	blx	r3
 8007074:	3601      	adds	r6, #1
 8007076:	e7f2      	b.n	800705e <__libc_init_array+0x1e>
 8007078:	08009f8c 	.word	0x08009f8c
 800707c:	08009f8c 	.word	0x08009f8c
 8007080:	08009f8c 	.word	0x08009f8c
 8007084:	08009f90 	.word	0x08009f90

08007088 <__retarget_lock_init_recursive>:
 8007088:	4770      	bx	lr

0800708a <__retarget_lock_acquire_recursive>:
 800708a:	4770      	bx	lr

0800708c <__retarget_lock_release_recursive>:
 800708c:	4770      	bx	lr

0800708e <memcpy>:
 800708e:	440a      	add	r2, r1
 8007090:	4291      	cmp	r1, r2
 8007092:	f100 33ff 	add.w	r3, r0, #4294967295
 8007096:	d100      	bne.n	800709a <memcpy+0xc>
 8007098:	4770      	bx	lr
 800709a:	b510      	push	{r4, lr}
 800709c:	f811 4b01 	ldrb.w	r4, [r1], #1
 80070a0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80070a4:	4291      	cmp	r1, r2
 80070a6:	d1f9      	bne.n	800709c <memcpy+0xe>
 80070a8:	bd10      	pop	{r4, pc}
 80070aa:	0000      	movs	r0, r0
 80070ac:	0000      	movs	r0, r0
	...

080070b0 <nan>:
 80070b0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 80070b8 <nan+0x8>
 80070b4:	4770      	bx	lr
 80070b6:	bf00      	nop
 80070b8:	00000000 	.word	0x00000000
 80070bc:	7ff80000 	.word	0x7ff80000

080070c0 <nanf>:
 80070c0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80070c8 <nanf+0x8>
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	7fc00000 	.word	0x7fc00000

080070cc <quorem>:
 80070cc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070d0:	6903      	ldr	r3, [r0, #16]
 80070d2:	690c      	ldr	r4, [r1, #16]
 80070d4:	42a3      	cmp	r3, r4
 80070d6:	4607      	mov	r7, r0
 80070d8:	db7e      	blt.n	80071d8 <quorem+0x10c>
 80070da:	3c01      	subs	r4, #1
 80070dc:	f101 0814 	add.w	r8, r1, #20
 80070e0:	00a3      	lsls	r3, r4, #2
 80070e2:	f100 0514 	add.w	r5, r0, #20
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80070ec:	9301      	str	r3, [sp, #4]
 80070ee:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80070f2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80070f6:	3301      	adds	r3, #1
 80070f8:	429a      	cmp	r2, r3
 80070fa:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80070fe:	fbb2 f6f3 	udiv	r6, r2, r3
 8007102:	d32e      	bcc.n	8007162 <quorem+0x96>
 8007104:	f04f 0a00 	mov.w	sl, #0
 8007108:	46c4      	mov	ip, r8
 800710a:	46ae      	mov	lr, r5
 800710c:	46d3      	mov	fp, sl
 800710e:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007112:	b298      	uxth	r0, r3
 8007114:	fb06 a000 	mla	r0, r6, r0, sl
 8007118:	0c02      	lsrs	r2, r0, #16
 800711a:	0c1b      	lsrs	r3, r3, #16
 800711c:	fb06 2303 	mla	r3, r6, r3, r2
 8007120:	f8de 2000 	ldr.w	r2, [lr]
 8007124:	b280      	uxth	r0, r0
 8007126:	b292      	uxth	r2, r2
 8007128:	1a12      	subs	r2, r2, r0
 800712a:	445a      	add	r2, fp
 800712c:	f8de 0000 	ldr.w	r0, [lr]
 8007130:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007134:	b29b      	uxth	r3, r3
 8007136:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800713a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800713e:	b292      	uxth	r2, r2
 8007140:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007144:	45e1      	cmp	r9, ip
 8007146:	f84e 2b04 	str.w	r2, [lr], #4
 800714a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800714e:	d2de      	bcs.n	800710e <quorem+0x42>
 8007150:	9b00      	ldr	r3, [sp, #0]
 8007152:	58eb      	ldr	r3, [r5, r3]
 8007154:	b92b      	cbnz	r3, 8007162 <quorem+0x96>
 8007156:	9b01      	ldr	r3, [sp, #4]
 8007158:	3b04      	subs	r3, #4
 800715a:	429d      	cmp	r5, r3
 800715c:	461a      	mov	r2, r3
 800715e:	d32f      	bcc.n	80071c0 <quorem+0xf4>
 8007160:	613c      	str	r4, [r7, #16]
 8007162:	4638      	mov	r0, r7
 8007164:	f001 fd14 	bl	8008b90 <__mcmp>
 8007168:	2800      	cmp	r0, #0
 800716a:	db25      	blt.n	80071b8 <quorem+0xec>
 800716c:	4629      	mov	r1, r5
 800716e:	2000      	movs	r0, #0
 8007170:	f858 2b04 	ldr.w	r2, [r8], #4
 8007174:	f8d1 c000 	ldr.w	ip, [r1]
 8007178:	fa1f fe82 	uxth.w	lr, r2
 800717c:	fa1f f38c 	uxth.w	r3, ip
 8007180:	eba3 030e 	sub.w	r3, r3, lr
 8007184:	4403      	add	r3, r0
 8007186:	0c12      	lsrs	r2, r2, #16
 8007188:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800718c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007190:	b29b      	uxth	r3, r3
 8007192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007196:	45c1      	cmp	r9, r8
 8007198:	f841 3b04 	str.w	r3, [r1], #4
 800719c:	ea4f 4022 	mov.w	r0, r2, asr #16
 80071a0:	d2e6      	bcs.n	8007170 <quorem+0xa4>
 80071a2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80071a6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80071aa:	b922      	cbnz	r2, 80071b6 <quorem+0xea>
 80071ac:	3b04      	subs	r3, #4
 80071ae:	429d      	cmp	r5, r3
 80071b0:	461a      	mov	r2, r3
 80071b2:	d30b      	bcc.n	80071cc <quorem+0x100>
 80071b4:	613c      	str	r4, [r7, #16]
 80071b6:	3601      	adds	r6, #1
 80071b8:	4630      	mov	r0, r6
 80071ba:	b003      	add	sp, #12
 80071bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80071c0:	6812      	ldr	r2, [r2, #0]
 80071c2:	3b04      	subs	r3, #4
 80071c4:	2a00      	cmp	r2, #0
 80071c6:	d1cb      	bne.n	8007160 <quorem+0x94>
 80071c8:	3c01      	subs	r4, #1
 80071ca:	e7c6      	b.n	800715a <quorem+0x8e>
 80071cc:	6812      	ldr	r2, [r2, #0]
 80071ce:	3b04      	subs	r3, #4
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	d1ef      	bne.n	80071b4 <quorem+0xe8>
 80071d4:	3c01      	subs	r4, #1
 80071d6:	e7ea      	b.n	80071ae <quorem+0xe2>
 80071d8:	2000      	movs	r0, #0
 80071da:	e7ee      	b.n	80071ba <quorem+0xee>
 80071dc:	0000      	movs	r0, r0
	...

080071e0 <_dtoa_r>:
 80071e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e4:	69c7      	ldr	r7, [r0, #28]
 80071e6:	b097      	sub	sp, #92	@ 0x5c
 80071e8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80071ec:	ec55 4b10 	vmov	r4, r5, d0
 80071f0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80071f2:	9107      	str	r1, [sp, #28]
 80071f4:	4681      	mov	r9, r0
 80071f6:	920c      	str	r2, [sp, #48]	@ 0x30
 80071f8:	9311      	str	r3, [sp, #68]	@ 0x44
 80071fa:	b97f      	cbnz	r7, 800721c <_dtoa_r+0x3c>
 80071fc:	2010      	movs	r0, #16
 80071fe:	f001 f943 	bl	8008488 <malloc>
 8007202:	4602      	mov	r2, r0
 8007204:	f8c9 001c 	str.w	r0, [r9, #28]
 8007208:	b920      	cbnz	r0, 8007214 <_dtoa_r+0x34>
 800720a:	4ba9      	ldr	r3, [pc, #676]	@ (80074b0 <_dtoa_r+0x2d0>)
 800720c:	21ef      	movs	r1, #239	@ 0xef
 800720e:	48a9      	ldr	r0, [pc, #676]	@ (80074b4 <_dtoa_r+0x2d4>)
 8007210:	f002 f962 	bl	80094d8 <__assert_func>
 8007214:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007218:	6007      	str	r7, [r0, #0]
 800721a:	60c7      	str	r7, [r0, #12]
 800721c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007220:	6819      	ldr	r1, [r3, #0]
 8007222:	b159      	cbz	r1, 800723c <_dtoa_r+0x5c>
 8007224:	685a      	ldr	r2, [r3, #4]
 8007226:	604a      	str	r2, [r1, #4]
 8007228:	2301      	movs	r3, #1
 800722a:	4093      	lsls	r3, r2
 800722c:	608b      	str	r3, [r1, #8]
 800722e:	4648      	mov	r0, r9
 8007230:	f001 fa32 	bl	8008698 <_Bfree>
 8007234:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007238:	2200      	movs	r2, #0
 800723a:	601a      	str	r2, [r3, #0]
 800723c:	1e2b      	subs	r3, r5, #0
 800723e:	bfb9      	ittee	lt
 8007240:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007244:	9305      	strlt	r3, [sp, #20]
 8007246:	2300      	movge	r3, #0
 8007248:	6033      	strge	r3, [r6, #0]
 800724a:	9f05      	ldr	r7, [sp, #20]
 800724c:	4b9a      	ldr	r3, [pc, #616]	@ (80074b8 <_dtoa_r+0x2d8>)
 800724e:	bfbc      	itt	lt
 8007250:	2201      	movlt	r2, #1
 8007252:	6032      	strlt	r2, [r6, #0]
 8007254:	43bb      	bics	r3, r7
 8007256:	d112      	bne.n	800727e <_dtoa_r+0x9e>
 8007258:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800725a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800725e:	6013      	str	r3, [r2, #0]
 8007260:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007264:	4323      	orrs	r3, r4
 8007266:	f000 855a 	beq.w	8007d1e <_dtoa_r+0xb3e>
 800726a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800726c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80074cc <_dtoa_r+0x2ec>
 8007270:	2b00      	cmp	r3, #0
 8007272:	f000 855c 	beq.w	8007d2e <_dtoa_r+0xb4e>
 8007276:	f10a 0303 	add.w	r3, sl, #3
 800727a:	f000 bd56 	b.w	8007d2a <_dtoa_r+0xb4a>
 800727e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007282:	2200      	movs	r2, #0
 8007284:	ec51 0b17 	vmov	r0, r1, d7
 8007288:	2300      	movs	r3, #0
 800728a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800728e:	f7f9 fc23 	bl	8000ad8 <__aeabi_dcmpeq>
 8007292:	4680      	mov	r8, r0
 8007294:	b158      	cbz	r0, 80072ae <_dtoa_r+0xce>
 8007296:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007298:	2301      	movs	r3, #1
 800729a:	6013      	str	r3, [r2, #0]
 800729c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800729e:	b113      	cbz	r3, 80072a6 <_dtoa_r+0xc6>
 80072a0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80072a2:	4b86      	ldr	r3, [pc, #536]	@ (80074bc <_dtoa_r+0x2dc>)
 80072a4:	6013      	str	r3, [r2, #0]
 80072a6:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80074d0 <_dtoa_r+0x2f0>
 80072aa:	f000 bd40 	b.w	8007d2e <_dtoa_r+0xb4e>
 80072ae:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 80072b2:	aa14      	add	r2, sp, #80	@ 0x50
 80072b4:	a915      	add	r1, sp, #84	@ 0x54
 80072b6:	4648      	mov	r0, r9
 80072b8:	f001 fd8a 	bl	8008dd0 <__d2b>
 80072bc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80072c0:	9002      	str	r0, [sp, #8]
 80072c2:	2e00      	cmp	r6, #0
 80072c4:	d078      	beq.n	80073b8 <_dtoa_r+0x1d8>
 80072c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072c8:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80072cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80072d0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80072d4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80072d8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80072dc:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80072e0:	4619      	mov	r1, r3
 80072e2:	2200      	movs	r2, #0
 80072e4:	4b76      	ldr	r3, [pc, #472]	@ (80074c0 <_dtoa_r+0x2e0>)
 80072e6:	f7f8 ffd7 	bl	8000298 <__aeabi_dsub>
 80072ea:	a36b      	add	r3, pc, #428	@ (adr r3, 8007498 <_dtoa_r+0x2b8>)
 80072ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072f0:	f7f9 f98a 	bl	8000608 <__aeabi_dmul>
 80072f4:	a36a      	add	r3, pc, #424	@ (adr r3, 80074a0 <_dtoa_r+0x2c0>)
 80072f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80072fa:	f7f8 ffcf 	bl	800029c <__adddf3>
 80072fe:	4604      	mov	r4, r0
 8007300:	4630      	mov	r0, r6
 8007302:	460d      	mov	r5, r1
 8007304:	f7f9 f916 	bl	8000534 <__aeabi_i2d>
 8007308:	a367      	add	r3, pc, #412	@ (adr r3, 80074a8 <_dtoa_r+0x2c8>)
 800730a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800730e:	f7f9 f97b 	bl	8000608 <__aeabi_dmul>
 8007312:	4602      	mov	r2, r0
 8007314:	460b      	mov	r3, r1
 8007316:	4620      	mov	r0, r4
 8007318:	4629      	mov	r1, r5
 800731a:	f7f8 ffbf 	bl	800029c <__adddf3>
 800731e:	4604      	mov	r4, r0
 8007320:	460d      	mov	r5, r1
 8007322:	f7f9 fc21 	bl	8000b68 <__aeabi_d2iz>
 8007326:	2200      	movs	r2, #0
 8007328:	4607      	mov	r7, r0
 800732a:	2300      	movs	r3, #0
 800732c:	4620      	mov	r0, r4
 800732e:	4629      	mov	r1, r5
 8007330:	f7f9 fbdc 	bl	8000aec <__aeabi_dcmplt>
 8007334:	b140      	cbz	r0, 8007348 <_dtoa_r+0x168>
 8007336:	4638      	mov	r0, r7
 8007338:	f7f9 f8fc 	bl	8000534 <__aeabi_i2d>
 800733c:	4622      	mov	r2, r4
 800733e:	462b      	mov	r3, r5
 8007340:	f7f9 fbca 	bl	8000ad8 <__aeabi_dcmpeq>
 8007344:	b900      	cbnz	r0, 8007348 <_dtoa_r+0x168>
 8007346:	3f01      	subs	r7, #1
 8007348:	2f16      	cmp	r7, #22
 800734a:	d852      	bhi.n	80073f2 <_dtoa_r+0x212>
 800734c:	4b5d      	ldr	r3, [pc, #372]	@ (80074c4 <_dtoa_r+0x2e4>)
 800734e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007356:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800735a:	f7f9 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800735e:	2800      	cmp	r0, #0
 8007360:	d049      	beq.n	80073f6 <_dtoa_r+0x216>
 8007362:	3f01      	subs	r7, #1
 8007364:	2300      	movs	r3, #0
 8007366:	9310      	str	r3, [sp, #64]	@ 0x40
 8007368:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800736a:	1b9b      	subs	r3, r3, r6
 800736c:	1e5a      	subs	r2, r3, #1
 800736e:	bf45      	ittet	mi
 8007370:	f1c3 0301 	rsbmi	r3, r3, #1
 8007374:	9300      	strmi	r3, [sp, #0]
 8007376:	2300      	movpl	r3, #0
 8007378:	2300      	movmi	r3, #0
 800737a:	9206      	str	r2, [sp, #24]
 800737c:	bf54      	ite	pl
 800737e:	9300      	strpl	r3, [sp, #0]
 8007380:	9306      	strmi	r3, [sp, #24]
 8007382:	2f00      	cmp	r7, #0
 8007384:	db39      	blt.n	80073fa <_dtoa_r+0x21a>
 8007386:	9b06      	ldr	r3, [sp, #24]
 8007388:	970d      	str	r7, [sp, #52]	@ 0x34
 800738a:	443b      	add	r3, r7
 800738c:	9306      	str	r3, [sp, #24]
 800738e:	2300      	movs	r3, #0
 8007390:	9308      	str	r3, [sp, #32]
 8007392:	9b07      	ldr	r3, [sp, #28]
 8007394:	2b09      	cmp	r3, #9
 8007396:	d863      	bhi.n	8007460 <_dtoa_r+0x280>
 8007398:	2b05      	cmp	r3, #5
 800739a:	bfc4      	itt	gt
 800739c:	3b04      	subgt	r3, #4
 800739e:	9307      	strgt	r3, [sp, #28]
 80073a0:	9b07      	ldr	r3, [sp, #28]
 80073a2:	f1a3 0302 	sub.w	r3, r3, #2
 80073a6:	bfcc      	ite	gt
 80073a8:	2400      	movgt	r4, #0
 80073aa:	2401      	movle	r4, #1
 80073ac:	2b03      	cmp	r3, #3
 80073ae:	d863      	bhi.n	8007478 <_dtoa_r+0x298>
 80073b0:	e8df f003 	tbb	[pc, r3]
 80073b4:	2b375452 	.word	0x2b375452
 80073b8:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80073bc:	441e      	add	r6, r3
 80073be:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80073c2:	2b20      	cmp	r3, #32
 80073c4:	bfc1      	itttt	gt
 80073c6:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80073ca:	409f      	lslgt	r7, r3
 80073cc:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80073d0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80073d4:	bfd6      	itet	le
 80073d6:	f1c3 0320 	rsble	r3, r3, #32
 80073da:	ea47 0003 	orrgt.w	r0, r7, r3
 80073de:	fa04 f003 	lslle.w	r0, r4, r3
 80073e2:	f7f9 f897 	bl	8000514 <__aeabi_ui2d>
 80073e6:	2201      	movs	r2, #1
 80073e8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80073ec:	3e01      	subs	r6, #1
 80073ee:	9212      	str	r2, [sp, #72]	@ 0x48
 80073f0:	e776      	b.n	80072e0 <_dtoa_r+0x100>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e7b7      	b.n	8007366 <_dtoa_r+0x186>
 80073f6:	9010      	str	r0, [sp, #64]	@ 0x40
 80073f8:	e7b6      	b.n	8007368 <_dtoa_r+0x188>
 80073fa:	9b00      	ldr	r3, [sp, #0]
 80073fc:	1bdb      	subs	r3, r3, r7
 80073fe:	9300      	str	r3, [sp, #0]
 8007400:	427b      	negs	r3, r7
 8007402:	9308      	str	r3, [sp, #32]
 8007404:	2300      	movs	r3, #0
 8007406:	930d      	str	r3, [sp, #52]	@ 0x34
 8007408:	e7c3      	b.n	8007392 <_dtoa_r+0x1b2>
 800740a:	2301      	movs	r3, #1
 800740c:	9309      	str	r3, [sp, #36]	@ 0x24
 800740e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007410:	eb07 0b03 	add.w	fp, r7, r3
 8007414:	f10b 0301 	add.w	r3, fp, #1
 8007418:	2b01      	cmp	r3, #1
 800741a:	9303      	str	r3, [sp, #12]
 800741c:	bfb8      	it	lt
 800741e:	2301      	movlt	r3, #1
 8007420:	e006      	b.n	8007430 <_dtoa_r+0x250>
 8007422:	2301      	movs	r3, #1
 8007424:	9309      	str	r3, [sp, #36]	@ 0x24
 8007426:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007428:	2b00      	cmp	r3, #0
 800742a:	dd28      	ble.n	800747e <_dtoa_r+0x29e>
 800742c:	469b      	mov	fp, r3
 800742e:	9303      	str	r3, [sp, #12]
 8007430:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007434:	2100      	movs	r1, #0
 8007436:	2204      	movs	r2, #4
 8007438:	f102 0514 	add.w	r5, r2, #20
 800743c:	429d      	cmp	r5, r3
 800743e:	d926      	bls.n	800748e <_dtoa_r+0x2ae>
 8007440:	6041      	str	r1, [r0, #4]
 8007442:	4648      	mov	r0, r9
 8007444:	f001 f8e8 	bl	8008618 <_Balloc>
 8007448:	4682      	mov	sl, r0
 800744a:	2800      	cmp	r0, #0
 800744c:	d142      	bne.n	80074d4 <_dtoa_r+0x2f4>
 800744e:	4b1e      	ldr	r3, [pc, #120]	@ (80074c8 <_dtoa_r+0x2e8>)
 8007450:	4602      	mov	r2, r0
 8007452:	f240 11af 	movw	r1, #431	@ 0x1af
 8007456:	e6da      	b.n	800720e <_dtoa_r+0x2e>
 8007458:	2300      	movs	r3, #0
 800745a:	e7e3      	b.n	8007424 <_dtoa_r+0x244>
 800745c:	2300      	movs	r3, #0
 800745e:	e7d5      	b.n	800740c <_dtoa_r+0x22c>
 8007460:	2401      	movs	r4, #1
 8007462:	2300      	movs	r3, #0
 8007464:	9307      	str	r3, [sp, #28]
 8007466:	9409      	str	r4, [sp, #36]	@ 0x24
 8007468:	f04f 3bff 	mov.w	fp, #4294967295
 800746c:	2200      	movs	r2, #0
 800746e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007472:	2312      	movs	r3, #18
 8007474:	920c      	str	r2, [sp, #48]	@ 0x30
 8007476:	e7db      	b.n	8007430 <_dtoa_r+0x250>
 8007478:	2301      	movs	r3, #1
 800747a:	9309      	str	r3, [sp, #36]	@ 0x24
 800747c:	e7f4      	b.n	8007468 <_dtoa_r+0x288>
 800747e:	f04f 0b01 	mov.w	fp, #1
 8007482:	f8cd b00c 	str.w	fp, [sp, #12]
 8007486:	465b      	mov	r3, fp
 8007488:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800748c:	e7d0      	b.n	8007430 <_dtoa_r+0x250>
 800748e:	3101      	adds	r1, #1
 8007490:	0052      	lsls	r2, r2, #1
 8007492:	e7d1      	b.n	8007438 <_dtoa_r+0x258>
 8007494:	f3af 8000 	nop.w
 8007498:	636f4361 	.word	0x636f4361
 800749c:	3fd287a7 	.word	0x3fd287a7
 80074a0:	8b60c8b3 	.word	0x8b60c8b3
 80074a4:	3fc68a28 	.word	0x3fc68a28
 80074a8:	509f79fb 	.word	0x509f79fb
 80074ac:	3fd34413 	.word	0x3fd34413
 80074b0:	08009ba8 	.word	0x08009ba8
 80074b4:	08009bbf 	.word	0x08009bbf
 80074b8:	7ff00000 	.word	0x7ff00000
 80074bc:	08009b6b 	.word	0x08009b6b
 80074c0:	3ff80000 	.word	0x3ff80000
 80074c4:	08009db8 	.word	0x08009db8
 80074c8:	08009c17 	.word	0x08009c17
 80074cc:	08009ba4 	.word	0x08009ba4
 80074d0:	08009b6a 	.word	0x08009b6a
 80074d4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80074d8:	6018      	str	r0, [r3, #0]
 80074da:	9b03      	ldr	r3, [sp, #12]
 80074dc:	2b0e      	cmp	r3, #14
 80074de:	f200 80a1 	bhi.w	8007624 <_dtoa_r+0x444>
 80074e2:	2c00      	cmp	r4, #0
 80074e4:	f000 809e 	beq.w	8007624 <_dtoa_r+0x444>
 80074e8:	2f00      	cmp	r7, #0
 80074ea:	dd33      	ble.n	8007554 <_dtoa_r+0x374>
 80074ec:	4b9c      	ldr	r3, [pc, #624]	@ (8007760 <_dtoa_r+0x580>)
 80074ee:	f007 020f 	and.w	r2, r7, #15
 80074f2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80074f6:	ed93 7b00 	vldr	d7, [r3]
 80074fa:	05f8      	lsls	r0, r7, #23
 80074fc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007500:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007504:	d516      	bpl.n	8007534 <_dtoa_r+0x354>
 8007506:	4b97      	ldr	r3, [pc, #604]	@ (8007764 <_dtoa_r+0x584>)
 8007508:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800750c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007510:	f7f9 f9a4 	bl	800085c <__aeabi_ddiv>
 8007514:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007518:	f004 040f 	and.w	r4, r4, #15
 800751c:	2603      	movs	r6, #3
 800751e:	4d91      	ldr	r5, [pc, #580]	@ (8007764 <_dtoa_r+0x584>)
 8007520:	b954      	cbnz	r4, 8007538 <_dtoa_r+0x358>
 8007522:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007526:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800752a:	f7f9 f997 	bl	800085c <__aeabi_ddiv>
 800752e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007532:	e028      	b.n	8007586 <_dtoa_r+0x3a6>
 8007534:	2602      	movs	r6, #2
 8007536:	e7f2      	b.n	800751e <_dtoa_r+0x33e>
 8007538:	07e1      	lsls	r1, r4, #31
 800753a:	d508      	bpl.n	800754e <_dtoa_r+0x36e>
 800753c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007540:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007544:	f7f9 f860 	bl	8000608 <__aeabi_dmul>
 8007548:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800754c:	3601      	adds	r6, #1
 800754e:	1064      	asrs	r4, r4, #1
 8007550:	3508      	adds	r5, #8
 8007552:	e7e5      	b.n	8007520 <_dtoa_r+0x340>
 8007554:	f000 80af 	beq.w	80076b6 <_dtoa_r+0x4d6>
 8007558:	427c      	negs	r4, r7
 800755a:	4b81      	ldr	r3, [pc, #516]	@ (8007760 <_dtoa_r+0x580>)
 800755c:	4d81      	ldr	r5, [pc, #516]	@ (8007764 <_dtoa_r+0x584>)
 800755e:	f004 020f 	and.w	r2, r4, #15
 8007562:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800756a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800756e:	f7f9 f84b 	bl	8000608 <__aeabi_dmul>
 8007572:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007576:	1124      	asrs	r4, r4, #4
 8007578:	2300      	movs	r3, #0
 800757a:	2602      	movs	r6, #2
 800757c:	2c00      	cmp	r4, #0
 800757e:	f040 808f 	bne.w	80076a0 <_dtoa_r+0x4c0>
 8007582:	2b00      	cmp	r3, #0
 8007584:	d1d3      	bne.n	800752e <_dtoa_r+0x34e>
 8007586:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007588:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800758c:	2b00      	cmp	r3, #0
 800758e:	f000 8094 	beq.w	80076ba <_dtoa_r+0x4da>
 8007592:	4b75      	ldr	r3, [pc, #468]	@ (8007768 <_dtoa_r+0x588>)
 8007594:	2200      	movs	r2, #0
 8007596:	4620      	mov	r0, r4
 8007598:	4629      	mov	r1, r5
 800759a:	f7f9 faa7 	bl	8000aec <__aeabi_dcmplt>
 800759e:	2800      	cmp	r0, #0
 80075a0:	f000 808b 	beq.w	80076ba <_dtoa_r+0x4da>
 80075a4:	9b03      	ldr	r3, [sp, #12]
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	f000 8087 	beq.w	80076ba <_dtoa_r+0x4da>
 80075ac:	f1bb 0f00 	cmp.w	fp, #0
 80075b0:	dd34      	ble.n	800761c <_dtoa_r+0x43c>
 80075b2:	4620      	mov	r0, r4
 80075b4:	4b6d      	ldr	r3, [pc, #436]	@ (800776c <_dtoa_r+0x58c>)
 80075b6:	2200      	movs	r2, #0
 80075b8:	4629      	mov	r1, r5
 80075ba:	f7f9 f825 	bl	8000608 <__aeabi_dmul>
 80075be:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80075c2:	f107 38ff 	add.w	r8, r7, #4294967295
 80075c6:	3601      	adds	r6, #1
 80075c8:	465c      	mov	r4, fp
 80075ca:	4630      	mov	r0, r6
 80075cc:	f7f8 ffb2 	bl	8000534 <__aeabi_i2d>
 80075d0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075d4:	f7f9 f818 	bl	8000608 <__aeabi_dmul>
 80075d8:	4b65      	ldr	r3, [pc, #404]	@ (8007770 <_dtoa_r+0x590>)
 80075da:	2200      	movs	r2, #0
 80075dc:	f7f8 fe5e 	bl	800029c <__adddf3>
 80075e0:	4605      	mov	r5, r0
 80075e2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80075e6:	2c00      	cmp	r4, #0
 80075e8:	d16a      	bne.n	80076c0 <_dtoa_r+0x4e0>
 80075ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ee:	4b61      	ldr	r3, [pc, #388]	@ (8007774 <_dtoa_r+0x594>)
 80075f0:	2200      	movs	r2, #0
 80075f2:	f7f8 fe51 	bl	8000298 <__aeabi_dsub>
 80075f6:	4602      	mov	r2, r0
 80075f8:	460b      	mov	r3, r1
 80075fa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075fe:	462a      	mov	r2, r5
 8007600:	4633      	mov	r3, r6
 8007602:	f7f9 fa91 	bl	8000b28 <__aeabi_dcmpgt>
 8007606:	2800      	cmp	r0, #0
 8007608:	f040 8298 	bne.w	8007b3c <_dtoa_r+0x95c>
 800760c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007610:	462a      	mov	r2, r5
 8007612:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007616:	f7f9 fa69 	bl	8000aec <__aeabi_dcmplt>
 800761a:	bb38      	cbnz	r0, 800766c <_dtoa_r+0x48c>
 800761c:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007620:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007624:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007626:	2b00      	cmp	r3, #0
 8007628:	f2c0 8157 	blt.w	80078da <_dtoa_r+0x6fa>
 800762c:	2f0e      	cmp	r7, #14
 800762e:	f300 8154 	bgt.w	80078da <_dtoa_r+0x6fa>
 8007632:	4b4b      	ldr	r3, [pc, #300]	@ (8007760 <_dtoa_r+0x580>)
 8007634:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007638:	ed93 7b00 	vldr	d7, [r3]
 800763c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800763e:	2b00      	cmp	r3, #0
 8007640:	ed8d 7b00 	vstr	d7, [sp]
 8007644:	f280 80e5 	bge.w	8007812 <_dtoa_r+0x632>
 8007648:	9b03      	ldr	r3, [sp, #12]
 800764a:	2b00      	cmp	r3, #0
 800764c:	f300 80e1 	bgt.w	8007812 <_dtoa_r+0x632>
 8007650:	d10c      	bne.n	800766c <_dtoa_r+0x48c>
 8007652:	4b48      	ldr	r3, [pc, #288]	@ (8007774 <_dtoa_r+0x594>)
 8007654:	2200      	movs	r2, #0
 8007656:	ec51 0b17 	vmov	r0, r1, d7
 800765a:	f7f8 ffd5 	bl	8000608 <__aeabi_dmul>
 800765e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007662:	f7f9 fa57 	bl	8000b14 <__aeabi_dcmpge>
 8007666:	2800      	cmp	r0, #0
 8007668:	f000 8266 	beq.w	8007b38 <_dtoa_r+0x958>
 800766c:	2400      	movs	r4, #0
 800766e:	4625      	mov	r5, r4
 8007670:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007672:	4656      	mov	r6, sl
 8007674:	ea6f 0803 	mvn.w	r8, r3
 8007678:	2700      	movs	r7, #0
 800767a:	4621      	mov	r1, r4
 800767c:	4648      	mov	r0, r9
 800767e:	f001 f80b 	bl	8008698 <_Bfree>
 8007682:	2d00      	cmp	r5, #0
 8007684:	f000 80bd 	beq.w	8007802 <_dtoa_r+0x622>
 8007688:	b12f      	cbz	r7, 8007696 <_dtoa_r+0x4b6>
 800768a:	42af      	cmp	r7, r5
 800768c:	d003      	beq.n	8007696 <_dtoa_r+0x4b6>
 800768e:	4639      	mov	r1, r7
 8007690:	4648      	mov	r0, r9
 8007692:	f001 f801 	bl	8008698 <_Bfree>
 8007696:	4629      	mov	r1, r5
 8007698:	4648      	mov	r0, r9
 800769a:	f000 fffd 	bl	8008698 <_Bfree>
 800769e:	e0b0      	b.n	8007802 <_dtoa_r+0x622>
 80076a0:	07e2      	lsls	r2, r4, #31
 80076a2:	d505      	bpl.n	80076b0 <_dtoa_r+0x4d0>
 80076a4:	e9d5 2300 	ldrd	r2, r3, [r5]
 80076a8:	f7f8 ffae 	bl	8000608 <__aeabi_dmul>
 80076ac:	3601      	adds	r6, #1
 80076ae:	2301      	movs	r3, #1
 80076b0:	1064      	asrs	r4, r4, #1
 80076b2:	3508      	adds	r5, #8
 80076b4:	e762      	b.n	800757c <_dtoa_r+0x39c>
 80076b6:	2602      	movs	r6, #2
 80076b8:	e765      	b.n	8007586 <_dtoa_r+0x3a6>
 80076ba:	9c03      	ldr	r4, [sp, #12]
 80076bc:	46b8      	mov	r8, r7
 80076be:	e784      	b.n	80075ca <_dtoa_r+0x3ea>
 80076c0:	4b27      	ldr	r3, [pc, #156]	@ (8007760 <_dtoa_r+0x580>)
 80076c2:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80076c4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80076c8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80076cc:	4454      	add	r4, sl
 80076ce:	2900      	cmp	r1, #0
 80076d0:	d054      	beq.n	800777c <_dtoa_r+0x59c>
 80076d2:	4929      	ldr	r1, [pc, #164]	@ (8007778 <_dtoa_r+0x598>)
 80076d4:	2000      	movs	r0, #0
 80076d6:	f7f9 f8c1 	bl	800085c <__aeabi_ddiv>
 80076da:	4633      	mov	r3, r6
 80076dc:	462a      	mov	r2, r5
 80076de:	f7f8 fddb 	bl	8000298 <__aeabi_dsub>
 80076e2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80076e6:	4656      	mov	r6, sl
 80076e8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076ec:	f7f9 fa3c 	bl	8000b68 <__aeabi_d2iz>
 80076f0:	4605      	mov	r5, r0
 80076f2:	f7f8 ff1f 	bl	8000534 <__aeabi_i2d>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076fe:	f7f8 fdcb 	bl	8000298 <__aeabi_dsub>
 8007702:	3530      	adds	r5, #48	@ 0x30
 8007704:	4602      	mov	r2, r0
 8007706:	460b      	mov	r3, r1
 8007708:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800770c:	f806 5b01 	strb.w	r5, [r6], #1
 8007710:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007714:	f7f9 f9ea 	bl	8000aec <__aeabi_dcmplt>
 8007718:	2800      	cmp	r0, #0
 800771a:	d172      	bne.n	8007802 <_dtoa_r+0x622>
 800771c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007720:	4911      	ldr	r1, [pc, #68]	@ (8007768 <_dtoa_r+0x588>)
 8007722:	2000      	movs	r0, #0
 8007724:	f7f8 fdb8 	bl	8000298 <__aeabi_dsub>
 8007728:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800772c:	f7f9 f9de 	bl	8000aec <__aeabi_dcmplt>
 8007730:	2800      	cmp	r0, #0
 8007732:	f040 80b4 	bne.w	800789e <_dtoa_r+0x6be>
 8007736:	42a6      	cmp	r6, r4
 8007738:	f43f af70 	beq.w	800761c <_dtoa_r+0x43c>
 800773c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007740:	4b0a      	ldr	r3, [pc, #40]	@ (800776c <_dtoa_r+0x58c>)
 8007742:	2200      	movs	r2, #0
 8007744:	f7f8 ff60 	bl	8000608 <__aeabi_dmul>
 8007748:	4b08      	ldr	r3, [pc, #32]	@ (800776c <_dtoa_r+0x58c>)
 800774a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800774e:	2200      	movs	r2, #0
 8007750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007754:	f7f8 ff58 	bl	8000608 <__aeabi_dmul>
 8007758:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800775c:	e7c4      	b.n	80076e8 <_dtoa_r+0x508>
 800775e:	bf00      	nop
 8007760:	08009db8 	.word	0x08009db8
 8007764:	08009d90 	.word	0x08009d90
 8007768:	3ff00000 	.word	0x3ff00000
 800776c:	40240000 	.word	0x40240000
 8007770:	401c0000 	.word	0x401c0000
 8007774:	40140000 	.word	0x40140000
 8007778:	3fe00000 	.word	0x3fe00000
 800777c:	4631      	mov	r1, r6
 800777e:	4628      	mov	r0, r5
 8007780:	f7f8 ff42 	bl	8000608 <__aeabi_dmul>
 8007784:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007788:	9413      	str	r4, [sp, #76]	@ 0x4c
 800778a:	4656      	mov	r6, sl
 800778c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007790:	f7f9 f9ea 	bl	8000b68 <__aeabi_d2iz>
 8007794:	4605      	mov	r5, r0
 8007796:	f7f8 fecd 	bl	8000534 <__aeabi_i2d>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077a2:	f7f8 fd79 	bl	8000298 <__aeabi_dsub>
 80077a6:	3530      	adds	r5, #48	@ 0x30
 80077a8:	f806 5b01 	strb.w	r5, [r6], #1
 80077ac:	4602      	mov	r2, r0
 80077ae:	460b      	mov	r3, r1
 80077b0:	42a6      	cmp	r6, r4
 80077b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80077b6:	f04f 0200 	mov.w	r2, #0
 80077ba:	d124      	bne.n	8007806 <_dtoa_r+0x626>
 80077bc:	4baf      	ldr	r3, [pc, #700]	@ (8007a7c <_dtoa_r+0x89c>)
 80077be:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 80077c2:	f7f8 fd6b 	bl	800029c <__adddf3>
 80077c6:	4602      	mov	r2, r0
 80077c8:	460b      	mov	r3, r1
 80077ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ce:	f7f9 f9ab 	bl	8000b28 <__aeabi_dcmpgt>
 80077d2:	2800      	cmp	r0, #0
 80077d4:	d163      	bne.n	800789e <_dtoa_r+0x6be>
 80077d6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80077da:	49a8      	ldr	r1, [pc, #672]	@ (8007a7c <_dtoa_r+0x89c>)
 80077dc:	2000      	movs	r0, #0
 80077de:	f7f8 fd5b 	bl	8000298 <__aeabi_dsub>
 80077e2:	4602      	mov	r2, r0
 80077e4:	460b      	mov	r3, r1
 80077e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80077ea:	f7f9 f97f 	bl	8000aec <__aeabi_dcmplt>
 80077ee:	2800      	cmp	r0, #0
 80077f0:	f43f af14 	beq.w	800761c <_dtoa_r+0x43c>
 80077f4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80077f6:	1e73      	subs	r3, r6, #1
 80077f8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80077fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80077fe:	2b30      	cmp	r3, #48	@ 0x30
 8007800:	d0f8      	beq.n	80077f4 <_dtoa_r+0x614>
 8007802:	4647      	mov	r7, r8
 8007804:	e03b      	b.n	800787e <_dtoa_r+0x69e>
 8007806:	4b9e      	ldr	r3, [pc, #632]	@ (8007a80 <_dtoa_r+0x8a0>)
 8007808:	f7f8 fefe 	bl	8000608 <__aeabi_dmul>
 800780c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007810:	e7bc      	b.n	800778c <_dtoa_r+0x5ac>
 8007812:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007816:	4656      	mov	r6, sl
 8007818:	e9dd 2300 	ldrd	r2, r3, [sp]
 800781c:	4620      	mov	r0, r4
 800781e:	4629      	mov	r1, r5
 8007820:	f7f9 f81c 	bl	800085c <__aeabi_ddiv>
 8007824:	f7f9 f9a0 	bl	8000b68 <__aeabi_d2iz>
 8007828:	4680      	mov	r8, r0
 800782a:	f7f8 fe83 	bl	8000534 <__aeabi_i2d>
 800782e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007832:	f7f8 fee9 	bl	8000608 <__aeabi_dmul>
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	4620      	mov	r0, r4
 800783c:	4629      	mov	r1, r5
 800783e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007842:	f7f8 fd29 	bl	8000298 <__aeabi_dsub>
 8007846:	f806 4b01 	strb.w	r4, [r6], #1
 800784a:	9d03      	ldr	r5, [sp, #12]
 800784c:	eba6 040a 	sub.w	r4, r6, sl
 8007850:	42a5      	cmp	r5, r4
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	d133      	bne.n	80078c0 <_dtoa_r+0x6e0>
 8007858:	f7f8 fd20 	bl	800029c <__adddf3>
 800785c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007860:	4604      	mov	r4, r0
 8007862:	460d      	mov	r5, r1
 8007864:	f7f9 f960 	bl	8000b28 <__aeabi_dcmpgt>
 8007868:	b9c0      	cbnz	r0, 800789c <_dtoa_r+0x6bc>
 800786a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800786e:	4620      	mov	r0, r4
 8007870:	4629      	mov	r1, r5
 8007872:	f7f9 f931 	bl	8000ad8 <__aeabi_dcmpeq>
 8007876:	b110      	cbz	r0, 800787e <_dtoa_r+0x69e>
 8007878:	f018 0f01 	tst.w	r8, #1
 800787c:	d10e      	bne.n	800789c <_dtoa_r+0x6bc>
 800787e:	9902      	ldr	r1, [sp, #8]
 8007880:	4648      	mov	r0, r9
 8007882:	f000 ff09 	bl	8008698 <_Bfree>
 8007886:	2300      	movs	r3, #0
 8007888:	7033      	strb	r3, [r6, #0]
 800788a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800788c:	3701      	adds	r7, #1
 800788e:	601f      	str	r7, [r3, #0]
 8007890:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007892:	2b00      	cmp	r3, #0
 8007894:	f000 824b 	beq.w	8007d2e <_dtoa_r+0xb4e>
 8007898:	601e      	str	r6, [r3, #0]
 800789a:	e248      	b.n	8007d2e <_dtoa_r+0xb4e>
 800789c:	46b8      	mov	r8, r7
 800789e:	4633      	mov	r3, r6
 80078a0:	461e      	mov	r6, r3
 80078a2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80078a6:	2a39      	cmp	r2, #57	@ 0x39
 80078a8:	d106      	bne.n	80078b8 <_dtoa_r+0x6d8>
 80078aa:	459a      	cmp	sl, r3
 80078ac:	d1f8      	bne.n	80078a0 <_dtoa_r+0x6c0>
 80078ae:	2230      	movs	r2, #48	@ 0x30
 80078b0:	f108 0801 	add.w	r8, r8, #1
 80078b4:	f88a 2000 	strb.w	r2, [sl]
 80078b8:	781a      	ldrb	r2, [r3, #0]
 80078ba:	3201      	adds	r2, #1
 80078bc:	701a      	strb	r2, [r3, #0]
 80078be:	e7a0      	b.n	8007802 <_dtoa_r+0x622>
 80078c0:	4b6f      	ldr	r3, [pc, #444]	@ (8007a80 <_dtoa_r+0x8a0>)
 80078c2:	2200      	movs	r2, #0
 80078c4:	f7f8 fea0 	bl	8000608 <__aeabi_dmul>
 80078c8:	2200      	movs	r2, #0
 80078ca:	2300      	movs	r3, #0
 80078cc:	4604      	mov	r4, r0
 80078ce:	460d      	mov	r5, r1
 80078d0:	f7f9 f902 	bl	8000ad8 <__aeabi_dcmpeq>
 80078d4:	2800      	cmp	r0, #0
 80078d6:	d09f      	beq.n	8007818 <_dtoa_r+0x638>
 80078d8:	e7d1      	b.n	800787e <_dtoa_r+0x69e>
 80078da:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80078dc:	2a00      	cmp	r2, #0
 80078de:	f000 80ea 	beq.w	8007ab6 <_dtoa_r+0x8d6>
 80078e2:	9a07      	ldr	r2, [sp, #28]
 80078e4:	2a01      	cmp	r2, #1
 80078e6:	f300 80cd 	bgt.w	8007a84 <_dtoa_r+0x8a4>
 80078ea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80078ec:	2a00      	cmp	r2, #0
 80078ee:	f000 80c1 	beq.w	8007a74 <_dtoa_r+0x894>
 80078f2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80078f6:	9c08      	ldr	r4, [sp, #32]
 80078f8:	9e00      	ldr	r6, [sp, #0]
 80078fa:	9a00      	ldr	r2, [sp, #0]
 80078fc:	441a      	add	r2, r3
 80078fe:	9200      	str	r2, [sp, #0]
 8007900:	9a06      	ldr	r2, [sp, #24]
 8007902:	2101      	movs	r1, #1
 8007904:	441a      	add	r2, r3
 8007906:	4648      	mov	r0, r9
 8007908:	9206      	str	r2, [sp, #24]
 800790a:	f000 ffc3 	bl	8008894 <__i2b>
 800790e:	4605      	mov	r5, r0
 8007910:	b166      	cbz	r6, 800792c <_dtoa_r+0x74c>
 8007912:	9b06      	ldr	r3, [sp, #24]
 8007914:	2b00      	cmp	r3, #0
 8007916:	dd09      	ble.n	800792c <_dtoa_r+0x74c>
 8007918:	42b3      	cmp	r3, r6
 800791a:	9a00      	ldr	r2, [sp, #0]
 800791c:	bfa8      	it	ge
 800791e:	4633      	movge	r3, r6
 8007920:	1ad2      	subs	r2, r2, r3
 8007922:	9200      	str	r2, [sp, #0]
 8007924:	9a06      	ldr	r2, [sp, #24]
 8007926:	1af6      	subs	r6, r6, r3
 8007928:	1ad3      	subs	r3, r2, r3
 800792a:	9306      	str	r3, [sp, #24]
 800792c:	9b08      	ldr	r3, [sp, #32]
 800792e:	b30b      	cbz	r3, 8007974 <_dtoa_r+0x794>
 8007930:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007932:	2b00      	cmp	r3, #0
 8007934:	f000 80c6 	beq.w	8007ac4 <_dtoa_r+0x8e4>
 8007938:	2c00      	cmp	r4, #0
 800793a:	f000 80c0 	beq.w	8007abe <_dtoa_r+0x8de>
 800793e:	4629      	mov	r1, r5
 8007940:	4622      	mov	r2, r4
 8007942:	4648      	mov	r0, r9
 8007944:	f001 f85e 	bl	8008a04 <__pow5mult>
 8007948:	9a02      	ldr	r2, [sp, #8]
 800794a:	4601      	mov	r1, r0
 800794c:	4605      	mov	r5, r0
 800794e:	4648      	mov	r0, r9
 8007950:	f000 ffb6 	bl	80088c0 <__multiply>
 8007954:	9902      	ldr	r1, [sp, #8]
 8007956:	4680      	mov	r8, r0
 8007958:	4648      	mov	r0, r9
 800795a:	f000 fe9d 	bl	8008698 <_Bfree>
 800795e:	9b08      	ldr	r3, [sp, #32]
 8007960:	1b1b      	subs	r3, r3, r4
 8007962:	9308      	str	r3, [sp, #32]
 8007964:	f000 80b1 	beq.w	8007aca <_dtoa_r+0x8ea>
 8007968:	9a08      	ldr	r2, [sp, #32]
 800796a:	4641      	mov	r1, r8
 800796c:	4648      	mov	r0, r9
 800796e:	f001 f849 	bl	8008a04 <__pow5mult>
 8007972:	9002      	str	r0, [sp, #8]
 8007974:	2101      	movs	r1, #1
 8007976:	4648      	mov	r0, r9
 8007978:	f000 ff8c 	bl	8008894 <__i2b>
 800797c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800797e:	4604      	mov	r4, r0
 8007980:	2b00      	cmp	r3, #0
 8007982:	f000 81d8 	beq.w	8007d36 <_dtoa_r+0xb56>
 8007986:	461a      	mov	r2, r3
 8007988:	4601      	mov	r1, r0
 800798a:	4648      	mov	r0, r9
 800798c:	f001 f83a 	bl	8008a04 <__pow5mult>
 8007990:	9b07      	ldr	r3, [sp, #28]
 8007992:	2b01      	cmp	r3, #1
 8007994:	4604      	mov	r4, r0
 8007996:	f300 809f 	bgt.w	8007ad8 <_dtoa_r+0x8f8>
 800799a:	9b04      	ldr	r3, [sp, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	f040 8097 	bne.w	8007ad0 <_dtoa_r+0x8f0>
 80079a2:	9b05      	ldr	r3, [sp, #20]
 80079a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f040 8093 	bne.w	8007ad4 <_dtoa_r+0x8f4>
 80079ae:	9b05      	ldr	r3, [sp, #20]
 80079b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80079b4:	0d1b      	lsrs	r3, r3, #20
 80079b6:	051b      	lsls	r3, r3, #20
 80079b8:	b133      	cbz	r3, 80079c8 <_dtoa_r+0x7e8>
 80079ba:	9b00      	ldr	r3, [sp, #0]
 80079bc:	3301      	adds	r3, #1
 80079be:	9300      	str	r3, [sp, #0]
 80079c0:	9b06      	ldr	r3, [sp, #24]
 80079c2:	3301      	adds	r3, #1
 80079c4:	9306      	str	r3, [sp, #24]
 80079c6:	2301      	movs	r3, #1
 80079c8:	9308      	str	r3, [sp, #32]
 80079ca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	f000 81b8 	beq.w	8007d42 <_dtoa_r+0xb62>
 80079d2:	6923      	ldr	r3, [r4, #16]
 80079d4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80079d8:	6918      	ldr	r0, [r3, #16]
 80079da:	f000 ff0f 	bl	80087fc <__hi0bits>
 80079de:	f1c0 0020 	rsb	r0, r0, #32
 80079e2:	9b06      	ldr	r3, [sp, #24]
 80079e4:	4418      	add	r0, r3
 80079e6:	f010 001f 	ands.w	r0, r0, #31
 80079ea:	f000 8082 	beq.w	8007af2 <_dtoa_r+0x912>
 80079ee:	f1c0 0320 	rsb	r3, r0, #32
 80079f2:	2b04      	cmp	r3, #4
 80079f4:	dd73      	ble.n	8007ade <_dtoa_r+0x8fe>
 80079f6:	9b00      	ldr	r3, [sp, #0]
 80079f8:	f1c0 001c 	rsb	r0, r0, #28
 80079fc:	4403      	add	r3, r0
 80079fe:	9300      	str	r3, [sp, #0]
 8007a00:	9b06      	ldr	r3, [sp, #24]
 8007a02:	4403      	add	r3, r0
 8007a04:	4406      	add	r6, r0
 8007a06:	9306      	str	r3, [sp, #24]
 8007a08:	9b00      	ldr	r3, [sp, #0]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	dd05      	ble.n	8007a1a <_dtoa_r+0x83a>
 8007a0e:	9902      	ldr	r1, [sp, #8]
 8007a10:	461a      	mov	r2, r3
 8007a12:	4648      	mov	r0, r9
 8007a14:	f001 f850 	bl	8008ab8 <__lshift>
 8007a18:	9002      	str	r0, [sp, #8]
 8007a1a:	9b06      	ldr	r3, [sp, #24]
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	dd05      	ble.n	8007a2c <_dtoa_r+0x84c>
 8007a20:	4621      	mov	r1, r4
 8007a22:	461a      	mov	r2, r3
 8007a24:	4648      	mov	r0, r9
 8007a26:	f001 f847 	bl	8008ab8 <__lshift>
 8007a2a:	4604      	mov	r4, r0
 8007a2c:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d061      	beq.n	8007af6 <_dtoa_r+0x916>
 8007a32:	9802      	ldr	r0, [sp, #8]
 8007a34:	4621      	mov	r1, r4
 8007a36:	f001 f8ab 	bl	8008b90 <__mcmp>
 8007a3a:	2800      	cmp	r0, #0
 8007a3c:	da5b      	bge.n	8007af6 <_dtoa_r+0x916>
 8007a3e:	2300      	movs	r3, #0
 8007a40:	9902      	ldr	r1, [sp, #8]
 8007a42:	220a      	movs	r2, #10
 8007a44:	4648      	mov	r0, r9
 8007a46:	f000 fe49 	bl	80086dc <__multadd>
 8007a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a4c:	9002      	str	r0, [sp, #8]
 8007a4e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	f000 8177 	beq.w	8007d46 <_dtoa_r+0xb66>
 8007a58:	4629      	mov	r1, r5
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	220a      	movs	r2, #10
 8007a5e:	4648      	mov	r0, r9
 8007a60:	f000 fe3c 	bl	80086dc <__multadd>
 8007a64:	f1bb 0f00 	cmp.w	fp, #0
 8007a68:	4605      	mov	r5, r0
 8007a6a:	dc6f      	bgt.n	8007b4c <_dtoa_r+0x96c>
 8007a6c:	9b07      	ldr	r3, [sp, #28]
 8007a6e:	2b02      	cmp	r3, #2
 8007a70:	dc49      	bgt.n	8007b06 <_dtoa_r+0x926>
 8007a72:	e06b      	b.n	8007b4c <_dtoa_r+0x96c>
 8007a74:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a76:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8007a7a:	e73c      	b.n	80078f6 <_dtoa_r+0x716>
 8007a7c:	3fe00000 	.word	0x3fe00000
 8007a80:	40240000 	.word	0x40240000
 8007a84:	9b03      	ldr	r3, [sp, #12]
 8007a86:	1e5c      	subs	r4, r3, #1
 8007a88:	9b08      	ldr	r3, [sp, #32]
 8007a8a:	42a3      	cmp	r3, r4
 8007a8c:	db09      	blt.n	8007aa2 <_dtoa_r+0x8c2>
 8007a8e:	1b1c      	subs	r4, r3, r4
 8007a90:	9b03      	ldr	r3, [sp, #12]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	f6bf af30 	bge.w	80078f8 <_dtoa_r+0x718>
 8007a98:	9b00      	ldr	r3, [sp, #0]
 8007a9a:	9a03      	ldr	r2, [sp, #12]
 8007a9c:	1a9e      	subs	r6, r3, r2
 8007a9e:	2300      	movs	r3, #0
 8007aa0:	e72b      	b.n	80078fa <_dtoa_r+0x71a>
 8007aa2:	9b08      	ldr	r3, [sp, #32]
 8007aa4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007aa6:	9408      	str	r4, [sp, #32]
 8007aa8:	1ae3      	subs	r3, r4, r3
 8007aaa:	441a      	add	r2, r3
 8007aac:	9e00      	ldr	r6, [sp, #0]
 8007aae:	9b03      	ldr	r3, [sp, #12]
 8007ab0:	920d      	str	r2, [sp, #52]	@ 0x34
 8007ab2:	2400      	movs	r4, #0
 8007ab4:	e721      	b.n	80078fa <_dtoa_r+0x71a>
 8007ab6:	9c08      	ldr	r4, [sp, #32]
 8007ab8:	9e00      	ldr	r6, [sp, #0]
 8007aba:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8007abc:	e728      	b.n	8007910 <_dtoa_r+0x730>
 8007abe:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007ac2:	e751      	b.n	8007968 <_dtoa_r+0x788>
 8007ac4:	9a08      	ldr	r2, [sp, #32]
 8007ac6:	9902      	ldr	r1, [sp, #8]
 8007ac8:	e750      	b.n	800796c <_dtoa_r+0x78c>
 8007aca:	f8cd 8008 	str.w	r8, [sp, #8]
 8007ace:	e751      	b.n	8007974 <_dtoa_r+0x794>
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e779      	b.n	80079c8 <_dtoa_r+0x7e8>
 8007ad4:	9b04      	ldr	r3, [sp, #16]
 8007ad6:	e777      	b.n	80079c8 <_dtoa_r+0x7e8>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	9308      	str	r3, [sp, #32]
 8007adc:	e779      	b.n	80079d2 <_dtoa_r+0x7f2>
 8007ade:	d093      	beq.n	8007a08 <_dtoa_r+0x828>
 8007ae0:	9a00      	ldr	r2, [sp, #0]
 8007ae2:	331c      	adds	r3, #28
 8007ae4:	441a      	add	r2, r3
 8007ae6:	9200      	str	r2, [sp, #0]
 8007ae8:	9a06      	ldr	r2, [sp, #24]
 8007aea:	441a      	add	r2, r3
 8007aec:	441e      	add	r6, r3
 8007aee:	9206      	str	r2, [sp, #24]
 8007af0:	e78a      	b.n	8007a08 <_dtoa_r+0x828>
 8007af2:	4603      	mov	r3, r0
 8007af4:	e7f4      	b.n	8007ae0 <_dtoa_r+0x900>
 8007af6:	9b03      	ldr	r3, [sp, #12]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	46b8      	mov	r8, r7
 8007afc:	dc20      	bgt.n	8007b40 <_dtoa_r+0x960>
 8007afe:	469b      	mov	fp, r3
 8007b00:	9b07      	ldr	r3, [sp, #28]
 8007b02:	2b02      	cmp	r3, #2
 8007b04:	dd1e      	ble.n	8007b44 <_dtoa_r+0x964>
 8007b06:	f1bb 0f00 	cmp.w	fp, #0
 8007b0a:	f47f adb1 	bne.w	8007670 <_dtoa_r+0x490>
 8007b0e:	4621      	mov	r1, r4
 8007b10:	465b      	mov	r3, fp
 8007b12:	2205      	movs	r2, #5
 8007b14:	4648      	mov	r0, r9
 8007b16:	f000 fde1 	bl	80086dc <__multadd>
 8007b1a:	4601      	mov	r1, r0
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	9802      	ldr	r0, [sp, #8]
 8007b20:	f001 f836 	bl	8008b90 <__mcmp>
 8007b24:	2800      	cmp	r0, #0
 8007b26:	f77f ada3 	ble.w	8007670 <_dtoa_r+0x490>
 8007b2a:	4656      	mov	r6, sl
 8007b2c:	2331      	movs	r3, #49	@ 0x31
 8007b2e:	f806 3b01 	strb.w	r3, [r6], #1
 8007b32:	f108 0801 	add.w	r8, r8, #1
 8007b36:	e59f      	b.n	8007678 <_dtoa_r+0x498>
 8007b38:	9c03      	ldr	r4, [sp, #12]
 8007b3a:	46b8      	mov	r8, r7
 8007b3c:	4625      	mov	r5, r4
 8007b3e:	e7f4      	b.n	8007b2a <_dtoa_r+0x94a>
 8007b40:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007b44:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	f000 8101 	beq.w	8007d4e <_dtoa_r+0xb6e>
 8007b4c:	2e00      	cmp	r6, #0
 8007b4e:	dd05      	ble.n	8007b5c <_dtoa_r+0x97c>
 8007b50:	4629      	mov	r1, r5
 8007b52:	4632      	mov	r2, r6
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 ffaf 	bl	8008ab8 <__lshift>
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	9b08      	ldr	r3, [sp, #32]
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d05c      	beq.n	8007c1c <_dtoa_r+0xa3c>
 8007b62:	6869      	ldr	r1, [r5, #4]
 8007b64:	4648      	mov	r0, r9
 8007b66:	f000 fd57 	bl	8008618 <_Balloc>
 8007b6a:	4606      	mov	r6, r0
 8007b6c:	b928      	cbnz	r0, 8007b7a <_dtoa_r+0x99a>
 8007b6e:	4b82      	ldr	r3, [pc, #520]	@ (8007d78 <_dtoa_r+0xb98>)
 8007b70:	4602      	mov	r2, r0
 8007b72:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007b76:	f7ff bb4a 	b.w	800720e <_dtoa_r+0x2e>
 8007b7a:	692a      	ldr	r2, [r5, #16]
 8007b7c:	3202      	adds	r2, #2
 8007b7e:	0092      	lsls	r2, r2, #2
 8007b80:	f105 010c 	add.w	r1, r5, #12
 8007b84:	300c      	adds	r0, #12
 8007b86:	f7ff fa82 	bl	800708e <memcpy>
 8007b8a:	2201      	movs	r2, #1
 8007b8c:	4631      	mov	r1, r6
 8007b8e:	4648      	mov	r0, r9
 8007b90:	f000 ff92 	bl	8008ab8 <__lshift>
 8007b94:	f10a 0301 	add.w	r3, sl, #1
 8007b98:	9300      	str	r3, [sp, #0]
 8007b9a:	eb0a 030b 	add.w	r3, sl, fp
 8007b9e:	9308      	str	r3, [sp, #32]
 8007ba0:	9b04      	ldr	r3, [sp, #16]
 8007ba2:	f003 0301 	and.w	r3, r3, #1
 8007ba6:	462f      	mov	r7, r5
 8007ba8:	9306      	str	r3, [sp, #24]
 8007baa:	4605      	mov	r5, r0
 8007bac:	9b00      	ldr	r3, [sp, #0]
 8007bae:	9802      	ldr	r0, [sp, #8]
 8007bb0:	4621      	mov	r1, r4
 8007bb2:	f103 3bff 	add.w	fp, r3, #4294967295
 8007bb6:	f7ff fa89 	bl	80070cc <quorem>
 8007bba:	4603      	mov	r3, r0
 8007bbc:	3330      	adds	r3, #48	@ 0x30
 8007bbe:	9003      	str	r0, [sp, #12]
 8007bc0:	4639      	mov	r1, r7
 8007bc2:	9802      	ldr	r0, [sp, #8]
 8007bc4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bc6:	f000 ffe3 	bl	8008b90 <__mcmp>
 8007bca:	462a      	mov	r2, r5
 8007bcc:	9004      	str	r0, [sp, #16]
 8007bce:	4621      	mov	r1, r4
 8007bd0:	4648      	mov	r0, r9
 8007bd2:	f000 fff9 	bl	8008bc8 <__mdiff>
 8007bd6:	68c2      	ldr	r2, [r0, #12]
 8007bd8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007bda:	4606      	mov	r6, r0
 8007bdc:	bb02      	cbnz	r2, 8007c20 <_dtoa_r+0xa40>
 8007bde:	4601      	mov	r1, r0
 8007be0:	9802      	ldr	r0, [sp, #8]
 8007be2:	f000 ffd5 	bl	8008b90 <__mcmp>
 8007be6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007be8:	4602      	mov	r2, r0
 8007bea:	4631      	mov	r1, r6
 8007bec:	4648      	mov	r0, r9
 8007bee:	920c      	str	r2, [sp, #48]	@ 0x30
 8007bf0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf2:	f000 fd51 	bl	8008698 <_Bfree>
 8007bf6:	9b07      	ldr	r3, [sp, #28]
 8007bf8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007bfa:	9e00      	ldr	r6, [sp, #0]
 8007bfc:	ea42 0103 	orr.w	r1, r2, r3
 8007c00:	9b06      	ldr	r3, [sp, #24]
 8007c02:	4319      	orrs	r1, r3
 8007c04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007c06:	d10d      	bne.n	8007c24 <_dtoa_r+0xa44>
 8007c08:	2b39      	cmp	r3, #57	@ 0x39
 8007c0a:	d027      	beq.n	8007c5c <_dtoa_r+0xa7c>
 8007c0c:	9a04      	ldr	r2, [sp, #16]
 8007c0e:	2a00      	cmp	r2, #0
 8007c10:	dd01      	ble.n	8007c16 <_dtoa_r+0xa36>
 8007c12:	9b03      	ldr	r3, [sp, #12]
 8007c14:	3331      	adds	r3, #49	@ 0x31
 8007c16:	f88b 3000 	strb.w	r3, [fp]
 8007c1a:	e52e      	b.n	800767a <_dtoa_r+0x49a>
 8007c1c:	4628      	mov	r0, r5
 8007c1e:	e7b9      	b.n	8007b94 <_dtoa_r+0x9b4>
 8007c20:	2201      	movs	r2, #1
 8007c22:	e7e2      	b.n	8007bea <_dtoa_r+0xa0a>
 8007c24:	9904      	ldr	r1, [sp, #16]
 8007c26:	2900      	cmp	r1, #0
 8007c28:	db04      	blt.n	8007c34 <_dtoa_r+0xa54>
 8007c2a:	9807      	ldr	r0, [sp, #28]
 8007c2c:	4301      	orrs	r1, r0
 8007c2e:	9806      	ldr	r0, [sp, #24]
 8007c30:	4301      	orrs	r1, r0
 8007c32:	d120      	bne.n	8007c76 <_dtoa_r+0xa96>
 8007c34:	2a00      	cmp	r2, #0
 8007c36:	ddee      	ble.n	8007c16 <_dtoa_r+0xa36>
 8007c38:	9902      	ldr	r1, [sp, #8]
 8007c3a:	9300      	str	r3, [sp, #0]
 8007c3c:	2201      	movs	r2, #1
 8007c3e:	4648      	mov	r0, r9
 8007c40:	f000 ff3a 	bl	8008ab8 <__lshift>
 8007c44:	4621      	mov	r1, r4
 8007c46:	9002      	str	r0, [sp, #8]
 8007c48:	f000 ffa2 	bl	8008b90 <__mcmp>
 8007c4c:	2800      	cmp	r0, #0
 8007c4e:	9b00      	ldr	r3, [sp, #0]
 8007c50:	dc02      	bgt.n	8007c58 <_dtoa_r+0xa78>
 8007c52:	d1e0      	bne.n	8007c16 <_dtoa_r+0xa36>
 8007c54:	07da      	lsls	r2, r3, #31
 8007c56:	d5de      	bpl.n	8007c16 <_dtoa_r+0xa36>
 8007c58:	2b39      	cmp	r3, #57	@ 0x39
 8007c5a:	d1da      	bne.n	8007c12 <_dtoa_r+0xa32>
 8007c5c:	2339      	movs	r3, #57	@ 0x39
 8007c5e:	f88b 3000 	strb.w	r3, [fp]
 8007c62:	4633      	mov	r3, r6
 8007c64:	461e      	mov	r6, r3
 8007c66:	3b01      	subs	r3, #1
 8007c68:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007c6c:	2a39      	cmp	r2, #57	@ 0x39
 8007c6e:	d04e      	beq.n	8007d0e <_dtoa_r+0xb2e>
 8007c70:	3201      	adds	r2, #1
 8007c72:	701a      	strb	r2, [r3, #0]
 8007c74:	e501      	b.n	800767a <_dtoa_r+0x49a>
 8007c76:	2a00      	cmp	r2, #0
 8007c78:	dd03      	ble.n	8007c82 <_dtoa_r+0xaa2>
 8007c7a:	2b39      	cmp	r3, #57	@ 0x39
 8007c7c:	d0ee      	beq.n	8007c5c <_dtoa_r+0xa7c>
 8007c7e:	3301      	adds	r3, #1
 8007c80:	e7c9      	b.n	8007c16 <_dtoa_r+0xa36>
 8007c82:	9a00      	ldr	r2, [sp, #0]
 8007c84:	9908      	ldr	r1, [sp, #32]
 8007c86:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007c8a:	428a      	cmp	r2, r1
 8007c8c:	d028      	beq.n	8007ce0 <_dtoa_r+0xb00>
 8007c8e:	9902      	ldr	r1, [sp, #8]
 8007c90:	2300      	movs	r3, #0
 8007c92:	220a      	movs	r2, #10
 8007c94:	4648      	mov	r0, r9
 8007c96:	f000 fd21 	bl	80086dc <__multadd>
 8007c9a:	42af      	cmp	r7, r5
 8007c9c:	9002      	str	r0, [sp, #8]
 8007c9e:	f04f 0300 	mov.w	r3, #0
 8007ca2:	f04f 020a 	mov.w	r2, #10
 8007ca6:	4639      	mov	r1, r7
 8007ca8:	4648      	mov	r0, r9
 8007caa:	d107      	bne.n	8007cbc <_dtoa_r+0xadc>
 8007cac:	f000 fd16 	bl	80086dc <__multadd>
 8007cb0:	4607      	mov	r7, r0
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	9b00      	ldr	r3, [sp, #0]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	9300      	str	r3, [sp, #0]
 8007cba:	e777      	b.n	8007bac <_dtoa_r+0x9cc>
 8007cbc:	f000 fd0e 	bl	80086dc <__multadd>
 8007cc0:	4629      	mov	r1, r5
 8007cc2:	4607      	mov	r7, r0
 8007cc4:	2300      	movs	r3, #0
 8007cc6:	220a      	movs	r2, #10
 8007cc8:	4648      	mov	r0, r9
 8007cca:	f000 fd07 	bl	80086dc <__multadd>
 8007cce:	4605      	mov	r5, r0
 8007cd0:	e7f0      	b.n	8007cb4 <_dtoa_r+0xad4>
 8007cd2:	f1bb 0f00 	cmp.w	fp, #0
 8007cd6:	bfcc      	ite	gt
 8007cd8:	465e      	movgt	r6, fp
 8007cda:	2601      	movle	r6, #1
 8007cdc:	4456      	add	r6, sl
 8007cde:	2700      	movs	r7, #0
 8007ce0:	9902      	ldr	r1, [sp, #8]
 8007ce2:	9300      	str	r3, [sp, #0]
 8007ce4:	2201      	movs	r2, #1
 8007ce6:	4648      	mov	r0, r9
 8007ce8:	f000 fee6 	bl	8008ab8 <__lshift>
 8007cec:	4621      	mov	r1, r4
 8007cee:	9002      	str	r0, [sp, #8]
 8007cf0:	f000 ff4e 	bl	8008b90 <__mcmp>
 8007cf4:	2800      	cmp	r0, #0
 8007cf6:	dcb4      	bgt.n	8007c62 <_dtoa_r+0xa82>
 8007cf8:	d102      	bne.n	8007d00 <_dtoa_r+0xb20>
 8007cfa:	9b00      	ldr	r3, [sp, #0]
 8007cfc:	07db      	lsls	r3, r3, #31
 8007cfe:	d4b0      	bmi.n	8007c62 <_dtoa_r+0xa82>
 8007d00:	4633      	mov	r3, r6
 8007d02:	461e      	mov	r6, r3
 8007d04:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007d08:	2a30      	cmp	r2, #48	@ 0x30
 8007d0a:	d0fa      	beq.n	8007d02 <_dtoa_r+0xb22>
 8007d0c:	e4b5      	b.n	800767a <_dtoa_r+0x49a>
 8007d0e:	459a      	cmp	sl, r3
 8007d10:	d1a8      	bne.n	8007c64 <_dtoa_r+0xa84>
 8007d12:	2331      	movs	r3, #49	@ 0x31
 8007d14:	f108 0801 	add.w	r8, r8, #1
 8007d18:	f88a 3000 	strb.w	r3, [sl]
 8007d1c:	e4ad      	b.n	800767a <_dtoa_r+0x49a>
 8007d1e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007d20:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007d7c <_dtoa_r+0xb9c>
 8007d24:	b11b      	cbz	r3, 8007d2e <_dtoa_r+0xb4e>
 8007d26:	f10a 0308 	add.w	r3, sl, #8
 8007d2a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d2c:	6013      	str	r3, [r2, #0]
 8007d2e:	4650      	mov	r0, sl
 8007d30:	b017      	add	sp, #92	@ 0x5c
 8007d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007d36:	9b07      	ldr	r3, [sp, #28]
 8007d38:	2b01      	cmp	r3, #1
 8007d3a:	f77f ae2e 	ble.w	800799a <_dtoa_r+0x7ba>
 8007d3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d40:	9308      	str	r3, [sp, #32]
 8007d42:	2001      	movs	r0, #1
 8007d44:	e64d      	b.n	80079e2 <_dtoa_r+0x802>
 8007d46:	f1bb 0f00 	cmp.w	fp, #0
 8007d4a:	f77f aed9 	ble.w	8007b00 <_dtoa_r+0x920>
 8007d4e:	4656      	mov	r6, sl
 8007d50:	9802      	ldr	r0, [sp, #8]
 8007d52:	4621      	mov	r1, r4
 8007d54:	f7ff f9ba 	bl	80070cc <quorem>
 8007d58:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007d5c:	f806 3b01 	strb.w	r3, [r6], #1
 8007d60:	eba6 020a 	sub.w	r2, r6, sl
 8007d64:	4593      	cmp	fp, r2
 8007d66:	ddb4      	ble.n	8007cd2 <_dtoa_r+0xaf2>
 8007d68:	9902      	ldr	r1, [sp, #8]
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	220a      	movs	r2, #10
 8007d6e:	4648      	mov	r0, r9
 8007d70:	f000 fcb4 	bl	80086dc <__multadd>
 8007d74:	9002      	str	r0, [sp, #8]
 8007d76:	e7eb      	b.n	8007d50 <_dtoa_r+0xb70>
 8007d78:	08009c17 	.word	0x08009c17
 8007d7c:	08009b9b 	.word	0x08009b9b

08007d80 <_free_r>:
 8007d80:	b538      	push	{r3, r4, r5, lr}
 8007d82:	4605      	mov	r5, r0
 8007d84:	2900      	cmp	r1, #0
 8007d86:	d041      	beq.n	8007e0c <_free_r+0x8c>
 8007d88:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d8c:	1f0c      	subs	r4, r1, #4
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	bfb8      	it	lt
 8007d92:	18e4      	addlt	r4, r4, r3
 8007d94:	f000 fc34 	bl	8008600 <__malloc_lock>
 8007d98:	4a1d      	ldr	r2, [pc, #116]	@ (8007e10 <_free_r+0x90>)
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	b933      	cbnz	r3, 8007dac <_free_r+0x2c>
 8007d9e:	6063      	str	r3, [r4, #4]
 8007da0:	6014      	str	r4, [r2, #0]
 8007da2:	4628      	mov	r0, r5
 8007da4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007da8:	f000 bc30 	b.w	800860c <__malloc_unlock>
 8007dac:	42a3      	cmp	r3, r4
 8007dae:	d908      	bls.n	8007dc2 <_free_r+0x42>
 8007db0:	6820      	ldr	r0, [r4, #0]
 8007db2:	1821      	adds	r1, r4, r0
 8007db4:	428b      	cmp	r3, r1
 8007db6:	bf01      	itttt	eq
 8007db8:	6819      	ldreq	r1, [r3, #0]
 8007dba:	685b      	ldreq	r3, [r3, #4]
 8007dbc:	1809      	addeq	r1, r1, r0
 8007dbe:	6021      	streq	r1, [r4, #0]
 8007dc0:	e7ed      	b.n	8007d9e <_free_r+0x1e>
 8007dc2:	461a      	mov	r2, r3
 8007dc4:	685b      	ldr	r3, [r3, #4]
 8007dc6:	b10b      	cbz	r3, 8007dcc <_free_r+0x4c>
 8007dc8:	42a3      	cmp	r3, r4
 8007dca:	d9fa      	bls.n	8007dc2 <_free_r+0x42>
 8007dcc:	6811      	ldr	r1, [r2, #0]
 8007dce:	1850      	adds	r0, r2, r1
 8007dd0:	42a0      	cmp	r0, r4
 8007dd2:	d10b      	bne.n	8007dec <_free_r+0x6c>
 8007dd4:	6820      	ldr	r0, [r4, #0]
 8007dd6:	4401      	add	r1, r0
 8007dd8:	1850      	adds	r0, r2, r1
 8007dda:	4283      	cmp	r3, r0
 8007ddc:	6011      	str	r1, [r2, #0]
 8007dde:	d1e0      	bne.n	8007da2 <_free_r+0x22>
 8007de0:	6818      	ldr	r0, [r3, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	6053      	str	r3, [r2, #4]
 8007de6:	4408      	add	r0, r1
 8007de8:	6010      	str	r0, [r2, #0]
 8007dea:	e7da      	b.n	8007da2 <_free_r+0x22>
 8007dec:	d902      	bls.n	8007df4 <_free_r+0x74>
 8007dee:	230c      	movs	r3, #12
 8007df0:	602b      	str	r3, [r5, #0]
 8007df2:	e7d6      	b.n	8007da2 <_free_r+0x22>
 8007df4:	6820      	ldr	r0, [r4, #0]
 8007df6:	1821      	adds	r1, r4, r0
 8007df8:	428b      	cmp	r3, r1
 8007dfa:	bf04      	itt	eq
 8007dfc:	6819      	ldreq	r1, [r3, #0]
 8007dfe:	685b      	ldreq	r3, [r3, #4]
 8007e00:	6063      	str	r3, [r4, #4]
 8007e02:	bf04      	itt	eq
 8007e04:	1809      	addeq	r1, r1, r0
 8007e06:	6021      	streq	r1, [r4, #0]
 8007e08:	6054      	str	r4, [r2, #4]
 8007e0a:	e7ca      	b.n	8007da2 <_free_r+0x22>
 8007e0c:	bd38      	pop	{r3, r4, r5, pc}
 8007e0e:	bf00      	nop
 8007e10:	2000057c 	.word	0x2000057c

08007e14 <rshift>:
 8007e14:	6903      	ldr	r3, [r0, #16]
 8007e16:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8007e1a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007e1e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8007e22:	f100 0414 	add.w	r4, r0, #20
 8007e26:	dd45      	ble.n	8007eb4 <rshift+0xa0>
 8007e28:	f011 011f 	ands.w	r1, r1, #31
 8007e2c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8007e30:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8007e34:	d10c      	bne.n	8007e50 <rshift+0x3c>
 8007e36:	f100 0710 	add.w	r7, r0, #16
 8007e3a:	4629      	mov	r1, r5
 8007e3c:	42b1      	cmp	r1, r6
 8007e3e:	d334      	bcc.n	8007eaa <rshift+0x96>
 8007e40:	1a9b      	subs	r3, r3, r2
 8007e42:	009b      	lsls	r3, r3, #2
 8007e44:	1eea      	subs	r2, r5, #3
 8007e46:	4296      	cmp	r6, r2
 8007e48:	bf38      	it	cc
 8007e4a:	2300      	movcc	r3, #0
 8007e4c:	4423      	add	r3, r4
 8007e4e:	e015      	b.n	8007e7c <rshift+0x68>
 8007e50:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8007e54:	f1c1 0820 	rsb	r8, r1, #32
 8007e58:	40cf      	lsrs	r7, r1
 8007e5a:	f105 0e04 	add.w	lr, r5, #4
 8007e5e:	46a1      	mov	r9, r4
 8007e60:	4576      	cmp	r6, lr
 8007e62:	46f4      	mov	ip, lr
 8007e64:	d815      	bhi.n	8007e92 <rshift+0x7e>
 8007e66:	1a9a      	subs	r2, r3, r2
 8007e68:	0092      	lsls	r2, r2, #2
 8007e6a:	3a04      	subs	r2, #4
 8007e6c:	3501      	adds	r5, #1
 8007e6e:	42ae      	cmp	r6, r5
 8007e70:	bf38      	it	cc
 8007e72:	2200      	movcc	r2, #0
 8007e74:	18a3      	adds	r3, r4, r2
 8007e76:	50a7      	str	r7, [r4, r2]
 8007e78:	b107      	cbz	r7, 8007e7c <rshift+0x68>
 8007e7a:	3304      	adds	r3, #4
 8007e7c:	1b1a      	subs	r2, r3, r4
 8007e7e:	42a3      	cmp	r3, r4
 8007e80:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8007e84:	bf08      	it	eq
 8007e86:	2300      	moveq	r3, #0
 8007e88:	6102      	str	r2, [r0, #16]
 8007e8a:	bf08      	it	eq
 8007e8c:	6143      	streq	r3, [r0, #20]
 8007e8e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007e92:	f8dc c000 	ldr.w	ip, [ip]
 8007e96:	fa0c fc08 	lsl.w	ip, ip, r8
 8007e9a:	ea4c 0707 	orr.w	r7, ip, r7
 8007e9e:	f849 7b04 	str.w	r7, [r9], #4
 8007ea2:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007ea6:	40cf      	lsrs	r7, r1
 8007ea8:	e7da      	b.n	8007e60 <rshift+0x4c>
 8007eaa:	f851 cb04 	ldr.w	ip, [r1], #4
 8007eae:	f847 cf04 	str.w	ip, [r7, #4]!
 8007eb2:	e7c3      	b.n	8007e3c <rshift+0x28>
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	e7e1      	b.n	8007e7c <rshift+0x68>

08007eb8 <__hexdig_fun>:
 8007eb8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 8007ebc:	2b09      	cmp	r3, #9
 8007ebe:	d802      	bhi.n	8007ec6 <__hexdig_fun+0xe>
 8007ec0:	3820      	subs	r0, #32
 8007ec2:	b2c0      	uxtb	r0, r0
 8007ec4:	4770      	bx	lr
 8007ec6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 8007eca:	2b05      	cmp	r3, #5
 8007ecc:	d801      	bhi.n	8007ed2 <__hexdig_fun+0x1a>
 8007ece:	3847      	subs	r0, #71	@ 0x47
 8007ed0:	e7f7      	b.n	8007ec2 <__hexdig_fun+0xa>
 8007ed2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 8007ed6:	2b05      	cmp	r3, #5
 8007ed8:	d801      	bhi.n	8007ede <__hexdig_fun+0x26>
 8007eda:	3827      	subs	r0, #39	@ 0x27
 8007edc:	e7f1      	b.n	8007ec2 <__hexdig_fun+0xa>
 8007ede:	2000      	movs	r0, #0
 8007ee0:	4770      	bx	lr
	...

08007ee4 <__gethex>:
 8007ee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ee8:	b085      	sub	sp, #20
 8007eea:	468a      	mov	sl, r1
 8007eec:	9302      	str	r3, [sp, #8]
 8007eee:	680b      	ldr	r3, [r1, #0]
 8007ef0:	9001      	str	r0, [sp, #4]
 8007ef2:	4690      	mov	r8, r2
 8007ef4:	1c9c      	adds	r4, r3, #2
 8007ef6:	46a1      	mov	r9, r4
 8007ef8:	f814 0b01 	ldrb.w	r0, [r4], #1
 8007efc:	2830      	cmp	r0, #48	@ 0x30
 8007efe:	d0fa      	beq.n	8007ef6 <__gethex+0x12>
 8007f00:	eba9 0303 	sub.w	r3, r9, r3
 8007f04:	f1a3 0b02 	sub.w	fp, r3, #2
 8007f08:	f7ff ffd6 	bl	8007eb8 <__hexdig_fun>
 8007f0c:	4605      	mov	r5, r0
 8007f0e:	2800      	cmp	r0, #0
 8007f10:	d168      	bne.n	8007fe4 <__gethex+0x100>
 8007f12:	49a0      	ldr	r1, [pc, #640]	@ (8008194 <__gethex+0x2b0>)
 8007f14:	2201      	movs	r2, #1
 8007f16:	4648      	mov	r0, r9
 8007f18:	f7ff f82f 	bl	8006f7a <strncmp>
 8007f1c:	4607      	mov	r7, r0
 8007f1e:	2800      	cmp	r0, #0
 8007f20:	d167      	bne.n	8007ff2 <__gethex+0x10e>
 8007f22:	f899 0001 	ldrb.w	r0, [r9, #1]
 8007f26:	4626      	mov	r6, r4
 8007f28:	f7ff ffc6 	bl	8007eb8 <__hexdig_fun>
 8007f2c:	2800      	cmp	r0, #0
 8007f2e:	d062      	beq.n	8007ff6 <__gethex+0x112>
 8007f30:	4623      	mov	r3, r4
 8007f32:	7818      	ldrb	r0, [r3, #0]
 8007f34:	2830      	cmp	r0, #48	@ 0x30
 8007f36:	4699      	mov	r9, r3
 8007f38:	f103 0301 	add.w	r3, r3, #1
 8007f3c:	d0f9      	beq.n	8007f32 <__gethex+0x4e>
 8007f3e:	f7ff ffbb 	bl	8007eb8 <__hexdig_fun>
 8007f42:	fab0 f580 	clz	r5, r0
 8007f46:	096d      	lsrs	r5, r5, #5
 8007f48:	f04f 0b01 	mov.w	fp, #1
 8007f4c:	464a      	mov	r2, r9
 8007f4e:	4616      	mov	r6, r2
 8007f50:	3201      	adds	r2, #1
 8007f52:	7830      	ldrb	r0, [r6, #0]
 8007f54:	f7ff ffb0 	bl	8007eb8 <__hexdig_fun>
 8007f58:	2800      	cmp	r0, #0
 8007f5a:	d1f8      	bne.n	8007f4e <__gethex+0x6a>
 8007f5c:	498d      	ldr	r1, [pc, #564]	@ (8008194 <__gethex+0x2b0>)
 8007f5e:	2201      	movs	r2, #1
 8007f60:	4630      	mov	r0, r6
 8007f62:	f7ff f80a 	bl	8006f7a <strncmp>
 8007f66:	2800      	cmp	r0, #0
 8007f68:	d13f      	bne.n	8007fea <__gethex+0x106>
 8007f6a:	b944      	cbnz	r4, 8007f7e <__gethex+0x9a>
 8007f6c:	1c74      	adds	r4, r6, #1
 8007f6e:	4622      	mov	r2, r4
 8007f70:	4616      	mov	r6, r2
 8007f72:	3201      	adds	r2, #1
 8007f74:	7830      	ldrb	r0, [r6, #0]
 8007f76:	f7ff ff9f 	bl	8007eb8 <__hexdig_fun>
 8007f7a:	2800      	cmp	r0, #0
 8007f7c:	d1f8      	bne.n	8007f70 <__gethex+0x8c>
 8007f7e:	1ba4      	subs	r4, r4, r6
 8007f80:	00a7      	lsls	r7, r4, #2
 8007f82:	7833      	ldrb	r3, [r6, #0]
 8007f84:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8007f88:	2b50      	cmp	r3, #80	@ 0x50
 8007f8a:	d13e      	bne.n	800800a <__gethex+0x126>
 8007f8c:	7873      	ldrb	r3, [r6, #1]
 8007f8e:	2b2b      	cmp	r3, #43	@ 0x2b
 8007f90:	d033      	beq.n	8007ffa <__gethex+0x116>
 8007f92:	2b2d      	cmp	r3, #45	@ 0x2d
 8007f94:	d034      	beq.n	8008000 <__gethex+0x11c>
 8007f96:	1c71      	adds	r1, r6, #1
 8007f98:	2400      	movs	r4, #0
 8007f9a:	7808      	ldrb	r0, [r1, #0]
 8007f9c:	f7ff ff8c 	bl	8007eb8 <__hexdig_fun>
 8007fa0:	1e43      	subs	r3, r0, #1
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b18      	cmp	r3, #24
 8007fa6:	d830      	bhi.n	800800a <__gethex+0x126>
 8007fa8:	f1a0 0210 	sub.w	r2, r0, #16
 8007fac:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8007fb0:	f7ff ff82 	bl	8007eb8 <__hexdig_fun>
 8007fb4:	f100 3cff 	add.w	ip, r0, #4294967295
 8007fb8:	fa5f fc8c 	uxtb.w	ip, ip
 8007fbc:	f1bc 0f18 	cmp.w	ip, #24
 8007fc0:	f04f 030a 	mov.w	r3, #10
 8007fc4:	d91e      	bls.n	8008004 <__gethex+0x120>
 8007fc6:	b104      	cbz	r4, 8007fca <__gethex+0xe6>
 8007fc8:	4252      	negs	r2, r2
 8007fca:	4417      	add	r7, r2
 8007fcc:	f8ca 1000 	str.w	r1, [sl]
 8007fd0:	b1ed      	cbz	r5, 800800e <__gethex+0x12a>
 8007fd2:	f1bb 0f00 	cmp.w	fp, #0
 8007fd6:	bf0c      	ite	eq
 8007fd8:	2506      	moveq	r5, #6
 8007fda:	2500      	movne	r5, #0
 8007fdc:	4628      	mov	r0, r5
 8007fde:	b005      	add	sp, #20
 8007fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fe4:	2500      	movs	r5, #0
 8007fe6:	462c      	mov	r4, r5
 8007fe8:	e7b0      	b.n	8007f4c <__gethex+0x68>
 8007fea:	2c00      	cmp	r4, #0
 8007fec:	d1c7      	bne.n	8007f7e <__gethex+0x9a>
 8007fee:	4627      	mov	r7, r4
 8007ff0:	e7c7      	b.n	8007f82 <__gethex+0x9e>
 8007ff2:	464e      	mov	r6, r9
 8007ff4:	462f      	mov	r7, r5
 8007ff6:	2501      	movs	r5, #1
 8007ff8:	e7c3      	b.n	8007f82 <__gethex+0x9e>
 8007ffa:	2400      	movs	r4, #0
 8007ffc:	1cb1      	adds	r1, r6, #2
 8007ffe:	e7cc      	b.n	8007f9a <__gethex+0xb6>
 8008000:	2401      	movs	r4, #1
 8008002:	e7fb      	b.n	8007ffc <__gethex+0x118>
 8008004:	fb03 0002 	mla	r0, r3, r2, r0
 8008008:	e7ce      	b.n	8007fa8 <__gethex+0xc4>
 800800a:	4631      	mov	r1, r6
 800800c:	e7de      	b.n	8007fcc <__gethex+0xe8>
 800800e:	eba6 0309 	sub.w	r3, r6, r9
 8008012:	3b01      	subs	r3, #1
 8008014:	4629      	mov	r1, r5
 8008016:	2b07      	cmp	r3, #7
 8008018:	dc0a      	bgt.n	8008030 <__gethex+0x14c>
 800801a:	9801      	ldr	r0, [sp, #4]
 800801c:	f000 fafc 	bl	8008618 <_Balloc>
 8008020:	4604      	mov	r4, r0
 8008022:	b940      	cbnz	r0, 8008036 <__gethex+0x152>
 8008024:	4b5c      	ldr	r3, [pc, #368]	@ (8008198 <__gethex+0x2b4>)
 8008026:	4602      	mov	r2, r0
 8008028:	21e4      	movs	r1, #228	@ 0xe4
 800802a:	485c      	ldr	r0, [pc, #368]	@ (800819c <__gethex+0x2b8>)
 800802c:	f001 fa54 	bl	80094d8 <__assert_func>
 8008030:	3101      	adds	r1, #1
 8008032:	105b      	asrs	r3, r3, #1
 8008034:	e7ef      	b.n	8008016 <__gethex+0x132>
 8008036:	f100 0a14 	add.w	sl, r0, #20
 800803a:	2300      	movs	r3, #0
 800803c:	4655      	mov	r5, sl
 800803e:	469b      	mov	fp, r3
 8008040:	45b1      	cmp	r9, r6
 8008042:	d337      	bcc.n	80080b4 <__gethex+0x1d0>
 8008044:	f845 bb04 	str.w	fp, [r5], #4
 8008048:	eba5 050a 	sub.w	r5, r5, sl
 800804c:	10ad      	asrs	r5, r5, #2
 800804e:	6125      	str	r5, [r4, #16]
 8008050:	4658      	mov	r0, fp
 8008052:	f000 fbd3 	bl	80087fc <__hi0bits>
 8008056:	016d      	lsls	r5, r5, #5
 8008058:	f8d8 6000 	ldr.w	r6, [r8]
 800805c:	1a2d      	subs	r5, r5, r0
 800805e:	42b5      	cmp	r5, r6
 8008060:	dd54      	ble.n	800810c <__gethex+0x228>
 8008062:	1bad      	subs	r5, r5, r6
 8008064:	4629      	mov	r1, r5
 8008066:	4620      	mov	r0, r4
 8008068:	f000 ff5f 	bl	8008f2a <__any_on>
 800806c:	4681      	mov	r9, r0
 800806e:	b178      	cbz	r0, 8008090 <__gethex+0x1ac>
 8008070:	1e6b      	subs	r3, r5, #1
 8008072:	1159      	asrs	r1, r3, #5
 8008074:	f003 021f 	and.w	r2, r3, #31
 8008078:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800807c:	f04f 0901 	mov.w	r9, #1
 8008080:	fa09 f202 	lsl.w	r2, r9, r2
 8008084:	420a      	tst	r2, r1
 8008086:	d003      	beq.n	8008090 <__gethex+0x1ac>
 8008088:	454b      	cmp	r3, r9
 800808a:	dc36      	bgt.n	80080fa <__gethex+0x216>
 800808c:	f04f 0902 	mov.w	r9, #2
 8008090:	4629      	mov	r1, r5
 8008092:	4620      	mov	r0, r4
 8008094:	f7ff febe 	bl	8007e14 <rshift>
 8008098:	442f      	add	r7, r5
 800809a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800809e:	42bb      	cmp	r3, r7
 80080a0:	da42      	bge.n	8008128 <__gethex+0x244>
 80080a2:	9801      	ldr	r0, [sp, #4]
 80080a4:	4621      	mov	r1, r4
 80080a6:	f000 faf7 	bl	8008698 <_Bfree>
 80080aa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80080ac:	2300      	movs	r3, #0
 80080ae:	6013      	str	r3, [r2, #0]
 80080b0:	25a3      	movs	r5, #163	@ 0xa3
 80080b2:	e793      	b.n	8007fdc <__gethex+0xf8>
 80080b4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80080b8:	2a2e      	cmp	r2, #46	@ 0x2e
 80080ba:	d012      	beq.n	80080e2 <__gethex+0x1fe>
 80080bc:	2b20      	cmp	r3, #32
 80080be:	d104      	bne.n	80080ca <__gethex+0x1e6>
 80080c0:	f845 bb04 	str.w	fp, [r5], #4
 80080c4:	f04f 0b00 	mov.w	fp, #0
 80080c8:	465b      	mov	r3, fp
 80080ca:	7830      	ldrb	r0, [r6, #0]
 80080cc:	9303      	str	r3, [sp, #12]
 80080ce:	f7ff fef3 	bl	8007eb8 <__hexdig_fun>
 80080d2:	9b03      	ldr	r3, [sp, #12]
 80080d4:	f000 000f 	and.w	r0, r0, #15
 80080d8:	4098      	lsls	r0, r3
 80080da:	ea4b 0b00 	orr.w	fp, fp, r0
 80080de:	3304      	adds	r3, #4
 80080e0:	e7ae      	b.n	8008040 <__gethex+0x15c>
 80080e2:	45b1      	cmp	r9, r6
 80080e4:	d8ea      	bhi.n	80080bc <__gethex+0x1d8>
 80080e6:	492b      	ldr	r1, [pc, #172]	@ (8008194 <__gethex+0x2b0>)
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	2201      	movs	r2, #1
 80080ec:	4630      	mov	r0, r6
 80080ee:	f7fe ff44 	bl	8006f7a <strncmp>
 80080f2:	9b03      	ldr	r3, [sp, #12]
 80080f4:	2800      	cmp	r0, #0
 80080f6:	d1e1      	bne.n	80080bc <__gethex+0x1d8>
 80080f8:	e7a2      	b.n	8008040 <__gethex+0x15c>
 80080fa:	1ea9      	subs	r1, r5, #2
 80080fc:	4620      	mov	r0, r4
 80080fe:	f000 ff14 	bl	8008f2a <__any_on>
 8008102:	2800      	cmp	r0, #0
 8008104:	d0c2      	beq.n	800808c <__gethex+0x1a8>
 8008106:	f04f 0903 	mov.w	r9, #3
 800810a:	e7c1      	b.n	8008090 <__gethex+0x1ac>
 800810c:	da09      	bge.n	8008122 <__gethex+0x23e>
 800810e:	1b75      	subs	r5, r6, r5
 8008110:	4621      	mov	r1, r4
 8008112:	9801      	ldr	r0, [sp, #4]
 8008114:	462a      	mov	r2, r5
 8008116:	f000 fccf 	bl	8008ab8 <__lshift>
 800811a:	1b7f      	subs	r7, r7, r5
 800811c:	4604      	mov	r4, r0
 800811e:	f100 0a14 	add.w	sl, r0, #20
 8008122:	f04f 0900 	mov.w	r9, #0
 8008126:	e7b8      	b.n	800809a <__gethex+0x1b6>
 8008128:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800812c:	42bd      	cmp	r5, r7
 800812e:	dd6f      	ble.n	8008210 <__gethex+0x32c>
 8008130:	1bed      	subs	r5, r5, r7
 8008132:	42ae      	cmp	r6, r5
 8008134:	dc34      	bgt.n	80081a0 <__gethex+0x2bc>
 8008136:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800813a:	2b02      	cmp	r3, #2
 800813c:	d022      	beq.n	8008184 <__gethex+0x2a0>
 800813e:	2b03      	cmp	r3, #3
 8008140:	d024      	beq.n	800818c <__gethex+0x2a8>
 8008142:	2b01      	cmp	r3, #1
 8008144:	d115      	bne.n	8008172 <__gethex+0x28e>
 8008146:	42ae      	cmp	r6, r5
 8008148:	d113      	bne.n	8008172 <__gethex+0x28e>
 800814a:	2e01      	cmp	r6, #1
 800814c:	d10b      	bne.n	8008166 <__gethex+0x282>
 800814e:	9a02      	ldr	r2, [sp, #8]
 8008150:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008154:	6013      	str	r3, [r2, #0]
 8008156:	2301      	movs	r3, #1
 8008158:	6123      	str	r3, [r4, #16]
 800815a:	f8ca 3000 	str.w	r3, [sl]
 800815e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008160:	2562      	movs	r5, #98	@ 0x62
 8008162:	601c      	str	r4, [r3, #0]
 8008164:	e73a      	b.n	8007fdc <__gethex+0xf8>
 8008166:	1e71      	subs	r1, r6, #1
 8008168:	4620      	mov	r0, r4
 800816a:	f000 fede 	bl	8008f2a <__any_on>
 800816e:	2800      	cmp	r0, #0
 8008170:	d1ed      	bne.n	800814e <__gethex+0x26a>
 8008172:	9801      	ldr	r0, [sp, #4]
 8008174:	4621      	mov	r1, r4
 8008176:	f000 fa8f 	bl	8008698 <_Bfree>
 800817a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800817c:	2300      	movs	r3, #0
 800817e:	6013      	str	r3, [r2, #0]
 8008180:	2550      	movs	r5, #80	@ 0x50
 8008182:	e72b      	b.n	8007fdc <__gethex+0xf8>
 8008184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008186:	2b00      	cmp	r3, #0
 8008188:	d1f3      	bne.n	8008172 <__gethex+0x28e>
 800818a:	e7e0      	b.n	800814e <__gethex+0x26a>
 800818c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800818e:	2b00      	cmp	r3, #0
 8008190:	d1dd      	bne.n	800814e <__gethex+0x26a>
 8008192:	e7ee      	b.n	8008172 <__gethex+0x28e>
 8008194:	08009b58 	.word	0x08009b58
 8008198:	08009c17 	.word	0x08009c17
 800819c:	08009c28 	.word	0x08009c28
 80081a0:	1e6f      	subs	r7, r5, #1
 80081a2:	f1b9 0f00 	cmp.w	r9, #0
 80081a6:	d130      	bne.n	800820a <__gethex+0x326>
 80081a8:	b127      	cbz	r7, 80081b4 <__gethex+0x2d0>
 80081aa:	4639      	mov	r1, r7
 80081ac:	4620      	mov	r0, r4
 80081ae:	f000 febc 	bl	8008f2a <__any_on>
 80081b2:	4681      	mov	r9, r0
 80081b4:	117a      	asrs	r2, r7, #5
 80081b6:	2301      	movs	r3, #1
 80081b8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80081bc:	f007 071f 	and.w	r7, r7, #31
 80081c0:	40bb      	lsls	r3, r7
 80081c2:	4213      	tst	r3, r2
 80081c4:	4629      	mov	r1, r5
 80081c6:	4620      	mov	r0, r4
 80081c8:	bf18      	it	ne
 80081ca:	f049 0902 	orrne.w	r9, r9, #2
 80081ce:	f7ff fe21 	bl	8007e14 <rshift>
 80081d2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80081d6:	1b76      	subs	r6, r6, r5
 80081d8:	2502      	movs	r5, #2
 80081da:	f1b9 0f00 	cmp.w	r9, #0
 80081de:	d047      	beq.n	8008270 <__gethex+0x38c>
 80081e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80081e4:	2b02      	cmp	r3, #2
 80081e6:	d015      	beq.n	8008214 <__gethex+0x330>
 80081e8:	2b03      	cmp	r3, #3
 80081ea:	d017      	beq.n	800821c <__gethex+0x338>
 80081ec:	2b01      	cmp	r3, #1
 80081ee:	d109      	bne.n	8008204 <__gethex+0x320>
 80081f0:	f019 0f02 	tst.w	r9, #2
 80081f4:	d006      	beq.n	8008204 <__gethex+0x320>
 80081f6:	f8da 3000 	ldr.w	r3, [sl]
 80081fa:	ea49 0903 	orr.w	r9, r9, r3
 80081fe:	f019 0f01 	tst.w	r9, #1
 8008202:	d10e      	bne.n	8008222 <__gethex+0x33e>
 8008204:	f045 0510 	orr.w	r5, r5, #16
 8008208:	e032      	b.n	8008270 <__gethex+0x38c>
 800820a:	f04f 0901 	mov.w	r9, #1
 800820e:	e7d1      	b.n	80081b4 <__gethex+0x2d0>
 8008210:	2501      	movs	r5, #1
 8008212:	e7e2      	b.n	80081da <__gethex+0x2f6>
 8008214:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008216:	f1c3 0301 	rsb	r3, r3, #1
 800821a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800821c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800821e:	2b00      	cmp	r3, #0
 8008220:	d0f0      	beq.n	8008204 <__gethex+0x320>
 8008222:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008226:	f104 0314 	add.w	r3, r4, #20
 800822a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800822e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008232:	f04f 0c00 	mov.w	ip, #0
 8008236:	4618      	mov	r0, r3
 8008238:	f853 2b04 	ldr.w	r2, [r3], #4
 800823c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008240:	d01b      	beq.n	800827a <__gethex+0x396>
 8008242:	3201      	adds	r2, #1
 8008244:	6002      	str	r2, [r0, #0]
 8008246:	2d02      	cmp	r5, #2
 8008248:	f104 0314 	add.w	r3, r4, #20
 800824c:	d13c      	bne.n	80082c8 <__gethex+0x3e4>
 800824e:	f8d8 2000 	ldr.w	r2, [r8]
 8008252:	3a01      	subs	r2, #1
 8008254:	42b2      	cmp	r2, r6
 8008256:	d109      	bne.n	800826c <__gethex+0x388>
 8008258:	1171      	asrs	r1, r6, #5
 800825a:	2201      	movs	r2, #1
 800825c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008260:	f006 061f 	and.w	r6, r6, #31
 8008264:	fa02 f606 	lsl.w	r6, r2, r6
 8008268:	421e      	tst	r6, r3
 800826a:	d13a      	bne.n	80082e2 <__gethex+0x3fe>
 800826c:	f045 0520 	orr.w	r5, r5, #32
 8008270:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008272:	601c      	str	r4, [r3, #0]
 8008274:	9b02      	ldr	r3, [sp, #8]
 8008276:	601f      	str	r7, [r3, #0]
 8008278:	e6b0      	b.n	8007fdc <__gethex+0xf8>
 800827a:	4299      	cmp	r1, r3
 800827c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008280:	d8d9      	bhi.n	8008236 <__gethex+0x352>
 8008282:	68a3      	ldr	r3, [r4, #8]
 8008284:	459b      	cmp	fp, r3
 8008286:	db17      	blt.n	80082b8 <__gethex+0x3d4>
 8008288:	6861      	ldr	r1, [r4, #4]
 800828a:	9801      	ldr	r0, [sp, #4]
 800828c:	3101      	adds	r1, #1
 800828e:	f000 f9c3 	bl	8008618 <_Balloc>
 8008292:	4681      	mov	r9, r0
 8008294:	b918      	cbnz	r0, 800829e <__gethex+0x3ba>
 8008296:	4b1a      	ldr	r3, [pc, #104]	@ (8008300 <__gethex+0x41c>)
 8008298:	4602      	mov	r2, r0
 800829a:	2184      	movs	r1, #132	@ 0x84
 800829c:	e6c5      	b.n	800802a <__gethex+0x146>
 800829e:	6922      	ldr	r2, [r4, #16]
 80082a0:	3202      	adds	r2, #2
 80082a2:	f104 010c 	add.w	r1, r4, #12
 80082a6:	0092      	lsls	r2, r2, #2
 80082a8:	300c      	adds	r0, #12
 80082aa:	f7fe fef0 	bl	800708e <memcpy>
 80082ae:	4621      	mov	r1, r4
 80082b0:	9801      	ldr	r0, [sp, #4]
 80082b2:	f000 f9f1 	bl	8008698 <_Bfree>
 80082b6:	464c      	mov	r4, r9
 80082b8:	6923      	ldr	r3, [r4, #16]
 80082ba:	1c5a      	adds	r2, r3, #1
 80082bc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80082c0:	6122      	str	r2, [r4, #16]
 80082c2:	2201      	movs	r2, #1
 80082c4:	615a      	str	r2, [r3, #20]
 80082c6:	e7be      	b.n	8008246 <__gethex+0x362>
 80082c8:	6922      	ldr	r2, [r4, #16]
 80082ca:	455a      	cmp	r2, fp
 80082cc:	dd0b      	ble.n	80082e6 <__gethex+0x402>
 80082ce:	2101      	movs	r1, #1
 80082d0:	4620      	mov	r0, r4
 80082d2:	f7ff fd9f 	bl	8007e14 <rshift>
 80082d6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80082da:	3701      	adds	r7, #1
 80082dc:	42bb      	cmp	r3, r7
 80082de:	f6ff aee0 	blt.w	80080a2 <__gethex+0x1be>
 80082e2:	2501      	movs	r5, #1
 80082e4:	e7c2      	b.n	800826c <__gethex+0x388>
 80082e6:	f016 061f 	ands.w	r6, r6, #31
 80082ea:	d0fa      	beq.n	80082e2 <__gethex+0x3fe>
 80082ec:	4453      	add	r3, sl
 80082ee:	f1c6 0620 	rsb	r6, r6, #32
 80082f2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80082f6:	f000 fa81 	bl	80087fc <__hi0bits>
 80082fa:	42b0      	cmp	r0, r6
 80082fc:	dbe7      	blt.n	80082ce <__gethex+0x3ea>
 80082fe:	e7f0      	b.n	80082e2 <__gethex+0x3fe>
 8008300:	08009c17 	.word	0x08009c17

08008304 <L_shift>:
 8008304:	f1c2 0208 	rsb	r2, r2, #8
 8008308:	0092      	lsls	r2, r2, #2
 800830a:	b570      	push	{r4, r5, r6, lr}
 800830c:	f1c2 0620 	rsb	r6, r2, #32
 8008310:	6843      	ldr	r3, [r0, #4]
 8008312:	6804      	ldr	r4, [r0, #0]
 8008314:	fa03 f506 	lsl.w	r5, r3, r6
 8008318:	432c      	orrs	r4, r5
 800831a:	40d3      	lsrs	r3, r2
 800831c:	6004      	str	r4, [r0, #0]
 800831e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008322:	4288      	cmp	r0, r1
 8008324:	d3f4      	bcc.n	8008310 <L_shift+0xc>
 8008326:	bd70      	pop	{r4, r5, r6, pc}

08008328 <__match>:
 8008328:	b530      	push	{r4, r5, lr}
 800832a:	6803      	ldr	r3, [r0, #0]
 800832c:	3301      	adds	r3, #1
 800832e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008332:	b914      	cbnz	r4, 800833a <__match+0x12>
 8008334:	6003      	str	r3, [r0, #0]
 8008336:	2001      	movs	r0, #1
 8008338:	bd30      	pop	{r4, r5, pc}
 800833a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800833e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008342:	2d19      	cmp	r5, #25
 8008344:	bf98      	it	ls
 8008346:	3220      	addls	r2, #32
 8008348:	42a2      	cmp	r2, r4
 800834a:	d0f0      	beq.n	800832e <__match+0x6>
 800834c:	2000      	movs	r0, #0
 800834e:	e7f3      	b.n	8008338 <__match+0x10>

08008350 <__hexnan>:
 8008350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008354:	680b      	ldr	r3, [r1, #0]
 8008356:	6801      	ldr	r1, [r0, #0]
 8008358:	115e      	asrs	r6, r3, #5
 800835a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800835e:	f013 031f 	ands.w	r3, r3, #31
 8008362:	b087      	sub	sp, #28
 8008364:	bf18      	it	ne
 8008366:	3604      	addne	r6, #4
 8008368:	2500      	movs	r5, #0
 800836a:	1f37      	subs	r7, r6, #4
 800836c:	4682      	mov	sl, r0
 800836e:	4690      	mov	r8, r2
 8008370:	9301      	str	r3, [sp, #4]
 8008372:	f846 5c04 	str.w	r5, [r6, #-4]
 8008376:	46b9      	mov	r9, r7
 8008378:	463c      	mov	r4, r7
 800837a:	9502      	str	r5, [sp, #8]
 800837c:	46ab      	mov	fp, r5
 800837e:	784a      	ldrb	r2, [r1, #1]
 8008380:	1c4b      	adds	r3, r1, #1
 8008382:	9303      	str	r3, [sp, #12]
 8008384:	b342      	cbz	r2, 80083d8 <__hexnan+0x88>
 8008386:	4610      	mov	r0, r2
 8008388:	9105      	str	r1, [sp, #20]
 800838a:	9204      	str	r2, [sp, #16]
 800838c:	f7ff fd94 	bl	8007eb8 <__hexdig_fun>
 8008390:	2800      	cmp	r0, #0
 8008392:	d151      	bne.n	8008438 <__hexnan+0xe8>
 8008394:	9a04      	ldr	r2, [sp, #16]
 8008396:	9905      	ldr	r1, [sp, #20]
 8008398:	2a20      	cmp	r2, #32
 800839a:	d818      	bhi.n	80083ce <__hexnan+0x7e>
 800839c:	9b02      	ldr	r3, [sp, #8]
 800839e:	459b      	cmp	fp, r3
 80083a0:	dd13      	ble.n	80083ca <__hexnan+0x7a>
 80083a2:	454c      	cmp	r4, r9
 80083a4:	d206      	bcs.n	80083b4 <__hexnan+0x64>
 80083a6:	2d07      	cmp	r5, #7
 80083a8:	dc04      	bgt.n	80083b4 <__hexnan+0x64>
 80083aa:	462a      	mov	r2, r5
 80083ac:	4649      	mov	r1, r9
 80083ae:	4620      	mov	r0, r4
 80083b0:	f7ff ffa8 	bl	8008304 <L_shift>
 80083b4:	4544      	cmp	r4, r8
 80083b6:	d952      	bls.n	800845e <__hexnan+0x10e>
 80083b8:	2300      	movs	r3, #0
 80083ba:	f1a4 0904 	sub.w	r9, r4, #4
 80083be:	f844 3c04 	str.w	r3, [r4, #-4]
 80083c2:	f8cd b008 	str.w	fp, [sp, #8]
 80083c6:	464c      	mov	r4, r9
 80083c8:	461d      	mov	r5, r3
 80083ca:	9903      	ldr	r1, [sp, #12]
 80083cc:	e7d7      	b.n	800837e <__hexnan+0x2e>
 80083ce:	2a29      	cmp	r2, #41	@ 0x29
 80083d0:	d157      	bne.n	8008482 <__hexnan+0x132>
 80083d2:	3102      	adds	r1, #2
 80083d4:	f8ca 1000 	str.w	r1, [sl]
 80083d8:	f1bb 0f00 	cmp.w	fp, #0
 80083dc:	d051      	beq.n	8008482 <__hexnan+0x132>
 80083de:	454c      	cmp	r4, r9
 80083e0:	d206      	bcs.n	80083f0 <__hexnan+0xa0>
 80083e2:	2d07      	cmp	r5, #7
 80083e4:	dc04      	bgt.n	80083f0 <__hexnan+0xa0>
 80083e6:	462a      	mov	r2, r5
 80083e8:	4649      	mov	r1, r9
 80083ea:	4620      	mov	r0, r4
 80083ec:	f7ff ff8a 	bl	8008304 <L_shift>
 80083f0:	4544      	cmp	r4, r8
 80083f2:	d936      	bls.n	8008462 <__hexnan+0x112>
 80083f4:	f1a8 0204 	sub.w	r2, r8, #4
 80083f8:	4623      	mov	r3, r4
 80083fa:	f853 1b04 	ldr.w	r1, [r3], #4
 80083fe:	f842 1f04 	str.w	r1, [r2, #4]!
 8008402:	429f      	cmp	r7, r3
 8008404:	d2f9      	bcs.n	80083fa <__hexnan+0xaa>
 8008406:	1b3b      	subs	r3, r7, r4
 8008408:	f023 0303 	bic.w	r3, r3, #3
 800840c:	3304      	adds	r3, #4
 800840e:	3401      	adds	r4, #1
 8008410:	3e03      	subs	r6, #3
 8008412:	42b4      	cmp	r4, r6
 8008414:	bf88      	it	hi
 8008416:	2304      	movhi	r3, #4
 8008418:	4443      	add	r3, r8
 800841a:	2200      	movs	r2, #0
 800841c:	f843 2b04 	str.w	r2, [r3], #4
 8008420:	429f      	cmp	r7, r3
 8008422:	d2fb      	bcs.n	800841c <__hexnan+0xcc>
 8008424:	683b      	ldr	r3, [r7, #0]
 8008426:	b91b      	cbnz	r3, 8008430 <__hexnan+0xe0>
 8008428:	4547      	cmp	r7, r8
 800842a:	d128      	bne.n	800847e <__hexnan+0x12e>
 800842c:	2301      	movs	r3, #1
 800842e:	603b      	str	r3, [r7, #0]
 8008430:	2005      	movs	r0, #5
 8008432:	b007      	add	sp, #28
 8008434:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008438:	3501      	adds	r5, #1
 800843a:	2d08      	cmp	r5, #8
 800843c:	f10b 0b01 	add.w	fp, fp, #1
 8008440:	dd06      	ble.n	8008450 <__hexnan+0x100>
 8008442:	4544      	cmp	r4, r8
 8008444:	d9c1      	bls.n	80083ca <__hexnan+0x7a>
 8008446:	2300      	movs	r3, #0
 8008448:	f844 3c04 	str.w	r3, [r4, #-4]
 800844c:	2501      	movs	r5, #1
 800844e:	3c04      	subs	r4, #4
 8008450:	6822      	ldr	r2, [r4, #0]
 8008452:	f000 000f 	and.w	r0, r0, #15
 8008456:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800845a:	6020      	str	r0, [r4, #0]
 800845c:	e7b5      	b.n	80083ca <__hexnan+0x7a>
 800845e:	2508      	movs	r5, #8
 8008460:	e7b3      	b.n	80083ca <__hexnan+0x7a>
 8008462:	9b01      	ldr	r3, [sp, #4]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d0dd      	beq.n	8008424 <__hexnan+0xd4>
 8008468:	f1c3 0320 	rsb	r3, r3, #32
 800846c:	f04f 32ff 	mov.w	r2, #4294967295
 8008470:	40da      	lsrs	r2, r3
 8008472:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008476:	4013      	ands	r3, r2
 8008478:	f846 3c04 	str.w	r3, [r6, #-4]
 800847c:	e7d2      	b.n	8008424 <__hexnan+0xd4>
 800847e:	3f04      	subs	r7, #4
 8008480:	e7d0      	b.n	8008424 <__hexnan+0xd4>
 8008482:	2004      	movs	r0, #4
 8008484:	e7d5      	b.n	8008432 <__hexnan+0xe2>
	...

08008488 <malloc>:
 8008488:	4b02      	ldr	r3, [pc, #8]	@ (8008494 <malloc+0xc>)
 800848a:	4601      	mov	r1, r0
 800848c:	6818      	ldr	r0, [r3, #0]
 800848e:	f000 b825 	b.w	80084dc <_malloc_r>
 8008492:	bf00      	nop
 8008494:	20000184 	.word	0x20000184

08008498 <sbrk_aligned>:
 8008498:	b570      	push	{r4, r5, r6, lr}
 800849a:	4e0f      	ldr	r6, [pc, #60]	@ (80084d8 <sbrk_aligned+0x40>)
 800849c:	460c      	mov	r4, r1
 800849e:	6831      	ldr	r1, [r6, #0]
 80084a0:	4605      	mov	r5, r0
 80084a2:	b911      	cbnz	r1, 80084aa <sbrk_aligned+0x12>
 80084a4:	f001 f808 	bl	80094b8 <_sbrk_r>
 80084a8:	6030      	str	r0, [r6, #0]
 80084aa:	4621      	mov	r1, r4
 80084ac:	4628      	mov	r0, r5
 80084ae:	f001 f803 	bl	80094b8 <_sbrk_r>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	d103      	bne.n	80084be <sbrk_aligned+0x26>
 80084b6:	f04f 34ff 	mov.w	r4, #4294967295
 80084ba:	4620      	mov	r0, r4
 80084bc:	bd70      	pop	{r4, r5, r6, pc}
 80084be:	1cc4      	adds	r4, r0, #3
 80084c0:	f024 0403 	bic.w	r4, r4, #3
 80084c4:	42a0      	cmp	r0, r4
 80084c6:	d0f8      	beq.n	80084ba <sbrk_aligned+0x22>
 80084c8:	1a21      	subs	r1, r4, r0
 80084ca:	4628      	mov	r0, r5
 80084cc:	f000 fff4 	bl	80094b8 <_sbrk_r>
 80084d0:	3001      	adds	r0, #1
 80084d2:	d1f2      	bne.n	80084ba <sbrk_aligned+0x22>
 80084d4:	e7ef      	b.n	80084b6 <sbrk_aligned+0x1e>
 80084d6:	bf00      	nop
 80084d8:	20000578 	.word	0x20000578

080084dc <_malloc_r>:
 80084dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80084e0:	1ccd      	adds	r5, r1, #3
 80084e2:	f025 0503 	bic.w	r5, r5, #3
 80084e6:	3508      	adds	r5, #8
 80084e8:	2d0c      	cmp	r5, #12
 80084ea:	bf38      	it	cc
 80084ec:	250c      	movcc	r5, #12
 80084ee:	2d00      	cmp	r5, #0
 80084f0:	4606      	mov	r6, r0
 80084f2:	db01      	blt.n	80084f8 <_malloc_r+0x1c>
 80084f4:	42a9      	cmp	r1, r5
 80084f6:	d904      	bls.n	8008502 <_malloc_r+0x26>
 80084f8:	230c      	movs	r3, #12
 80084fa:	6033      	str	r3, [r6, #0]
 80084fc:	2000      	movs	r0, #0
 80084fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008502:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80085d8 <_malloc_r+0xfc>
 8008506:	f000 f87b 	bl	8008600 <__malloc_lock>
 800850a:	f8d8 3000 	ldr.w	r3, [r8]
 800850e:	461c      	mov	r4, r3
 8008510:	bb44      	cbnz	r4, 8008564 <_malloc_r+0x88>
 8008512:	4629      	mov	r1, r5
 8008514:	4630      	mov	r0, r6
 8008516:	f7ff ffbf 	bl	8008498 <sbrk_aligned>
 800851a:	1c43      	adds	r3, r0, #1
 800851c:	4604      	mov	r4, r0
 800851e:	d158      	bne.n	80085d2 <_malloc_r+0xf6>
 8008520:	f8d8 4000 	ldr.w	r4, [r8]
 8008524:	4627      	mov	r7, r4
 8008526:	2f00      	cmp	r7, #0
 8008528:	d143      	bne.n	80085b2 <_malloc_r+0xd6>
 800852a:	2c00      	cmp	r4, #0
 800852c:	d04b      	beq.n	80085c6 <_malloc_r+0xea>
 800852e:	6823      	ldr	r3, [r4, #0]
 8008530:	4639      	mov	r1, r7
 8008532:	4630      	mov	r0, r6
 8008534:	eb04 0903 	add.w	r9, r4, r3
 8008538:	f000 ffbe 	bl	80094b8 <_sbrk_r>
 800853c:	4581      	cmp	r9, r0
 800853e:	d142      	bne.n	80085c6 <_malloc_r+0xea>
 8008540:	6821      	ldr	r1, [r4, #0]
 8008542:	1a6d      	subs	r5, r5, r1
 8008544:	4629      	mov	r1, r5
 8008546:	4630      	mov	r0, r6
 8008548:	f7ff ffa6 	bl	8008498 <sbrk_aligned>
 800854c:	3001      	adds	r0, #1
 800854e:	d03a      	beq.n	80085c6 <_malloc_r+0xea>
 8008550:	6823      	ldr	r3, [r4, #0]
 8008552:	442b      	add	r3, r5
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	f8d8 3000 	ldr.w	r3, [r8]
 800855a:	685a      	ldr	r2, [r3, #4]
 800855c:	bb62      	cbnz	r2, 80085b8 <_malloc_r+0xdc>
 800855e:	f8c8 7000 	str.w	r7, [r8]
 8008562:	e00f      	b.n	8008584 <_malloc_r+0xa8>
 8008564:	6822      	ldr	r2, [r4, #0]
 8008566:	1b52      	subs	r2, r2, r5
 8008568:	d420      	bmi.n	80085ac <_malloc_r+0xd0>
 800856a:	2a0b      	cmp	r2, #11
 800856c:	d917      	bls.n	800859e <_malloc_r+0xc2>
 800856e:	1961      	adds	r1, r4, r5
 8008570:	42a3      	cmp	r3, r4
 8008572:	6025      	str	r5, [r4, #0]
 8008574:	bf18      	it	ne
 8008576:	6059      	strne	r1, [r3, #4]
 8008578:	6863      	ldr	r3, [r4, #4]
 800857a:	bf08      	it	eq
 800857c:	f8c8 1000 	streq.w	r1, [r8]
 8008580:	5162      	str	r2, [r4, r5]
 8008582:	604b      	str	r3, [r1, #4]
 8008584:	4630      	mov	r0, r6
 8008586:	f000 f841 	bl	800860c <__malloc_unlock>
 800858a:	f104 000b 	add.w	r0, r4, #11
 800858e:	1d23      	adds	r3, r4, #4
 8008590:	f020 0007 	bic.w	r0, r0, #7
 8008594:	1ac2      	subs	r2, r0, r3
 8008596:	bf1c      	itt	ne
 8008598:	1a1b      	subne	r3, r3, r0
 800859a:	50a3      	strne	r3, [r4, r2]
 800859c:	e7af      	b.n	80084fe <_malloc_r+0x22>
 800859e:	6862      	ldr	r2, [r4, #4]
 80085a0:	42a3      	cmp	r3, r4
 80085a2:	bf0c      	ite	eq
 80085a4:	f8c8 2000 	streq.w	r2, [r8]
 80085a8:	605a      	strne	r2, [r3, #4]
 80085aa:	e7eb      	b.n	8008584 <_malloc_r+0xa8>
 80085ac:	4623      	mov	r3, r4
 80085ae:	6864      	ldr	r4, [r4, #4]
 80085b0:	e7ae      	b.n	8008510 <_malloc_r+0x34>
 80085b2:	463c      	mov	r4, r7
 80085b4:	687f      	ldr	r7, [r7, #4]
 80085b6:	e7b6      	b.n	8008526 <_malloc_r+0x4a>
 80085b8:	461a      	mov	r2, r3
 80085ba:	685b      	ldr	r3, [r3, #4]
 80085bc:	42a3      	cmp	r3, r4
 80085be:	d1fb      	bne.n	80085b8 <_malloc_r+0xdc>
 80085c0:	2300      	movs	r3, #0
 80085c2:	6053      	str	r3, [r2, #4]
 80085c4:	e7de      	b.n	8008584 <_malloc_r+0xa8>
 80085c6:	230c      	movs	r3, #12
 80085c8:	6033      	str	r3, [r6, #0]
 80085ca:	4630      	mov	r0, r6
 80085cc:	f000 f81e 	bl	800860c <__malloc_unlock>
 80085d0:	e794      	b.n	80084fc <_malloc_r+0x20>
 80085d2:	6005      	str	r5, [r0, #0]
 80085d4:	e7d6      	b.n	8008584 <_malloc_r+0xa8>
 80085d6:	bf00      	nop
 80085d8:	2000057c 	.word	0x2000057c

080085dc <__ascii_mbtowc>:
 80085dc:	b082      	sub	sp, #8
 80085de:	b901      	cbnz	r1, 80085e2 <__ascii_mbtowc+0x6>
 80085e0:	a901      	add	r1, sp, #4
 80085e2:	b142      	cbz	r2, 80085f6 <__ascii_mbtowc+0x1a>
 80085e4:	b14b      	cbz	r3, 80085fa <__ascii_mbtowc+0x1e>
 80085e6:	7813      	ldrb	r3, [r2, #0]
 80085e8:	600b      	str	r3, [r1, #0]
 80085ea:	7812      	ldrb	r2, [r2, #0]
 80085ec:	1e10      	subs	r0, r2, #0
 80085ee:	bf18      	it	ne
 80085f0:	2001      	movne	r0, #1
 80085f2:	b002      	add	sp, #8
 80085f4:	4770      	bx	lr
 80085f6:	4610      	mov	r0, r2
 80085f8:	e7fb      	b.n	80085f2 <__ascii_mbtowc+0x16>
 80085fa:	f06f 0001 	mvn.w	r0, #1
 80085fe:	e7f8      	b.n	80085f2 <__ascii_mbtowc+0x16>

08008600 <__malloc_lock>:
 8008600:	4801      	ldr	r0, [pc, #4]	@ (8008608 <__malloc_lock+0x8>)
 8008602:	f7fe bd42 	b.w	800708a <__retarget_lock_acquire_recursive>
 8008606:	bf00      	nop
 8008608:	20000574 	.word	0x20000574

0800860c <__malloc_unlock>:
 800860c:	4801      	ldr	r0, [pc, #4]	@ (8008614 <__malloc_unlock+0x8>)
 800860e:	f7fe bd3d 	b.w	800708c <__retarget_lock_release_recursive>
 8008612:	bf00      	nop
 8008614:	20000574 	.word	0x20000574

08008618 <_Balloc>:
 8008618:	b570      	push	{r4, r5, r6, lr}
 800861a:	69c6      	ldr	r6, [r0, #28]
 800861c:	4604      	mov	r4, r0
 800861e:	460d      	mov	r5, r1
 8008620:	b976      	cbnz	r6, 8008640 <_Balloc+0x28>
 8008622:	2010      	movs	r0, #16
 8008624:	f7ff ff30 	bl	8008488 <malloc>
 8008628:	4602      	mov	r2, r0
 800862a:	61e0      	str	r0, [r4, #28]
 800862c:	b920      	cbnz	r0, 8008638 <_Balloc+0x20>
 800862e:	4b18      	ldr	r3, [pc, #96]	@ (8008690 <_Balloc+0x78>)
 8008630:	4818      	ldr	r0, [pc, #96]	@ (8008694 <_Balloc+0x7c>)
 8008632:	216b      	movs	r1, #107	@ 0x6b
 8008634:	f000 ff50 	bl	80094d8 <__assert_func>
 8008638:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800863c:	6006      	str	r6, [r0, #0]
 800863e:	60c6      	str	r6, [r0, #12]
 8008640:	69e6      	ldr	r6, [r4, #28]
 8008642:	68f3      	ldr	r3, [r6, #12]
 8008644:	b183      	cbz	r3, 8008668 <_Balloc+0x50>
 8008646:	69e3      	ldr	r3, [r4, #28]
 8008648:	68db      	ldr	r3, [r3, #12]
 800864a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800864e:	b9b8      	cbnz	r0, 8008680 <_Balloc+0x68>
 8008650:	2101      	movs	r1, #1
 8008652:	fa01 f605 	lsl.w	r6, r1, r5
 8008656:	1d72      	adds	r2, r6, #5
 8008658:	0092      	lsls	r2, r2, #2
 800865a:	4620      	mov	r0, r4
 800865c:	f000 ff5a 	bl	8009514 <_calloc_r>
 8008660:	b160      	cbz	r0, 800867c <_Balloc+0x64>
 8008662:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008666:	e00e      	b.n	8008686 <_Balloc+0x6e>
 8008668:	2221      	movs	r2, #33	@ 0x21
 800866a:	2104      	movs	r1, #4
 800866c:	4620      	mov	r0, r4
 800866e:	f000 ff51 	bl	8009514 <_calloc_r>
 8008672:	69e3      	ldr	r3, [r4, #28]
 8008674:	60f0      	str	r0, [r6, #12]
 8008676:	68db      	ldr	r3, [r3, #12]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d1e4      	bne.n	8008646 <_Balloc+0x2e>
 800867c:	2000      	movs	r0, #0
 800867e:	bd70      	pop	{r4, r5, r6, pc}
 8008680:	6802      	ldr	r2, [r0, #0]
 8008682:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008686:	2300      	movs	r3, #0
 8008688:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800868c:	e7f7      	b.n	800867e <_Balloc+0x66>
 800868e:	bf00      	nop
 8008690:	08009ba8 	.word	0x08009ba8
 8008694:	08009c88 	.word	0x08009c88

08008698 <_Bfree>:
 8008698:	b570      	push	{r4, r5, r6, lr}
 800869a:	69c6      	ldr	r6, [r0, #28]
 800869c:	4605      	mov	r5, r0
 800869e:	460c      	mov	r4, r1
 80086a0:	b976      	cbnz	r6, 80086c0 <_Bfree+0x28>
 80086a2:	2010      	movs	r0, #16
 80086a4:	f7ff fef0 	bl	8008488 <malloc>
 80086a8:	4602      	mov	r2, r0
 80086aa:	61e8      	str	r0, [r5, #28]
 80086ac:	b920      	cbnz	r0, 80086b8 <_Bfree+0x20>
 80086ae:	4b09      	ldr	r3, [pc, #36]	@ (80086d4 <_Bfree+0x3c>)
 80086b0:	4809      	ldr	r0, [pc, #36]	@ (80086d8 <_Bfree+0x40>)
 80086b2:	218f      	movs	r1, #143	@ 0x8f
 80086b4:	f000 ff10 	bl	80094d8 <__assert_func>
 80086b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086bc:	6006      	str	r6, [r0, #0]
 80086be:	60c6      	str	r6, [r0, #12]
 80086c0:	b13c      	cbz	r4, 80086d2 <_Bfree+0x3a>
 80086c2:	69eb      	ldr	r3, [r5, #28]
 80086c4:	6862      	ldr	r2, [r4, #4]
 80086c6:	68db      	ldr	r3, [r3, #12]
 80086c8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086cc:	6021      	str	r1, [r4, #0]
 80086ce:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086d2:	bd70      	pop	{r4, r5, r6, pc}
 80086d4:	08009ba8 	.word	0x08009ba8
 80086d8:	08009c88 	.word	0x08009c88

080086dc <__multadd>:
 80086dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80086e0:	690d      	ldr	r5, [r1, #16]
 80086e2:	4607      	mov	r7, r0
 80086e4:	460c      	mov	r4, r1
 80086e6:	461e      	mov	r6, r3
 80086e8:	f101 0c14 	add.w	ip, r1, #20
 80086ec:	2000      	movs	r0, #0
 80086ee:	f8dc 3000 	ldr.w	r3, [ip]
 80086f2:	b299      	uxth	r1, r3
 80086f4:	fb02 6101 	mla	r1, r2, r1, r6
 80086f8:	0c1e      	lsrs	r6, r3, #16
 80086fa:	0c0b      	lsrs	r3, r1, #16
 80086fc:	fb02 3306 	mla	r3, r2, r6, r3
 8008700:	b289      	uxth	r1, r1
 8008702:	3001      	adds	r0, #1
 8008704:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008708:	4285      	cmp	r5, r0
 800870a:	f84c 1b04 	str.w	r1, [ip], #4
 800870e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008712:	dcec      	bgt.n	80086ee <__multadd+0x12>
 8008714:	b30e      	cbz	r6, 800875a <__multadd+0x7e>
 8008716:	68a3      	ldr	r3, [r4, #8]
 8008718:	42ab      	cmp	r3, r5
 800871a:	dc19      	bgt.n	8008750 <__multadd+0x74>
 800871c:	6861      	ldr	r1, [r4, #4]
 800871e:	4638      	mov	r0, r7
 8008720:	3101      	adds	r1, #1
 8008722:	f7ff ff79 	bl	8008618 <_Balloc>
 8008726:	4680      	mov	r8, r0
 8008728:	b928      	cbnz	r0, 8008736 <__multadd+0x5a>
 800872a:	4602      	mov	r2, r0
 800872c:	4b0c      	ldr	r3, [pc, #48]	@ (8008760 <__multadd+0x84>)
 800872e:	480d      	ldr	r0, [pc, #52]	@ (8008764 <__multadd+0x88>)
 8008730:	21ba      	movs	r1, #186	@ 0xba
 8008732:	f000 fed1 	bl	80094d8 <__assert_func>
 8008736:	6922      	ldr	r2, [r4, #16]
 8008738:	3202      	adds	r2, #2
 800873a:	f104 010c 	add.w	r1, r4, #12
 800873e:	0092      	lsls	r2, r2, #2
 8008740:	300c      	adds	r0, #12
 8008742:	f7fe fca4 	bl	800708e <memcpy>
 8008746:	4621      	mov	r1, r4
 8008748:	4638      	mov	r0, r7
 800874a:	f7ff ffa5 	bl	8008698 <_Bfree>
 800874e:	4644      	mov	r4, r8
 8008750:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008754:	3501      	adds	r5, #1
 8008756:	615e      	str	r6, [r3, #20]
 8008758:	6125      	str	r5, [r4, #16]
 800875a:	4620      	mov	r0, r4
 800875c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008760:	08009c17 	.word	0x08009c17
 8008764:	08009c88 	.word	0x08009c88

08008768 <__s2b>:
 8008768:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800876c:	460c      	mov	r4, r1
 800876e:	4615      	mov	r5, r2
 8008770:	461f      	mov	r7, r3
 8008772:	2209      	movs	r2, #9
 8008774:	3308      	adds	r3, #8
 8008776:	4606      	mov	r6, r0
 8008778:	fb93 f3f2 	sdiv	r3, r3, r2
 800877c:	2100      	movs	r1, #0
 800877e:	2201      	movs	r2, #1
 8008780:	429a      	cmp	r2, r3
 8008782:	db09      	blt.n	8008798 <__s2b+0x30>
 8008784:	4630      	mov	r0, r6
 8008786:	f7ff ff47 	bl	8008618 <_Balloc>
 800878a:	b940      	cbnz	r0, 800879e <__s2b+0x36>
 800878c:	4602      	mov	r2, r0
 800878e:	4b19      	ldr	r3, [pc, #100]	@ (80087f4 <__s2b+0x8c>)
 8008790:	4819      	ldr	r0, [pc, #100]	@ (80087f8 <__s2b+0x90>)
 8008792:	21d3      	movs	r1, #211	@ 0xd3
 8008794:	f000 fea0 	bl	80094d8 <__assert_func>
 8008798:	0052      	lsls	r2, r2, #1
 800879a:	3101      	adds	r1, #1
 800879c:	e7f0      	b.n	8008780 <__s2b+0x18>
 800879e:	9b08      	ldr	r3, [sp, #32]
 80087a0:	6143      	str	r3, [r0, #20]
 80087a2:	2d09      	cmp	r5, #9
 80087a4:	f04f 0301 	mov.w	r3, #1
 80087a8:	6103      	str	r3, [r0, #16]
 80087aa:	dd16      	ble.n	80087da <__s2b+0x72>
 80087ac:	f104 0909 	add.w	r9, r4, #9
 80087b0:	46c8      	mov	r8, r9
 80087b2:	442c      	add	r4, r5
 80087b4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087b8:	4601      	mov	r1, r0
 80087ba:	3b30      	subs	r3, #48	@ 0x30
 80087bc:	220a      	movs	r2, #10
 80087be:	4630      	mov	r0, r6
 80087c0:	f7ff ff8c 	bl	80086dc <__multadd>
 80087c4:	45a0      	cmp	r8, r4
 80087c6:	d1f5      	bne.n	80087b4 <__s2b+0x4c>
 80087c8:	f1a5 0408 	sub.w	r4, r5, #8
 80087cc:	444c      	add	r4, r9
 80087ce:	1b2d      	subs	r5, r5, r4
 80087d0:	1963      	adds	r3, r4, r5
 80087d2:	42bb      	cmp	r3, r7
 80087d4:	db04      	blt.n	80087e0 <__s2b+0x78>
 80087d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80087da:	340a      	adds	r4, #10
 80087dc:	2509      	movs	r5, #9
 80087de:	e7f6      	b.n	80087ce <__s2b+0x66>
 80087e0:	f814 3b01 	ldrb.w	r3, [r4], #1
 80087e4:	4601      	mov	r1, r0
 80087e6:	3b30      	subs	r3, #48	@ 0x30
 80087e8:	220a      	movs	r2, #10
 80087ea:	4630      	mov	r0, r6
 80087ec:	f7ff ff76 	bl	80086dc <__multadd>
 80087f0:	e7ee      	b.n	80087d0 <__s2b+0x68>
 80087f2:	bf00      	nop
 80087f4:	08009c17 	.word	0x08009c17
 80087f8:	08009c88 	.word	0x08009c88

080087fc <__hi0bits>:
 80087fc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008800:	4603      	mov	r3, r0
 8008802:	bf36      	itet	cc
 8008804:	0403      	lslcc	r3, r0, #16
 8008806:	2000      	movcs	r0, #0
 8008808:	2010      	movcc	r0, #16
 800880a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800880e:	bf3c      	itt	cc
 8008810:	021b      	lslcc	r3, r3, #8
 8008812:	3008      	addcc	r0, #8
 8008814:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008818:	bf3c      	itt	cc
 800881a:	011b      	lslcc	r3, r3, #4
 800881c:	3004      	addcc	r0, #4
 800881e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008822:	bf3c      	itt	cc
 8008824:	009b      	lslcc	r3, r3, #2
 8008826:	3002      	addcc	r0, #2
 8008828:	2b00      	cmp	r3, #0
 800882a:	db05      	blt.n	8008838 <__hi0bits+0x3c>
 800882c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008830:	f100 0001 	add.w	r0, r0, #1
 8008834:	bf08      	it	eq
 8008836:	2020      	moveq	r0, #32
 8008838:	4770      	bx	lr

0800883a <__lo0bits>:
 800883a:	6803      	ldr	r3, [r0, #0]
 800883c:	4602      	mov	r2, r0
 800883e:	f013 0007 	ands.w	r0, r3, #7
 8008842:	d00b      	beq.n	800885c <__lo0bits+0x22>
 8008844:	07d9      	lsls	r1, r3, #31
 8008846:	d421      	bmi.n	800888c <__lo0bits+0x52>
 8008848:	0798      	lsls	r0, r3, #30
 800884a:	bf49      	itett	mi
 800884c:	085b      	lsrmi	r3, r3, #1
 800884e:	089b      	lsrpl	r3, r3, #2
 8008850:	2001      	movmi	r0, #1
 8008852:	6013      	strmi	r3, [r2, #0]
 8008854:	bf5c      	itt	pl
 8008856:	6013      	strpl	r3, [r2, #0]
 8008858:	2002      	movpl	r0, #2
 800885a:	4770      	bx	lr
 800885c:	b299      	uxth	r1, r3
 800885e:	b909      	cbnz	r1, 8008864 <__lo0bits+0x2a>
 8008860:	0c1b      	lsrs	r3, r3, #16
 8008862:	2010      	movs	r0, #16
 8008864:	b2d9      	uxtb	r1, r3
 8008866:	b909      	cbnz	r1, 800886c <__lo0bits+0x32>
 8008868:	3008      	adds	r0, #8
 800886a:	0a1b      	lsrs	r3, r3, #8
 800886c:	0719      	lsls	r1, r3, #28
 800886e:	bf04      	itt	eq
 8008870:	091b      	lsreq	r3, r3, #4
 8008872:	3004      	addeq	r0, #4
 8008874:	0799      	lsls	r1, r3, #30
 8008876:	bf04      	itt	eq
 8008878:	089b      	lsreq	r3, r3, #2
 800887a:	3002      	addeq	r0, #2
 800887c:	07d9      	lsls	r1, r3, #31
 800887e:	d403      	bmi.n	8008888 <__lo0bits+0x4e>
 8008880:	085b      	lsrs	r3, r3, #1
 8008882:	f100 0001 	add.w	r0, r0, #1
 8008886:	d003      	beq.n	8008890 <__lo0bits+0x56>
 8008888:	6013      	str	r3, [r2, #0]
 800888a:	4770      	bx	lr
 800888c:	2000      	movs	r0, #0
 800888e:	4770      	bx	lr
 8008890:	2020      	movs	r0, #32
 8008892:	4770      	bx	lr

08008894 <__i2b>:
 8008894:	b510      	push	{r4, lr}
 8008896:	460c      	mov	r4, r1
 8008898:	2101      	movs	r1, #1
 800889a:	f7ff febd 	bl	8008618 <_Balloc>
 800889e:	4602      	mov	r2, r0
 80088a0:	b928      	cbnz	r0, 80088ae <__i2b+0x1a>
 80088a2:	4b05      	ldr	r3, [pc, #20]	@ (80088b8 <__i2b+0x24>)
 80088a4:	4805      	ldr	r0, [pc, #20]	@ (80088bc <__i2b+0x28>)
 80088a6:	f240 1145 	movw	r1, #325	@ 0x145
 80088aa:	f000 fe15 	bl	80094d8 <__assert_func>
 80088ae:	2301      	movs	r3, #1
 80088b0:	6144      	str	r4, [r0, #20]
 80088b2:	6103      	str	r3, [r0, #16]
 80088b4:	bd10      	pop	{r4, pc}
 80088b6:	bf00      	nop
 80088b8:	08009c17 	.word	0x08009c17
 80088bc:	08009c88 	.word	0x08009c88

080088c0 <__multiply>:
 80088c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c4:	4617      	mov	r7, r2
 80088c6:	690a      	ldr	r2, [r1, #16]
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	429a      	cmp	r2, r3
 80088cc:	bfa8      	it	ge
 80088ce:	463b      	movge	r3, r7
 80088d0:	4689      	mov	r9, r1
 80088d2:	bfa4      	itt	ge
 80088d4:	460f      	movge	r7, r1
 80088d6:	4699      	movge	r9, r3
 80088d8:	693d      	ldr	r5, [r7, #16]
 80088da:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80088de:	68bb      	ldr	r3, [r7, #8]
 80088e0:	6879      	ldr	r1, [r7, #4]
 80088e2:	eb05 060a 	add.w	r6, r5, sl
 80088e6:	42b3      	cmp	r3, r6
 80088e8:	b085      	sub	sp, #20
 80088ea:	bfb8      	it	lt
 80088ec:	3101      	addlt	r1, #1
 80088ee:	f7ff fe93 	bl	8008618 <_Balloc>
 80088f2:	b930      	cbnz	r0, 8008902 <__multiply+0x42>
 80088f4:	4602      	mov	r2, r0
 80088f6:	4b41      	ldr	r3, [pc, #260]	@ (80089fc <__multiply+0x13c>)
 80088f8:	4841      	ldr	r0, [pc, #260]	@ (8008a00 <__multiply+0x140>)
 80088fa:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80088fe:	f000 fdeb 	bl	80094d8 <__assert_func>
 8008902:	f100 0414 	add.w	r4, r0, #20
 8008906:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800890a:	4623      	mov	r3, r4
 800890c:	2200      	movs	r2, #0
 800890e:	4573      	cmp	r3, lr
 8008910:	d320      	bcc.n	8008954 <__multiply+0x94>
 8008912:	f107 0814 	add.w	r8, r7, #20
 8008916:	f109 0114 	add.w	r1, r9, #20
 800891a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800891e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8008922:	9302      	str	r3, [sp, #8]
 8008924:	1beb      	subs	r3, r5, r7
 8008926:	3b15      	subs	r3, #21
 8008928:	f023 0303 	bic.w	r3, r3, #3
 800892c:	3304      	adds	r3, #4
 800892e:	3715      	adds	r7, #21
 8008930:	42bd      	cmp	r5, r7
 8008932:	bf38      	it	cc
 8008934:	2304      	movcc	r3, #4
 8008936:	9301      	str	r3, [sp, #4]
 8008938:	9b02      	ldr	r3, [sp, #8]
 800893a:	9103      	str	r1, [sp, #12]
 800893c:	428b      	cmp	r3, r1
 800893e:	d80c      	bhi.n	800895a <__multiply+0x9a>
 8008940:	2e00      	cmp	r6, #0
 8008942:	dd03      	ble.n	800894c <__multiply+0x8c>
 8008944:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008948:	2b00      	cmp	r3, #0
 800894a:	d055      	beq.n	80089f8 <__multiply+0x138>
 800894c:	6106      	str	r6, [r0, #16]
 800894e:	b005      	add	sp, #20
 8008950:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008954:	f843 2b04 	str.w	r2, [r3], #4
 8008958:	e7d9      	b.n	800890e <__multiply+0x4e>
 800895a:	f8b1 a000 	ldrh.w	sl, [r1]
 800895e:	f1ba 0f00 	cmp.w	sl, #0
 8008962:	d01f      	beq.n	80089a4 <__multiply+0xe4>
 8008964:	46c4      	mov	ip, r8
 8008966:	46a1      	mov	r9, r4
 8008968:	2700      	movs	r7, #0
 800896a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800896e:	f8d9 3000 	ldr.w	r3, [r9]
 8008972:	fa1f fb82 	uxth.w	fp, r2
 8008976:	b29b      	uxth	r3, r3
 8008978:	fb0a 330b 	mla	r3, sl, fp, r3
 800897c:	443b      	add	r3, r7
 800897e:	f8d9 7000 	ldr.w	r7, [r9]
 8008982:	0c12      	lsrs	r2, r2, #16
 8008984:	0c3f      	lsrs	r7, r7, #16
 8008986:	fb0a 7202 	mla	r2, sl, r2, r7
 800898a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800898e:	b29b      	uxth	r3, r3
 8008990:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008994:	4565      	cmp	r5, ip
 8008996:	f849 3b04 	str.w	r3, [r9], #4
 800899a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800899e:	d8e4      	bhi.n	800896a <__multiply+0xaa>
 80089a0:	9b01      	ldr	r3, [sp, #4]
 80089a2:	50e7      	str	r7, [r4, r3]
 80089a4:	9b03      	ldr	r3, [sp, #12]
 80089a6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089aa:	3104      	adds	r1, #4
 80089ac:	f1b9 0f00 	cmp.w	r9, #0
 80089b0:	d020      	beq.n	80089f4 <__multiply+0x134>
 80089b2:	6823      	ldr	r3, [r4, #0]
 80089b4:	4647      	mov	r7, r8
 80089b6:	46a4      	mov	ip, r4
 80089b8:	f04f 0a00 	mov.w	sl, #0
 80089bc:	f8b7 b000 	ldrh.w	fp, [r7]
 80089c0:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80089c4:	fb09 220b 	mla	r2, r9, fp, r2
 80089c8:	4452      	add	r2, sl
 80089ca:	b29b      	uxth	r3, r3
 80089cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089d0:	f84c 3b04 	str.w	r3, [ip], #4
 80089d4:	f857 3b04 	ldr.w	r3, [r7], #4
 80089d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089dc:	f8bc 3000 	ldrh.w	r3, [ip]
 80089e0:	fb09 330a 	mla	r3, r9, sl, r3
 80089e4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 80089e8:	42bd      	cmp	r5, r7
 80089ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80089ee:	d8e5      	bhi.n	80089bc <__multiply+0xfc>
 80089f0:	9a01      	ldr	r2, [sp, #4]
 80089f2:	50a3      	str	r3, [r4, r2]
 80089f4:	3404      	adds	r4, #4
 80089f6:	e79f      	b.n	8008938 <__multiply+0x78>
 80089f8:	3e01      	subs	r6, #1
 80089fa:	e7a1      	b.n	8008940 <__multiply+0x80>
 80089fc:	08009c17 	.word	0x08009c17
 8008a00:	08009c88 	.word	0x08009c88

08008a04 <__pow5mult>:
 8008a04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a08:	4615      	mov	r5, r2
 8008a0a:	f012 0203 	ands.w	r2, r2, #3
 8008a0e:	4607      	mov	r7, r0
 8008a10:	460e      	mov	r6, r1
 8008a12:	d007      	beq.n	8008a24 <__pow5mult+0x20>
 8008a14:	4c25      	ldr	r4, [pc, #148]	@ (8008aac <__pow5mult+0xa8>)
 8008a16:	3a01      	subs	r2, #1
 8008a18:	2300      	movs	r3, #0
 8008a1a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a1e:	f7ff fe5d 	bl	80086dc <__multadd>
 8008a22:	4606      	mov	r6, r0
 8008a24:	10ad      	asrs	r5, r5, #2
 8008a26:	d03d      	beq.n	8008aa4 <__pow5mult+0xa0>
 8008a28:	69fc      	ldr	r4, [r7, #28]
 8008a2a:	b97c      	cbnz	r4, 8008a4c <__pow5mult+0x48>
 8008a2c:	2010      	movs	r0, #16
 8008a2e:	f7ff fd2b 	bl	8008488 <malloc>
 8008a32:	4602      	mov	r2, r0
 8008a34:	61f8      	str	r0, [r7, #28]
 8008a36:	b928      	cbnz	r0, 8008a44 <__pow5mult+0x40>
 8008a38:	4b1d      	ldr	r3, [pc, #116]	@ (8008ab0 <__pow5mult+0xac>)
 8008a3a:	481e      	ldr	r0, [pc, #120]	@ (8008ab4 <__pow5mult+0xb0>)
 8008a3c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a40:	f000 fd4a 	bl	80094d8 <__assert_func>
 8008a44:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a48:	6004      	str	r4, [r0, #0]
 8008a4a:	60c4      	str	r4, [r0, #12]
 8008a4c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a50:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a54:	b94c      	cbnz	r4, 8008a6a <__pow5mult+0x66>
 8008a56:	f240 2171 	movw	r1, #625	@ 0x271
 8008a5a:	4638      	mov	r0, r7
 8008a5c:	f7ff ff1a 	bl	8008894 <__i2b>
 8008a60:	2300      	movs	r3, #0
 8008a62:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a66:	4604      	mov	r4, r0
 8008a68:	6003      	str	r3, [r0, #0]
 8008a6a:	f04f 0900 	mov.w	r9, #0
 8008a6e:	07eb      	lsls	r3, r5, #31
 8008a70:	d50a      	bpl.n	8008a88 <__pow5mult+0x84>
 8008a72:	4631      	mov	r1, r6
 8008a74:	4622      	mov	r2, r4
 8008a76:	4638      	mov	r0, r7
 8008a78:	f7ff ff22 	bl	80088c0 <__multiply>
 8008a7c:	4631      	mov	r1, r6
 8008a7e:	4680      	mov	r8, r0
 8008a80:	4638      	mov	r0, r7
 8008a82:	f7ff fe09 	bl	8008698 <_Bfree>
 8008a86:	4646      	mov	r6, r8
 8008a88:	106d      	asrs	r5, r5, #1
 8008a8a:	d00b      	beq.n	8008aa4 <__pow5mult+0xa0>
 8008a8c:	6820      	ldr	r0, [r4, #0]
 8008a8e:	b938      	cbnz	r0, 8008aa0 <__pow5mult+0x9c>
 8008a90:	4622      	mov	r2, r4
 8008a92:	4621      	mov	r1, r4
 8008a94:	4638      	mov	r0, r7
 8008a96:	f7ff ff13 	bl	80088c0 <__multiply>
 8008a9a:	6020      	str	r0, [r4, #0]
 8008a9c:	f8c0 9000 	str.w	r9, [r0]
 8008aa0:	4604      	mov	r4, r0
 8008aa2:	e7e4      	b.n	8008a6e <__pow5mult+0x6a>
 8008aa4:	4630      	mov	r0, r6
 8008aa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008aaa:	bf00      	nop
 8008aac:	08009d80 	.word	0x08009d80
 8008ab0:	08009ba8 	.word	0x08009ba8
 8008ab4:	08009c88 	.word	0x08009c88

08008ab8 <__lshift>:
 8008ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008abc:	460c      	mov	r4, r1
 8008abe:	6849      	ldr	r1, [r1, #4]
 8008ac0:	6923      	ldr	r3, [r4, #16]
 8008ac2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008ac6:	68a3      	ldr	r3, [r4, #8]
 8008ac8:	4607      	mov	r7, r0
 8008aca:	4691      	mov	r9, r2
 8008acc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008ad0:	f108 0601 	add.w	r6, r8, #1
 8008ad4:	42b3      	cmp	r3, r6
 8008ad6:	db0b      	blt.n	8008af0 <__lshift+0x38>
 8008ad8:	4638      	mov	r0, r7
 8008ada:	f7ff fd9d 	bl	8008618 <_Balloc>
 8008ade:	4605      	mov	r5, r0
 8008ae0:	b948      	cbnz	r0, 8008af6 <__lshift+0x3e>
 8008ae2:	4602      	mov	r2, r0
 8008ae4:	4b28      	ldr	r3, [pc, #160]	@ (8008b88 <__lshift+0xd0>)
 8008ae6:	4829      	ldr	r0, [pc, #164]	@ (8008b8c <__lshift+0xd4>)
 8008ae8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008aec:	f000 fcf4 	bl	80094d8 <__assert_func>
 8008af0:	3101      	adds	r1, #1
 8008af2:	005b      	lsls	r3, r3, #1
 8008af4:	e7ee      	b.n	8008ad4 <__lshift+0x1c>
 8008af6:	2300      	movs	r3, #0
 8008af8:	f100 0114 	add.w	r1, r0, #20
 8008afc:	f100 0210 	add.w	r2, r0, #16
 8008b00:	4618      	mov	r0, r3
 8008b02:	4553      	cmp	r3, sl
 8008b04:	db33      	blt.n	8008b6e <__lshift+0xb6>
 8008b06:	6920      	ldr	r0, [r4, #16]
 8008b08:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b0c:	f104 0314 	add.w	r3, r4, #20
 8008b10:	f019 091f 	ands.w	r9, r9, #31
 8008b14:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b18:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b1c:	d02b      	beq.n	8008b76 <__lshift+0xbe>
 8008b1e:	f1c9 0e20 	rsb	lr, r9, #32
 8008b22:	468a      	mov	sl, r1
 8008b24:	2200      	movs	r2, #0
 8008b26:	6818      	ldr	r0, [r3, #0]
 8008b28:	fa00 f009 	lsl.w	r0, r0, r9
 8008b2c:	4310      	orrs	r0, r2
 8008b2e:	f84a 0b04 	str.w	r0, [sl], #4
 8008b32:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b36:	459c      	cmp	ip, r3
 8008b38:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b3c:	d8f3      	bhi.n	8008b26 <__lshift+0x6e>
 8008b3e:	ebac 0304 	sub.w	r3, ip, r4
 8008b42:	3b15      	subs	r3, #21
 8008b44:	f023 0303 	bic.w	r3, r3, #3
 8008b48:	3304      	adds	r3, #4
 8008b4a:	f104 0015 	add.w	r0, r4, #21
 8008b4e:	4560      	cmp	r0, ip
 8008b50:	bf88      	it	hi
 8008b52:	2304      	movhi	r3, #4
 8008b54:	50ca      	str	r2, [r1, r3]
 8008b56:	b10a      	cbz	r2, 8008b5c <__lshift+0xa4>
 8008b58:	f108 0602 	add.w	r6, r8, #2
 8008b5c:	3e01      	subs	r6, #1
 8008b5e:	4638      	mov	r0, r7
 8008b60:	612e      	str	r6, [r5, #16]
 8008b62:	4621      	mov	r1, r4
 8008b64:	f7ff fd98 	bl	8008698 <_Bfree>
 8008b68:	4628      	mov	r0, r5
 8008b6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6e:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b72:	3301      	adds	r3, #1
 8008b74:	e7c5      	b.n	8008b02 <__lshift+0x4a>
 8008b76:	3904      	subs	r1, #4
 8008b78:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b7c:	f841 2f04 	str.w	r2, [r1, #4]!
 8008b80:	459c      	cmp	ip, r3
 8008b82:	d8f9      	bhi.n	8008b78 <__lshift+0xc0>
 8008b84:	e7ea      	b.n	8008b5c <__lshift+0xa4>
 8008b86:	bf00      	nop
 8008b88:	08009c17 	.word	0x08009c17
 8008b8c:	08009c88 	.word	0x08009c88

08008b90 <__mcmp>:
 8008b90:	690a      	ldr	r2, [r1, #16]
 8008b92:	4603      	mov	r3, r0
 8008b94:	6900      	ldr	r0, [r0, #16]
 8008b96:	1a80      	subs	r0, r0, r2
 8008b98:	b530      	push	{r4, r5, lr}
 8008b9a:	d10e      	bne.n	8008bba <__mcmp+0x2a>
 8008b9c:	3314      	adds	r3, #20
 8008b9e:	3114      	adds	r1, #20
 8008ba0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008ba4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008ba8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bb0:	4295      	cmp	r5, r2
 8008bb2:	d003      	beq.n	8008bbc <__mcmp+0x2c>
 8008bb4:	d205      	bcs.n	8008bc2 <__mcmp+0x32>
 8008bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bba:	bd30      	pop	{r4, r5, pc}
 8008bbc:	42a3      	cmp	r3, r4
 8008bbe:	d3f3      	bcc.n	8008ba8 <__mcmp+0x18>
 8008bc0:	e7fb      	b.n	8008bba <__mcmp+0x2a>
 8008bc2:	2001      	movs	r0, #1
 8008bc4:	e7f9      	b.n	8008bba <__mcmp+0x2a>
	...

08008bc8 <__mdiff>:
 8008bc8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	4689      	mov	r9, r1
 8008bce:	4606      	mov	r6, r0
 8008bd0:	4611      	mov	r1, r2
 8008bd2:	4648      	mov	r0, r9
 8008bd4:	4614      	mov	r4, r2
 8008bd6:	f7ff ffdb 	bl	8008b90 <__mcmp>
 8008bda:	1e05      	subs	r5, r0, #0
 8008bdc:	d112      	bne.n	8008c04 <__mdiff+0x3c>
 8008bde:	4629      	mov	r1, r5
 8008be0:	4630      	mov	r0, r6
 8008be2:	f7ff fd19 	bl	8008618 <_Balloc>
 8008be6:	4602      	mov	r2, r0
 8008be8:	b928      	cbnz	r0, 8008bf6 <__mdiff+0x2e>
 8008bea:	4b3f      	ldr	r3, [pc, #252]	@ (8008ce8 <__mdiff+0x120>)
 8008bec:	f240 2137 	movw	r1, #567	@ 0x237
 8008bf0:	483e      	ldr	r0, [pc, #248]	@ (8008cec <__mdiff+0x124>)
 8008bf2:	f000 fc71 	bl	80094d8 <__assert_func>
 8008bf6:	2301      	movs	r3, #1
 8008bf8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008bfc:	4610      	mov	r0, r2
 8008bfe:	b003      	add	sp, #12
 8008c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c04:	bfbc      	itt	lt
 8008c06:	464b      	movlt	r3, r9
 8008c08:	46a1      	movlt	r9, r4
 8008c0a:	4630      	mov	r0, r6
 8008c0c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c10:	bfba      	itte	lt
 8008c12:	461c      	movlt	r4, r3
 8008c14:	2501      	movlt	r5, #1
 8008c16:	2500      	movge	r5, #0
 8008c18:	f7ff fcfe 	bl	8008618 <_Balloc>
 8008c1c:	4602      	mov	r2, r0
 8008c1e:	b918      	cbnz	r0, 8008c28 <__mdiff+0x60>
 8008c20:	4b31      	ldr	r3, [pc, #196]	@ (8008ce8 <__mdiff+0x120>)
 8008c22:	f240 2145 	movw	r1, #581	@ 0x245
 8008c26:	e7e3      	b.n	8008bf0 <__mdiff+0x28>
 8008c28:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c2c:	6926      	ldr	r6, [r4, #16]
 8008c2e:	60c5      	str	r5, [r0, #12]
 8008c30:	f109 0310 	add.w	r3, r9, #16
 8008c34:	f109 0514 	add.w	r5, r9, #20
 8008c38:	f104 0e14 	add.w	lr, r4, #20
 8008c3c:	f100 0b14 	add.w	fp, r0, #20
 8008c40:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c44:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c48:	9301      	str	r3, [sp, #4]
 8008c4a:	46d9      	mov	r9, fp
 8008c4c:	f04f 0c00 	mov.w	ip, #0
 8008c50:	9b01      	ldr	r3, [sp, #4]
 8008c52:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c56:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c5a:	9301      	str	r3, [sp, #4]
 8008c5c:	fa1f f38a 	uxth.w	r3, sl
 8008c60:	4619      	mov	r1, r3
 8008c62:	b283      	uxth	r3, r0
 8008c64:	1acb      	subs	r3, r1, r3
 8008c66:	0c00      	lsrs	r0, r0, #16
 8008c68:	4463      	add	r3, ip
 8008c6a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c6e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c72:	b29b      	uxth	r3, r3
 8008c74:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008c78:	4576      	cmp	r6, lr
 8008c7a:	f849 3b04 	str.w	r3, [r9], #4
 8008c7e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008c82:	d8e5      	bhi.n	8008c50 <__mdiff+0x88>
 8008c84:	1b33      	subs	r3, r6, r4
 8008c86:	3b15      	subs	r3, #21
 8008c88:	f023 0303 	bic.w	r3, r3, #3
 8008c8c:	3415      	adds	r4, #21
 8008c8e:	3304      	adds	r3, #4
 8008c90:	42a6      	cmp	r6, r4
 8008c92:	bf38      	it	cc
 8008c94:	2304      	movcc	r3, #4
 8008c96:	441d      	add	r5, r3
 8008c98:	445b      	add	r3, fp
 8008c9a:	461e      	mov	r6, r3
 8008c9c:	462c      	mov	r4, r5
 8008c9e:	4544      	cmp	r4, r8
 8008ca0:	d30e      	bcc.n	8008cc0 <__mdiff+0xf8>
 8008ca2:	f108 0103 	add.w	r1, r8, #3
 8008ca6:	1b49      	subs	r1, r1, r5
 8008ca8:	f021 0103 	bic.w	r1, r1, #3
 8008cac:	3d03      	subs	r5, #3
 8008cae:	45a8      	cmp	r8, r5
 8008cb0:	bf38      	it	cc
 8008cb2:	2100      	movcc	r1, #0
 8008cb4:	440b      	add	r3, r1
 8008cb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008cba:	b191      	cbz	r1, 8008ce2 <__mdiff+0x11a>
 8008cbc:	6117      	str	r7, [r2, #16]
 8008cbe:	e79d      	b.n	8008bfc <__mdiff+0x34>
 8008cc0:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cc4:	46e6      	mov	lr, ip
 8008cc6:	0c08      	lsrs	r0, r1, #16
 8008cc8:	fa1c fc81 	uxtah	ip, ip, r1
 8008ccc:	4471      	add	r1, lr
 8008cce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008cd2:	b289      	uxth	r1, r1
 8008cd4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008cd8:	f846 1b04 	str.w	r1, [r6], #4
 8008cdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008ce0:	e7dd      	b.n	8008c9e <__mdiff+0xd6>
 8008ce2:	3f01      	subs	r7, #1
 8008ce4:	e7e7      	b.n	8008cb6 <__mdiff+0xee>
 8008ce6:	bf00      	nop
 8008ce8:	08009c17 	.word	0x08009c17
 8008cec:	08009c88 	.word	0x08009c88

08008cf0 <__ulp>:
 8008cf0:	b082      	sub	sp, #8
 8008cf2:	ed8d 0b00 	vstr	d0, [sp]
 8008cf6:	9a01      	ldr	r2, [sp, #4]
 8008cf8:	4b0f      	ldr	r3, [pc, #60]	@ (8008d38 <__ulp+0x48>)
 8008cfa:	4013      	ands	r3, r2
 8008cfc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d00:	2b00      	cmp	r3, #0
 8008d02:	dc08      	bgt.n	8008d16 <__ulp+0x26>
 8008d04:	425b      	negs	r3, r3
 8008d06:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008d0a:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d0e:	da04      	bge.n	8008d1a <__ulp+0x2a>
 8008d10:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d14:	4113      	asrs	r3, r2
 8008d16:	2200      	movs	r2, #0
 8008d18:	e008      	b.n	8008d2c <__ulp+0x3c>
 8008d1a:	f1a2 0314 	sub.w	r3, r2, #20
 8008d1e:	2b1e      	cmp	r3, #30
 8008d20:	bfda      	itte	le
 8008d22:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008d26:	40da      	lsrle	r2, r3
 8008d28:	2201      	movgt	r2, #1
 8008d2a:	2300      	movs	r3, #0
 8008d2c:	4619      	mov	r1, r3
 8008d2e:	4610      	mov	r0, r2
 8008d30:	ec41 0b10 	vmov	d0, r0, r1
 8008d34:	b002      	add	sp, #8
 8008d36:	4770      	bx	lr
 8008d38:	7ff00000 	.word	0x7ff00000

08008d3c <__b2d>:
 8008d3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d40:	6906      	ldr	r6, [r0, #16]
 8008d42:	f100 0814 	add.w	r8, r0, #20
 8008d46:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008d4a:	1f37      	subs	r7, r6, #4
 8008d4c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d50:	4610      	mov	r0, r2
 8008d52:	f7ff fd53 	bl	80087fc <__hi0bits>
 8008d56:	f1c0 0320 	rsb	r3, r0, #32
 8008d5a:	280a      	cmp	r0, #10
 8008d5c:	600b      	str	r3, [r1, #0]
 8008d5e:	491b      	ldr	r1, [pc, #108]	@ (8008dcc <__b2d+0x90>)
 8008d60:	dc15      	bgt.n	8008d8e <__b2d+0x52>
 8008d62:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d66:	fa22 f30c 	lsr.w	r3, r2, ip
 8008d6a:	45b8      	cmp	r8, r7
 8008d6c:	ea43 0501 	orr.w	r5, r3, r1
 8008d70:	bf34      	ite	cc
 8008d72:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d76:	2300      	movcs	r3, #0
 8008d78:	3015      	adds	r0, #21
 8008d7a:	fa02 f000 	lsl.w	r0, r2, r0
 8008d7e:	fa23 f30c 	lsr.w	r3, r3, ip
 8008d82:	4303      	orrs	r3, r0
 8008d84:	461c      	mov	r4, r3
 8008d86:	ec45 4b10 	vmov	d0, r4, r5
 8008d8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008d8e:	45b8      	cmp	r8, r7
 8008d90:	bf3a      	itte	cc
 8008d92:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d96:	f1a6 0708 	subcc.w	r7, r6, #8
 8008d9a:	2300      	movcs	r3, #0
 8008d9c:	380b      	subs	r0, #11
 8008d9e:	d012      	beq.n	8008dc6 <__b2d+0x8a>
 8008da0:	f1c0 0120 	rsb	r1, r0, #32
 8008da4:	fa23 f401 	lsr.w	r4, r3, r1
 8008da8:	4082      	lsls	r2, r0
 8008daa:	4322      	orrs	r2, r4
 8008dac:	4547      	cmp	r7, r8
 8008dae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008db2:	bf8c      	ite	hi
 8008db4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008db8:	2200      	movls	r2, #0
 8008dba:	4083      	lsls	r3, r0
 8008dbc:	40ca      	lsrs	r2, r1
 8008dbe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008dc2:	4313      	orrs	r3, r2
 8008dc4:	e7de      	b.n	8008d84 <__b2d+0x48>
 8008dc6:	ea42 0501 	orr.w	r5, r2, r1
 8008dca:	e7db      	b.n	8008d84 <__b2d+0x48>
 8008dcc:	3ff00000 	.word	0x3ff00000

08008dd0 <__d2b>:
 8008dd0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	2101      	movs	r1, #1
 8008dd8:	ec59 8b10 	vmov	r8, r9, d0
 8008ddc:	4616      	mov	r6, r2
 8008dde:	f7ff fc1b 	bl	8008618 <_Balloc>
 8008de2:	4604      	mov	r4, r0
 8008de4:	b930      	cbnz	r0, 8008df4 <__d2b+0x24>
 8008de6:	4602      	mov	r2, r0
 8008de8:	4b23      	ldr	r3, [pc, #140]	@ (8008e78 <__d2b+0xa8>)
 8008dea:	4824      	ldr	r0, [pc, #144]	@ (8008e7c <__d2b+0xac>)
 8008dec:	f240 310f 	movw	r1, #783	@ 0x30f
 8008df0:	f000 fb72 	bl	80094d8 <__assert_func>
 8008df4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008df8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008dfc:	b10d      	cbz	r5, 8008e02 <__d2b+0x32>
 8008dfe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e02:	9301      	str	r3, [sp, #4]
 8008e04:	f1b8 0300 	subs.w	r3, r8, #0
 8008e08:	d023      	beq.n	8008e52 <__d2b+0x82>
 8008e0a:	4668      	mov	r0, sp
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	f7ff fd14 	bl	800883a <__lo0bits>
 8008e12:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e16:	b1d0      	cbz	r0, 8008e4e <__d2b+0x7e>
 8008e18:	f1c0 0320 	rsb	r3, r0, #32
 8008e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8008e20:	430b      	orrs	r3, r1
 8008e22:	40c2      	lsrs	r2, r0
 8008e24:	6163      	str	r3, [r4, #20]
 8008e26:	9201      	str	r2, [sp, #4]
 8008e28:	9b01      	ldr	r3, [sp, #4]
 8008e2a:	61a3      	str	r3, [r4, #24]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	bf0c      	ite	eq
 8008e30:	2201      	moveq	r2, #1
 8008e32:	2202      	movne	r2, #2
 8008e34:	6122      	str	r2, [r4, #16]
 8008e36:	b1a5      	cbz	r5, 8008e62 <__d2b+0x92>
 8008e38:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e3c:	4405      	add	r5, r0
 8008e3e:	603d      	str	r5, [r7, #0]
 8008e40:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e44:	6030      	str	r0, [r6, #0]
 8008e46:	4620      	mov	r0, r4
 8008e48:	b003      	add	sp, #12
 8008e4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e4e:	6161      	str	r1, [r4, #20]
 8008e50:	e7ea      	b.n	8008e28 <__d2b+0x58>
 8008e52:	a801      	add	r0, sp, #4
 8008e54:	f7ff fcf1 	bl	800883a <__lo0bits>
 8008e58:	9b01      	ldr	r3, [sp, #4]
 8008e5a:	6163      	str	r3, [r4, #20]
 8008e5c:	3020      	adds	r0, #32
 8008e5e:	2201      	movs	r2, #1
 8008e60:	e7e8      	b.n	8008e34 <__d2b+0x64>
 8008e62:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e66:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e6a:	6038      	str	r0, [r7, #0]
 8008e6c:	6918      	ldr	r0, [r3, #16]
 8008e6e:	f7ff fcc5 	bl	80087fc <__hi0bits>
 8008e72:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e76:	e7e5      	b.n	8008e44 <__d2b+0x74>
 8008e78:	08009c17 	.word	0x08009c17
 8008e7c:	08009c88 	.word	0x08009c88

08008e80 <__ratio>:
 8008e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e84:	b085      	sub	sp, #20
 8008e86:	e9cd 1000 	strd	r1, r0, [sp]
 8008e8a:	a902      	add	r1, sp, #8
 8008e8c:	f7ff ff56 	bl	8008d3c <__b2d>
 8008e90:	9800      	ldr	r0, [sp, #0]
 8008e92:	a903      	add	r1, sp, #12
 8008e94:	ec55 4b10 	vmov	r4, r5, d0
 8008e98:	f7ff ff50 	bl	8008d3c <__b2d>
 8008e9c:	9b01      	ldr	r3, [sp, #4]
 8008e9e:	6919      	ldr	r1, [r3, #16]
 8008ea0:	9b00      	ldr	r3, [sp, #0]
 8008ea2:	691b      	ldr	r3, [r3, #16]
 8008ea4:	1ac9      	subs	r1, r1, r3
 8008ea6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008eaa:	1a9b      	subs	r3, r3, r2
 8008eac:	ec5b ab10 	vmov	sl, fp, d0
 8008eb0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	bfce      	itee	gt
 8008eb8:	462a      	movgt	r2, r5
 8008eba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ebe:	465a      	movle	r2, fp
 8008ec0:	462f      	mov	r7, r5
 8008ec2:	46d9      	mov	r9, fp
 8008ec4:	bfcc      	ite	gt
 8008ec6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008eca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ece:	464b      	mov	r3, r9
 8008ed0:	4652      	mov	r2, sl
 8008ed2:	4620      	mov	r0, r4
 8008ed4:	4639      	mov	r1, r7
 8008ed6:	f7f7 fcc1 	bl	800085c <__aeabi_ddiv>
 8008eda:	ec41 0b10 	vmov	d0, r0, r1
 8008ede:	b005      	add	sp, #20
 8008ee0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008ee4 <__copybits>:
 8008ee4:	3901      	subs	r1, #1
 8008ee6:	b570      	push	{r4, r5, r6, lr}
 8008ee8:	1149      	asrs	r1, r1, #5
 8008eea:	6914      	ldr	r4, [r2, #16]
 8008eec:	3101      	adds	r1, #1
 8008eee:	f102 0314 	add.w	r3, r2, #20
 8008ef2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008ef6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008efa:	1f05      	subs	r5, r0, #4
 8008efc:	42a3      	cmp	r3, r4
 8008efe:	d30c      	bcc.n	8008f1a <__copybits+0x36>
 8008f00:	1aa3      	subs	r3, r4, r2
 8008f02:	3b11      	subs	r3, #17
 8008f04:	f023 0303 	bic.w	r3, r3, #3
 8008f08:	3211      	adds	r2, #17
 8008f0a:	42a2      	cmp	r2, r4
 8008f0c:	bf88      	it	hi
 8008f0e:	2300      	movhi	r3, #0
 8008f10:	4418      	add	r0, r3
 8008f12:	2300      	movs	r3, #0
 8008f14:	4288      	cmp	r0, r1
 8008f16:	d305      	bcc.n	8008f24 <__copybits+0x40>
 8008f18:	bd70      	pop	{r4, r5, r6, pc}
 8008f1a:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f1e:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f22:	e7eb      	b.n	8008efc <__copybits+0x18>
 8008f24:	f840 3b04 	str.w	r3, [r0], #4
 8008f28:	e7f4      	b.n	8008f14 <__copybits+0x30>

08008f2a <__any_on>:
 8008f2a:	f100 0214 	add.w	r2, r0, #20
 8008f2e:	6900      	ldr	r0, [r0, #16]
 8008f30:	114b      	asrs	r3, r1, #5
 8008f32:	4298      	cmp	r0, r3
 8008f34:	b510      	push	{r4, lr}
 8008f36:	db11      	blt.n	8008f5c <__any_on+0x32>
 8008f38:	dd0a      	ble.n	8008f50 <__any_on+0x26>
 8008f3a:	f011 011f 	ands.w	r1, r1, #31
 8008f3e:	d007      	beq.n	8008f50 <__any_on+0x26>
 8008f40:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f44:	fa24 f001 	lsr.w	r0, r4, r1
 8008f48:	fa00 f101 	lsl.w	r1, r0, r1
 8008f4c:	428c      	cmp	r4, r1
 8008f4e:	d10b      	bne.n	8008f68 <__any_on+0x3e>
 8008f50:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d803      	bhi.n	8008f60 <__any_on+0x36>
 8008f58:	2000      	movs	r0, #0
 8008f5a:	bd10      	pop	{r4, pc}
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	e7f7      	b.n	8008f50 <__any_on+0x26>
 8008f60:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f64:	2900      	cmp	r1, #0
 8008f66:	d0f5      	beq.n	8008f54 <__any_on+0x2a>
 8008f68:	2001      	movs	r0, #1
 8008f6a:	e7f6      	b.n	8008f5a <__any_on+0x30>

08008f6c <_strtol_l.isra.0>:
 8008f6c:	2b24      	cmp	r3, #36	@ 0x24
 8008f6e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f72:	4686      	mov	lr, r0
 8008f74:	4690      	mov	r8, r2
 8008f76:	d801      	bhi.n	8008f7c <_strtol_l.isra.0+0x10>
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d106      	bne.n	8008f8a <_strtol_l.isra.0+0x1e>
 8008f7c:	f7fe f85a 	bl	8007034 <__errno>
 8008f80:	2316      	movs	r3, #22
 8008f82:	6003      	str	r3, [r0, #0]
 8008f84:	2000      	movs	r0, #0
 8008f86:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f8a:	4834      	ldr	r0, [pc, #208]	@ (800905c <_strtol_l.isra.0+0xf0>)
 8008f8c:	460d      	mov	r5, r1
 8008f8e:	462a      	mov	r2, r5
 8008f90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f94:	5d06      	ldrb	r6, [r0, r4]
 8008f96:	f016 0608 	ands.w	r6, r6, #8
 8008f9a:	d1f8      	bne.n	8008f8e <_strtol_l.isra.0+0x22>
 8008f9c:	2c2d      	cmp	r4, #45	@ 0x2d
 8008f9e:	d110      	bne.n	8008fc2 <_strtol_l.isra.0+0x56>
 8008fa0:	782c      	ldrb	r4, [r5, #0]
 8008fa2:	2601      	movs	r6, #1
 8008fa4:	1c95      	adds	r5, r2, #2
 8008fa6:	f033 0210 	bics.w	r2, r3, #16
 8008faa:	d115      	bne.n	8008fd8 <_strtol_l.isra.0+0x6c>
 8008fac:	2c30      	cmp	r4, #48	@ 0x30
 8008fae:	d10d      	bne.n	8008fcc <_strtol_l.isra.0+0x60>
 8008fb0:	782a      	ldrb	r2, [r5, #0]
 8008fb2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008fb6:	2a58      	cmp	r2, #88	@ 0x58
 8008fb8:	d108      	bne.n	8008fcc <_strtol_l.isra.0+0x60>
 8008fba:	786c      	ldrb	r4, [r5, #1]
 8008fbc:	3502      	adds	r5, #2
 8008fbe:	2310      	movs	r3, #16
 8008fc0:	e00a      	b.n	8008fd8 <_strtol_l.isra.0+0x6c>
 8008fc2:	2c2b      	cmp	r4, #43	@ 0x2b
 8008fc4:	bf04      	itt	eq
 8008fc6:	782c      	ldrbeq	r4, [r5, #0]
 8008fc8:	1c95      	addeq	r5, r2, #2
 8008fca:	e7ec      	b.n	8008fa6 <_strtol_l.isra.0+0x3a>
 8008fcc:	2b00      	cmp	r3, #0
 8008fce:	d1f6      	bne.n	8008fbe <_strtol_l.isra.0+0x52>
 8008fd0:	2c30      	cmp	r4, #48	@ 0x30
 8008fd2:	bf14      	ite	ne
 8008fd4:	230a      	movne	r3, #10
 8008fd6:	2308      	moveq	r3, #8
 8008fd8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008fdc:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	fbbc f9f3 	udiv	r9, ip, r3
 8008fe6:	4610      	mov	r0, r2
 8008fe8:	fb03 ca19 	mls	sl, r3, r9, ip
 8008fec:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008ff0:	2f09      	cmp	r7, #9
 8008ff2:	d80f      	bhi.n	8009014 <_strtol_l.isra.0+0xa8>
 8008ff4:	463c      	mov	r4, r7
 8008ff6:	42a3      	cmp	r3, r4
 8008ff8:	dd1b      	ble.n	8009032 <_strtol_l.isra.0+0xc6>
 8008ffa:	1c57      	adds	r7, r2, #1
 8008ffc:	d007      	beq.n	800900e <_strtol_l.isra.0+0xa2>
 8008ffe:	4581      	cmp	r9, r0
 8009000:	d314      	bcc.n	800902c <_strtol_l.isra.0+0xc0>
 8009002:	d101      	bne.n	8009008 <_strtol_l.isra.0+0x9c>
 8009004:	45a2      	cmp	sl, r4
 8009006:	db11      	blt.n	800902c <_strtol_l.isra.0+0xc0>
 8009008:	fb00 4003 	mla	r0, r0, r3, r4
 800900c:	2201      	movs	r2, #1
 800900e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009012:	e7eb      	b.n	8008fec <_strtol_l.isra.0+0x80>
 8009014:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009018:	2f19      	cmp	r7, #25
 800901a:	d801      	bhi.n	8009020 <_strtol_l.isra.0+0xb4>
 800901c:	3c37      	subs	r4, #55	@ 0x37
 800901e:	e7ea      	b.n	8008ff6 <_strtol_l.isra.0+0x8a>
 8009020:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009024:	2f19      	cmp	r7, #25
 8009026:	d804      	bhi.n	8009032 <_strtol_l.isra.0+0xc6>
 8009028:	3c57      	subs	r4, #87	@ 0x57
 800902a:	e7e4      	b.n	8008ff6 <_strtol_l.isra.0+0x8a>
 800902c:	f04f 32ff 	mov.w	r2, #4294967295
 8009030:	e7ed      	b.n	800900e <_strtol_l.isra.0+0xa2>
 8009032:	1c53      	adds	r3, r2, #1
 8009034:	d108      	bne.n	8009048 <_strtol_l.isra.0+0xdc>
 8009036:	2322      	movs	r3, #34	@ 0x22
 8009038:	f8ce 3000 	str.w	r3, [lr]
 800903c:	4660      	mov	r0, ip
 800903e:	f1b8 0f00 	cmp.w	r8, #0
 8009042:	d0a0      	beq.n	8008f86 <_strtol_l.isra.0+0x1a>
 8009044:	1e69      	subs	r1, r5, #1
 8009046:	e006      	b.n	8009056 <_strtol_l.isra.0+0xea>
 8009048:	b106      	cbz	r6, 800904c <_strtol_l.isra.0+0xe0>
 800904a:	4240      	negs	r0, r0
 800904c:	f1b8 0f00 	cmp.w	r8, #0
 8009050:	d099      	beq.n	8008f86 <_strtol_l.isra.0+0x1a>
 8009052:	2a00      	cmp	r2, #0
 8009054:	d1f6      	bne.n	8009044 <_strtol_l.isra.0+0xd8>
 8009056:	f8c8 1000 	str.w	r1, [r8]
 800905a:	e794      	b.n	8008f86 <_strtol_l.isra.0+0x1a>
 800905c:	08009e81 	.word	0x08009e81

08009060 <_strtol_r>:
 8009060:	f7ff bf84 	b.w	8008f6c <_strtol_l.isra.0>

08009064 <__ascii_wctomb>:
 8009064:	4603      	mov	r3, r0
 8009066:	4608      	mov	r0, r1
 8009068:	b141      	cbz	r1, 800907c <__ascii_wctomb+0x18>
 800906a:	2aff      	cmp	r2, #255	@ 0xff
 800906c:	d904      	bls.n	8009078 <__ascii_wctomb+0x14>
 800906e:	228a      	movs	r2, #138	@ 0x8a
 8009070:	601a      	str	r2, [r3, #0]
 8009072:	f04f 30ff 	mov.w	r0, #4294967295
 8009076:	4770      	bx	lr
 8009078:	700a      	strb	r2, [r1, #0]
 800907a:	2001      	movs	r0, #1
 800907c:	4770      	bx	lr

0800907e <__ssputs_r>:
 800907e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009082:	688e      	ldr	r6, [r1, #8]
 8009084:	461f      	mov	r7, r3
 8009086:	42be      	cmp	r6, r7
 8009088:	680b      	ldr	r3, [r1, #0]
 800908a:	4682      	mov	sl, r0
 800908c:	460c      	mov	r4, r1
 800908e:	4690      	mov	r8, r2
 8009090:	d82d      	bhi.n	80090ee <__ssputs_r+0x70>
 8009092:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009096:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800909a:	d026      	beq.n	80090ea <__ssputs_r+0x6c>
 800909c:	6965      	ldr	r5, [r4, #20]
 800909e:	6909      	ldr	r1, [r1, #16]
 80090a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80090a4:	eba3 0901 	sub.w	r9, r3, r1
 80090a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80090ac:	1c7b      	adds	r3, r7, #1
 80090ae:	444b      	add	r3, r9
 80090b0:	106d      	asrs	r5, r5, #1
 80090b2:	429d      	cmp	r5, r3
 80090b4:	bf38      	it	cc
 80090b6:	461d      	movcc	r5, r3
 80090b8:	0553      	lsls	r3, r2, #21
 80090ba:	d527      	bpl.n	800910c <__ssputs_r+0x8e>
 80090bc:	4629      	mov	r1, r5
 80090be:	f7ff fa0d 	bl	80084dc <_malloc_r>
 80090c2:	4606      	mov	r6, r0
 80090c4:	b360      	cbz	r0, 8009120 <__ssputs_r+0xa2>
 80090c6:	6921      	ldr	r1, [r4, #16]
 80090c8:	464a      	mov	r2, r9
 80090ca:	f7fd ffe0 	bl	800708e <memcpy>
 80090ce:	89a3      	ldrh	r3, [r4, #12]
 80090d0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80090d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80090d8:	81a3      	strh	r3, [r4, #12]
 80090da:	6126      	str	r6, [r4, #16]
 80090dc:	6165      	str	r5, [r4, #20]
 80090de:	444e      	add	r6, r9
 80090e0:	eba5 0509 	sub.w	r5, r5, r9
 80090e4:	6026      	str	r6, [r4, #0]
 80090e6:	60a5      	str	r5, [r4, #8]
 80090e8:	463e      	mov	r6, r7
 80090ea:	42be      	cmp	r6, r7
 80090ec:	d900      	bls.n	80090f0 <__ssputs_r+0x72>
 80090ee:	463e      	mov	r6, r7
 80090f0:	6820      	ldr	r0, [r4, #0]
 80090f2:	4632      	mov	r2, r6
 80090f4:	4641      	mov	r1, r8
 80090f6:	f000 f9c5 	bl	8009484 <memmove>
 80090fa:	68a3      	ldr	r3, [r4, #8]
 80090fc:	1b9b      	subs	r3, r3, r6
 80090fe:	60a3      	str	r3, [r4, #8]
 8009100:	6823      	ldr	r3, [r4, #0]
 8009102:	4433      	add	r3, r6
 8009104:	6023      	str	r3, [r4, #0]
 8009106:	2000      	movs	r0, #0
 8009108:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800910c:	462a      	mov	r2, r5
 800910e:	f000 fa15 	bl	800953c <_realloc_r>
 8009112:	4606      	mov	r6, r0
 8009114:	2800      	cmp	r0, #0
 8009116:	d1e0      	bne.n	80090da <__ssputs_r+0x5c>
 8009118:	6921      	ldr	r1, [r4, #16]
 800911a:	4650      	mov	r0, sl
 800911c:	f7fe fe30 	bl	8007d80 <_free_r>
 8009120:	230c      	movs	r3, #12
 8009122:	f8ca 3000 	str.w	r3, [sl]
 8009126:	89a3      	ldrh	r3, [r4, #12]
 8009128:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800912c:	81a3      	strh	r3, [r4, #12]
 800912e:	f04f 30ff 	mov.w	r0, #4294967295
 8009132:	e7e9      	b.n	8009108 <__ssputs_r+0x8a>

08009134 <_svfiprintf_r>:
 8009134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009138:	4698      	mov	r8, r3
 800913a:	898b      	ldrh	r3, [r1, #12]
 800913c:	061b      	lsls	r3, r3, #24
 800913e:	b09d      	sub	sp, #116	@ 0x74
 8009140:	4607      	mov	r7, r0
 8009142:	460d      	mov	r5, r1
 8009144:	4614      	mov	r4, r2
 8009146:	d510      	bpl.n	800916a <_svfiprintf_r+0x36>
 8009148:	690b      	ldr	r3, [r1, #16]
 800914a:	b973      	cbnz	r3, 800916a <_svfiprintf_r+0x36>
 800914c:	2140      	movs	r1, #64	@ 0x40
 800914e:	f7ff f9c5 	bl	80084dc <_malloc_r>
 8009152:	6028      	str	r0, [r5, #0]
 8009154:	6128      	str	r0, [r5, #16]
 8009156:	b930      	cbnz	r0, 8009166 <_svfiprintf_r+0x32>
 8009158:	230c      	movs	r3, #12
 800915a:	603b      	str	r3, [r7, #0]
 800915c:	f04f 30ff 	mov.w	r0, #4294967295
 8009160:	b01d      	add	sp, #116	@ 0x74
 8009162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009166:	2340      	movs	r3, #64	@ 0x40
 8009168:	616b      	str	r3, [r5, #20]
 800916a:	2300      	movs	r3, #0
 800916c:	9309      	str	r3, [sp, #36]	@ 0x24
 800916e:	2320      	movs	r3, #32
 8009170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009174:	f8cd 800c 	str.w	r8, [sp, #12]
 8009178:	2330      	movs	r3, #48	@ 0x30
 800917a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009318 <_svfiprintf_r+0x1e4>
 800917e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009182:	f04f 0901 	mov.w	r9, #1
 8009186:	4623      	mov	r3, r4
 8009188:	469a      	mov	sl, r3
 800918a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800918e:	b10a      	cbz	r2, 8009194 <_svfiprintf_r+0x60>
 8009190:	2a25      	cmp	r2, #37	@ 0x25
 8009192:	d1f9      	bne.n	8009188 <_svfiprintf_r+0x54>
 8009194:	ebba 0b04 	subs.w	fp, sl, r4
 8009198:	d00b      	beq.n	80091b2 <_svfiprintf_r+0x7e>
 800919a:	465b      	mov	r3, fp
 800919c:	4622      	mov	r2, r4
 800919e:	4629      	mov	r1, r5
 80091a0:	4638      	mov	r0, r7
 80091a2:	f7ff ff6c 	bl	800907e <__ssputs_r>
 80091a6:	3001      	adds	r0, #1
 80091a8:	f000 80a7 	beq.w	80092fa <_svfiprintf_r+0x1c6>
 80091ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80091ae:	445a      	add	r2, fp
 80091b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80091b2:	f89a 3000 	ldrb.w	r3, [sl]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	f000 809f 	beq.w	80092fa <_svfiprintf_r+0x1c6>
 80091bc:	2300      	movs	r3, #0
 80091be:	f04f 32ff 	mov.w	r2, #4294967295
 80091c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80091c6:	f10a 0a01 	add.w	sl, sl, #1
 80091ca:	9304      	str	r3, [sp, #16]
 80091cc:	9307      	str	r3, [sp, #28]
 80091ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80091d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80091d4:	4654      	mov	r4, sl
 80091d6:	2205      	movs	r2, #5
 80091d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80091dc:	484e      	ldr	r0, [pc, #312]	@ (8009318 <_svfiprintf_r+0x1e4>)
 80091de:	f7f6 ffff 	bl	80001e0 <memchr>
 80091e2:	9a04      	ldr	r2, [sp, #16]
 80091e4:	b9d8      	cbnz	r0, 800921e <_svfiprintf_r+0xea>
 80091e6:	06d0      	lsls	r0, r2, #27
 80091e8:	bf44      	itt	mi
 80091ea:	2320      	movmi	r3, #32
 80091ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091f0:	0711      	lsls	r1, r2, #28
 80091f2:	bf44      	itt	mi
 80091f4:	232b      	movmi	r3, #43	@ 0x2b
 80091f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80091fa:	f89a 3000 	ldrb.w	r3, [sl]
 80091fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009200:	d015      	beq.n	800922e <_svfiprintf_r+0xfa>
 8009202:	9a07      	ldr	r2, [sp, #28]
 8009204:	4654      	mov	r4, sl
 8009206:	2000      	movs	r0, #0
 8009208:	f04f 0c0a 	mov.w	ip, #10
 800920c:	4621      	mov	r1, r4
 800920e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009212:	3b30      	subs	r3, #48	@ 0x30
 8009214:	2b09      	cmp	r3, #9
 8009216:	d94b      	bls.n	80092b0 <_svfiprintf_r+0x17c>
 8009218:	b1b0      	cbz	r0, 8009248 <_svfiprintf_r+0x114>
 800921a:	9207      	str	r2, [sp, #28]
 800921c:	e014      	b.n	8009248 <_svfiprintf_r+0x114>
 800921e:	eba0 0308 	sub.w	r3, r0, r8
 8009222:	fa09 f303 	lsl.w	r3, r9, r3
 8009226:	4313      	orrs	r3, r2
 8009228:	9304      	str	r3, [sp, #16]
 800922a:	46a2      	mov	sl, r4
 800922c:	e7d2      	b.n	80091d4 <_svfiprintf_r+0xa0>
 800922e:	9b03      	ldr	r3, [sp, #12]
 8009230:	1d19      	adds	r1, r3, #4
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	9103      	str	r1, [sp, #12]
 8009236:	2b00      	cmp	r3, #0
 8009238:	bfbb      	ittet	lt
 800923a:	425b      	neglt	r3, r3
 800923c:	f042 0202 	orrlt.w	r2, r2, #2
 8009240:	9307      	strge	r3, [sp, #28]
 8009242:	9307      	strlt	r3, [sp, #28]
 8009244:	bfb8      	it	lt
 8009246:	9204      	strlt	r2, [sp, #16]
 8009248:	7823      	ldrb	r3, [r4, #0]
 800924a:	2b2e      	cmp	r3, #46	@ 0x2e
 800924c:	d10a      	bne.n	8009264 <_svfiprintf_r+0x130>
 800924e:	7863      	ldrb	r3, [r4, #1]
 8009250:	2b2a      	cmp	r3, #42	@ 0x2a
 8009252:	d132      	bne.n	80092ba <_svfiprintf_r+0x186>
 8009254:	9b03      	ldr	r3, [sp, #12]
 8009256:	1d1a      	adds	r2, r3, #4
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	9203      	str	r2, [sp, #12]
 800925c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009260:	3402      	adds	r4, #2
 8009262:	9305      	str	r3, [sp, #20]
 8009264:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009328 <_svfiprintf_r+0x1f4>
 8009268:	7821      	ldrb	r1, [r4, #0]
 800926a:	2203      	movs	r2, #3
 800926c:	4650      	mov	r0, sl
 800926e:	f7f6 ffb7 	bl	80001e0 <memchr>
 8009272:	b138      	cbz	r0, 8009284 <_svfiprintf_r+0x150>
 8009274:	9b04      	ldr	r3, [sp, #16]
 8009276:	eba0 000a 	sub.w	r0, r0, sl
 800927a:	2240      	movs	r2, #64	@ 0x40
 800927c:	4082      	lsls	r2, r0
 800927e:	4313      	orrs	r3, r2
 8009280:	3401      	adds	r4, #1
 8009282:	9304      	str	r3, [sp, #16]
 8009284:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009288:	4824      	ldr	r0, [pc, #144]	@ (800931c <_svfiprintf_r+0x1e8>)
 800928a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800928e:	2206      	movs	r2, #6
 8009290:	f7f6 ffa6 	bl	80001e0 <memchr>
 8009294:	2800      	cmp	r0, #0
 8009296:	d036      	beq.n	8009306 <_svfiprintf_r+0x1d2>
 8009298:	4b21      	ldr	r3, [pc, #132]	@ (8009320 <_svfiprintf_r+0x1ec>)
 800929a:	bb1b      	cbnz	r3, 80092e4 <_svfiprintf_r+0x1b0>
 800929c:	9b03      	ldr	r3, [sp, #12]
 800929e:	3307      	adds	r3, #7
 80092a0:	f023 0307 	bic.w	r3, r3, #7
 80092a4:	3308      	adds	r3, #8
 80092a6:	9303      	str	r3, [sp, #12]
 80092a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80092aa:	4433      	add	r3, r6
 80092ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80092ae:	e76a      	b.n	8009186 <_svfiprintf_r+0x52>
 80092b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80092b4:	460c      	mov	r4, r1
 80092b6:	2001      	movs	r0, #1
 80092b8:	e7a8      	b.n	800920c <_svfiprintf_r+0xd8>
 80092ba:	2300      	movs	r3, #0
 80092bc:	3401      	adds	r4, #1
 80092be:	9305      	str	r3, [sp, #20]
 80092c0:	4619      	mov	r1, r3
 80092c2:	f04f 0c0a 	mov.w	ip, #10
 80092c6:	4620      	mov	r0, r4
 80092c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80092cc:	3a30      	subs	r2, #48	@ 0x30
 80092ce:	2a09      	cmp	r2, #9
 80092d0:	d903      	bls.n	80092da <_svfiprintf_r+0x1a6>
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d0c6      	beq.n	8009264 <_svfiprintf_r+0x130>
 80092d6:	9105      	str	r1, [sp, #20]
 80092d8:	e7c4      	b.n	8009264 <_svfiprintf_r+0x130>
 80092da:	fb0c 2101 	mla	r1, ip, r1, r2
 80092de:	4604      	mov	r4, r0
 80092e0:	2301      	movs	r3, #1
 80092e2:	e7f0      	b.n	80092c6 <_svfiprintf_r+0x192>
 80092e4:	ab03      	add	r3, sp, #12
 80092e6:	9300      	str	r3, [sp, #0]
 80092e8:	462a      	mov	r2, r5
 80092ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009324 <_svfiprintf_r+0x1f0>)
 80092ec:	a904      	add	r1, sp, #16
 80092ee:	4638      	mov	r0, r7
 80092f0:	f7fc ff50 	bl	8006194 <_printf_float>
 80092f4:	1c42      	adds	r2, r0, #1
 80092f6:	4606      	mov	r6, r0
 80092f8:	d1d6      	bne.n	80092a8 <_svfiprintf_r+0x174>
 80092fa:	89ab      	ldrh	r3, [r5, #12]
 80092fc:	065b      	lsls	r3, r3, #25
 80092fe:	f53f af2d 	bmi.w	800915c <_svfiprintf_r+0x28>
 8009302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009304:	e72c      	b.n	8009160 <_svfiprintf_r+0x2c>
 8009306:	ab03      	add	r3, sp, #12
 8009308:	9300      	str	r3, [sp, #0]
 800930a:	462a      	mov	r2, r5
 800930c:	4b05      	ldr	r3, [pc, #20]	@ (8009324 <_svfiprintf_r+0x1f0>)
 800930e:	a904      	add	r1, sp, #16
 8009310:	4638      	mov	r0, r7
 8009312:	f7fd f9d7 	bl	80066c4 <_printf_i>
 8009316:	e7ed      	b.n	80092f4 <_svfiprintf_r+0x1c0>
 8009318:	08009ce1 	.word	0x08009ce1
 800931c:	08009ceb 	.word	0x08009ceb
 8009320:	08006195 	.word	0x08006195
 8009324:	0800907f 	.word	0x0800907f
 8009328:	08009ce7 	.word	0x08009ce7

0800932c <__sflush_r>:
 800932c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009330:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009334:	0716      	lsls	r6, r2, #28
 8009336:	4605      	mov	r5, r0
 8009338:	460c      	mov	r4, r1
 800933a:	d454      	bmi.n	80093e6 <__sflush_r+0xba>
 800933c:	684b      	ldr	r3, [r1, #4]
 800933e:	2b00      	cmp	r3, #0
 8009340:	dc02      	bgt.n	8009348 <__sflush_r+0x1c>
 8009342:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009344:	2b00      	cmp	r3, #0
 8009346:	dd48      	ble.n	80093da <__sflush_r+0xae>
 8009348:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800934a:	2e00      	cmp	r6, #0
 800934c:	d045      	beq.n	80093da <__sflush_r+0xae>
 800934e:	2300      	movs	r3, #0
 8009350:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009354:	682f      	ldr	r7, [r5, #0]
 8009356:	6a21      	ldr	r1, [r4, #32]
 8009358:	602b      	str	r3, [r5, #0]
 800935a:	d030      	beq.n	80093be <__sflush_r+0x92>
 800935c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800935e:	89a3      	ldrh	r3, [r4, #12]
 8009360:	0759      	lsls	r1, r3, #29
 8009362:	d505      	bpl.n	8009370 <__sflush_r+0x44>
 8009364:	6863      	ldr	r3, [r4, #4]
 8009366:	1ad2      	subs	r2, r2, r3
 8009368:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800936a:	b10b      	cbz	r3, 8009370 <__sflush_r+0x44>
 800936c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800936e:	1ad2      	subs	r2, r2, r3
 8009370:	2300      	movs	r3, #0
 8009372:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009374:	6a21      	ldr	r1, [r4, #32]
 8009376:	4628      	mov	r0, r5
 8009378:	47b0      	blx	r6
 800937a:	1c43      	adds	r3, r0, #1
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	d106      	bne.n	800938e <__sflush_r+0x62>
 8009380:	6829      	ldr	r1, [r5, #0]
 8009382:	291d      	cmp	r1, #29
 8009384:	d82b      	bhi.n	80093de <__sflush_r+0xb2>
 8009386:	4a2a      	ldr	r2, [pc, #168]	@ (8009430 <__sflush_r+0x104>)
 8009388:	40ca      	lsrs	r2, r1
 800938a:	07d6      	lsls	r6, r2, #31
 800938c:	d527      	bpl.n	80093de <__sflush_r+0xb2>
 800938e:	2200      	movs	r2, #0
 8009390:	6062      	str	r2, [r4, #4]
 8009392:	04d9      	lsls	r1, r3, #19
 8009394:	6922      	ldr	r2, [r4, #16]
 8009396:	6022      	str	r2, [r4, #0]
 8009398:	d504      	bpl.n	80093a4 <__sflush_r+0x78>
 800939a:	1c42      	adds	r2, r0, #1
 800939c:	d101      	bne.n	80093a2 <__sflush_r+0x76>
 800939e:	682b      	ldr	r3, [r5, #0]
 80093a0:	b903      	cbnz	r3, 80093a4 <__sflush_r+0x78>
 80093a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80093a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80093a6:	602f      	str	r7, [r5, #0]
 80093a8:	b1b9      	cbz	r1, 80093da <__sflush_r+0xae>
 80093aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80093ae:	4299      	cmp	r1, r3
 80093b0:	d002      	beq.n	80093b8 <__sflush_r+0x8c>
 80093b2:	4628      	mov	r0, r5
 80093b4:	f7fe fce4 	bl	8007d80 <_free_r>
 80093b8:	2300      	movs	r3, #0
 80093ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80093bc:	e00d      	b.n	80093da <__sflush_r+0xae>
 80093be:	2301      	movs	r3, #1
 80093c0:	4628      	mov	r0, r5
 80093c2:	47b0      	blx	r6
 80093c4:	4602      	mov	r2, r0
 80093c6:	1c50      	adds	r0, r2, #1
 80093c8:	d1c9      	bne.n	800935e <__sflush_r+0x32>
 80093ca:	682b      	ldr	r3, [r5, #0]
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d0c6      	beq.n	800935e <__sflush_r+0x32>
 80093d0:	2b1d      	cmp	r3, #29
 80093d2:	d001      	beq.n	80093d8 <__sflush_r+0xac>
 80093d4:	2b16      	cmp	r3, #22
 80093d6:	d11e      	bne.n	8009416 <__sflush_r+0xea>
 80093d8:	602f      	str	r7, [r5, #0]
 80093da:	2000      	movs	r0, #0
 80093dc:	e022      	b.n	8009424 <__sflush_r+0xf8>
 80093de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80093e2:	b21b      	sxth	r3, r3
 80093e4:	e01b      	b.n	800941e <__sflush_r+0xf2>
 80093e6:	690f      	ldr	r7, [r1, #16]
 80093e8:	2f00      	cmp	r7, #0
 80093ea:	d0f6      	beq.n	80093da <__sflush_r+0xae>
 80093ec:	0793      	lsls	r3, r2, #30
 80093ee:	680e      	ldr	r6, [r1, #0]
 80093f0:	bf08      	it	eq
 80093f2:	694b      	ldreq	r3, [r1, #20]
 80093f4:	600f      	str	r7, [r1, #0]
 80093f6:	bf18      	it	ne
 80093f8:	2300      	movne	r3, #0
 80093fa:	eba6 0807 	sub.w	r8, r6, r7
 80093fe:	608b      	str	r3, [r1, #8]
 8009400:	f1b8 0f00 	cmp.w	r8, #0
 8009404:	dde9      	ble.n	80093da <__sflush_r+0xae>
 8009406:	6a21      	ldr	r1, [r4, #32]
 8009408:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800940a:	4643      	mov	r3, r8
 800940c:	463a      	mov	r2, r7
 800940e:	4628      	mov	r0, r5
 8009410:	47b0      	blx	r6
 8009412:	2800      	cmp	r0, #0
 8009414:	dc08      	bgt.n	8009428 <__sflush_r+0xfc>
 8009416:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800941a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800941e:	81a3      	strh	r3, [r4, #12]
 8009420:	f04f 30ff 	mov.w	r0, #4294967295
 8009424:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009428:	4407      	add	r7, r0
 800942a:	eba8 0800 	sub.w	r8, r8, r0
 800942e:	e7e7      	b.n	8009400 <__sflush_r+0xd4>
 8009430:	20400001 	.word	0x20400001

08009434 <_fflush_r>:
 8009434:	b538      	push	{r3, r4, r5, lr}
 8009436:	690b      	ldr	r3, [r1, #16]
 8009438:	4605      	mov	r5, r0
 800943a:	460c      	mov	r4, r1
 800943c:	b913      	cbnz	r3, 8009444 <_fflush_r+0x10>
 800943e:	2500      	movs	r5, #0
 8009440:	4628      	mov	r0, r5
 8009442:	bd38      	pop	{r3, r4, r5, pc}
 8009444:	b118      	cbz	r0, 800944e <_fflush_r+0x1a>
 8009446:	6a03      	ldr	r3, [r0, #32]
 8009448:	b90b      	cbnz	r3, 800944e <_fflush_r+0x1a>
 800944a:	f7fd fcf3 	bl	8006e34 <__sinit>
 800944e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d0f3      	beq.n	800943e <_fflush_r+0xa>
 8009456:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009458:	07d0      	lsls	r0, r2, #31
 800945a:	d404      	bmi.n	8009466 <_fflush_r+0x32>
 800945c:	0599      	lsls	r1, r3, #22
 800945e:	d402      	bmi.n	8009466 <_fflush_r+0x32>
 8009460:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009462:	f7fd fe12 	bl	800708a <__retarget_lock_acquire_recursive>
 8009466:	4628      	mov	r0, r5
 8009468:	4621      	mov	r1, r4
 800946a:	f7ff ff5f 	bl	800932c <__sflush_r>
 800946e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009470:	07da      	lsls	r2, r3, #31
 8009472:	4605      	mov	r5, r0
 8009474:	d4e4      	bmi.n	8009440 <_fflush_r+0xc>
 8009476:	89a3      	ldrh	r3, [r4, #12]
 8009478:	059b      	lsls	r3, r3, #22
 800947a:	d4e1      	bmi.n	8009440 <_fflush_r+0xc>
 800947c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800947e:	f7fd fe05 	bl	800708c <__retarget_lock_release_recursive>
 8009482:	e7dd      	b.n	8009440 <_fflush_r+0xc>

08009484 <memmove>:
 8009484:	4288      	cmp	r0, r1
 8009486:	b510      	push	{r4, lr}
 8009488:	eb01 0402 	add.w	r4, r1, r2
 800948c:	d902      	bls.n	8009494 <memmove+0x10>
 800948e:	4284      	cmp	r4, r0
 8009490:	4623      	mov	r3, r4
 8009492:	d807      	bhi.n	80094a4 <memmove+0x20>
 8009494:	1e43      	subs	r3, r0, #1
 8009496:	42a1      	cmp	r1, r4
 8009498:	d008      	beq.n	80094ac <memmove+0x28>
 800949a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800949e:	f803 2f01 	strb.w	r2, [r3, #1]!
 80094a2:	e7f8      	b.n	8009496 <memmove+0x12>
 80094a4:	4402      	add	r2, r0
 80094a6:	4601      	mov	r1, r0
 80094a8:	428a      	cmp	r2, r1
 80094aa:	d100      	bne.n	80094ae <memmove+0x2a>
 80094ac:	bd10      	pop	{r4, pc}
 80094ae:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80094b2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80094b6:	e7f7      	b.n	80094a8 <memmove+0x24>

080094b8 <_sbrk_r>:
 80094b8:	b538      	push	{r3, r4, r5, lr}
 80094ba:	4d06      	ldr	r5, [pc, #24]	@ (80094d4 <_sbrk_r+0x1c>)
 80094bc:	2300      	movs	r3, #0
 80094be:	4604      	mov	r4, r0
 80094c0:	4608      	mov	r0, r1
 80094c2:	602b      	str	r3, [r5, #0]
 80094c4:	f7f8 ff5a 	bl	800237c <_sbrk>
 80094c8:	1c43      	adds	r3, r0, #1
 80094ca:	d102      	bne.n	80094d2 <_sbrk_r+0x1a>
 80094cc:	682b      	ldr	r3, [r5, #0]
 80094ce:	b103      	cbz	r3, 80094d2 <_sbrk_r+0x1a>
 80094d0:	6023      	str	r3, [r4, #0]
 80094d2:	bd38      	pop	{r3, r4, r5, pc}
 80094d4:	20000570 	.word	0x20000570

080094d8 <__assert_func>:
 80094d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80094da:	4614      	mov	r4, r2
 80094dc:	461a      	mov	r2, r3
 80094de:	4b09      	ldr	r3, [pc, #36]	@ (8009504 <__assert_func+0x2c>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	4605      	mov	r5, r0
 80094e4:	68d8      	ldr	r0, [r3, #12]
 80094e6:	b14c      	cbz	r4, 80094fc <__assert_func+0x24>
 80094e8:	4b07      	ldr	r3, [pc, #28]	@ (8009508 <__assert_func+0x30>)
 80094ea:	9100      	str	r1, [sp, #0]
 80094ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80094f0:	4906      	ldr	r1, [pc, #24]	@ (800950c <__assert_func+0x34>)
 80094f2:	462b      	mov	r3, r5
 80094f4:	f000 f850 	bl	8009598 <fiprintf>
 80094f8:	f000 f860 	bl	80095bc <abort>
 80094fc:	4b04      	ldr	r3, [pc, #16]	@ (8009510 <__assert_func+0x38>)
 80094fe:	461c      	mov	r4, r3
 8009500:	e7f3      	b.n	80094ea <__assert_func+0x12>
 8009502:	bf00      	nop
 8009504:	20000184 	.word	0x20000184
 8009508:	08009cf2 	.word	0x08009cf2
 800950c:	08009cff 	.word	0x08009cff
 8009510:	08009d2d 	.word	0x08009d2d

08009514 <_calloc_r>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	fba1 5402 	umull	r5, r4, r1, r2
 800951a:	b934      	cbnz	r4, 800952a <_calloc_r+0x16>
 800951c:	4629      	mov	r1, r5
 800951e:	f7fe ffdd 	bl	80084dc <_malloc_r>
 8009522:	4606      	mov	r6, r0
 8009524:	b928      	cbnz	r0, 8009532 <_calloc_r+0x1e>
 8009526:	4630      	mov	r0, r6
 8009528:	bd70      	pop	{r4, r5, r6, pc}
 800952a:	220c      	movs	r2, #12
 800952c:	6002      	str	r2, [r0, #0]
 800952e:	2600      	movs	r6, #0
 8009530:	e7f9      	b.n	8009526 <_calloc_r+0x12>
 8009532:	462a      	mov	r2, r5
 8009534:	4621      	mov	r1, r4
 8009536:	f7fd fd18 	bl	8006f6a <memset>
 800953a:	e7f4      	b.n	8009526 <_calloc_r+0x12>

0800953c <_realloc_r>:
 800953c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009540:	4607      	mov	r7, r0
 8009542:	4614      	mov	r4, r2
 8009544:	460d      	mov	r5, r1
 8009546:	b921      	cbnz	r1, 8009552 <_realloc_r+0x16>
 8009548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800954c:	4611      	mov	r1, r2
 800954e:	f7fe bfc5 	b.w	80084dc <_malloc_r>
 8009552:	b92a      	cbnz	r2, 8009560 <_realloc_r+0x24>
 8009554:	f7fe fc14 	bl	8007d80 <_free_r>
 8009558:	4625      	mov	r5, r4
 800955a:	4628      	mov	r0, r5
 800955c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009560:	f000 f833 	bl	80095ca <_malloc_usable_size_r>
 8009564:	4284      	cmp	r4, r0
 8009566:	4606      	mov	r6, r0
 8009568:	d802      	bhi.n	8009570 <_realloc_r+0x34>
 800956a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800956e:	d8f4      	bhi.n	800955a <_realloc_r+0x1e>
 8009570:	4621      	mov	r1, r4
 8009572:	4638      	mov	r0, r7
 8009574:	f7fe ffb2 	bl	80084dc <_malloc_r>
 8009578:	4680      	mov	r8, r0
 800957a:	b908      	cbnz	r0, 8009580 <_realloc_r+0x44>
 800957c:	4645      	mov	r5, r8
 800957e:	e7ec      	b.n	800955a <_realloc_r+0x1e>
 8009580:	42b4      	cmp	r4, r6
 8009582:	4622      	mov	r2, r4
 8009584:	4629      	mov	r1, r5
 8009586:	bf28      	it	cs
 8009588:	4632      	movcs	r2, r6
 800958a:	f7fd fd80 	bl	800708e <memcpy>
 800958e:	4629      	mov	r1, r5
 8009590:	4638      	mov	r0, r7
 8009592:	f7fe fbf5 	bl	8007d80 <_free_r>
 8009596:	e7f1      	b.n	800957c <_realloc_r+0x40>

08009598 <fiprintf>:
 8009598:	b40e      	push	{r1, r2, r3}
 800959a:	b503      	push	{r0, r1, lr}
 800959c:	4601      	mov	r1, r0
 800959e:	ab03      	add	r3, sp, #12
 80095a0:	4805      	ldr	r0, [pc, #20]	@ (80095b8 <fiprintf+0x20>)
 80095a2:	f853 2b04 	ldr.w	r2, [r3], #4
 80095a6:	6800      	ldr	r0, [r0, #0]
 80095a8:	9301      	str	r3, [sp, #4]
 80095aa:	f000 f83f 	bl	800962c <_vfiprintf_r>
 80095ae:	b002      	add	sp, #8
 80095b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80095b4:	b003      	add	sp, #12
 80095b6:	4770      	bx	lr
 80095b8:	20000184 	.word	0x20000184

080095bc <abort>:
 80095bc:	b508      	push	{r3, lr}
 80095be:	2006      	movs	r0, #6
 80095c0:	f000 fa08 	bl	80099d4 <raise>
 80095c4:	2001      	movs	r0, #1
 80095c6:	f7f8 fe61 	bl	800228c <_exit>

080095ca <_malloc_usable_size_r>:
 80095ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80095ce:	1f18      	subs	r0, r3, #4
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	bfbc      	itt	lt
 80095d4:	580b      	ldrlt	r3, [r1, r0]
 80095d6:	18c0      	addlt	r0, r0, r3
 80095d8:	4770      	bx	lr

080095da <__sfputc_r>:
 80095da:	6893      	ldr	r3, [r2, #8]
 80095dc:	3b01      	subs	r3, #1
 80095de:	2b00      	cmp	r3, #0
 80095e0:	b410      	push	{r4}
 80095e2:	6093      	str	r3, [r2, #8]
 80095e4:	da08      	bge.n	80095f8 <__sfputc_r+0x1e>
 80095e6:	6994      	ldr	r4, [r2, #24]
 80095e8:	42a3      	cmp	r3, r4
 80095ea:	db01      	blt.n	80095f0 <__sfputc_r+0x16>
 80095ec:	290a      	cmp	r1, #10
 80095ee:	d103      	bne.n	80095f8 <__sfputc_r+0x1e>
 80095f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095f4:	f000 b932 	b.w	800985c <__swbuf_r>
 80095f8:	6813      	ldr	r3, [r2, #0]
 80095fa:	1c58      	adds	r0, r3, #1
 80095fc:	6010      	str	r0, [r2, #0]
 80095fe:	7019      	strb	r1, [r3, #0]
 8009600:	4608      	mov	r0, r1
 8009602:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009606:	4770      	bx	lr

08009608 <__sfputs_r>:
 8009608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800960a:	4606      	mov	r6, r0
 800960c:	460f      	mov	r7, r1
 800960e:	4614      	mov	r4, r2
 8009610:	18d5      	adds	r5, r2, r3
 8009612:	42ac      	cmp	r4, r5
 8009614:	d101      	bne.n	800961a <__sfputs_r+0x12>
 8009616:	2000      	movs	r0, #0
 8009618:	e007      	b.n	800962a <__sfputs_r+0x22>
 800961a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800961e:	463a      	mov	r2, r7
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff ffda 	bl	80095da <__sfputc_r>
 8009626:	1c43      	adds	r3, r0, #1
 8009628:	d1f3      	bne.n	8009612 <__sfputs_r+0xa>
 800962a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800962c <_vfiprintf_r>:
 800962c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009630:	460d      	mov	r5, r1
 8009632:	b09d      	sub	sp, #116	@ 0x74
 8009634:	4614      	mov	r4, r2
 8009636:	4698      	mov	r8, r3
 8009638:	4606      	mov	r6, r0
 800963a:	b118      	cbz	r0, 8009644 <_vfiprintf_r+0x18>
 800963c:	6a03      	ldr	r3, [r0, #32]
 800963e:	b90b      	cbnz	r3, 8009644 <_vfiprintf_r+0x18>
 8009640:	f7fd fbf8 	bl	8006e34 <__sinit>
 8009644:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009646:	07d9      	lsls	r1, r3, #31
 8009648:	d405      	bmi.n	8009656 <_vfiprintf_r+0x2a>
 800964a:	89ab      	ldrh	r3, [r5, #12]
 800964c:	059a      	lsls	r2, r3, #22
 800964e:	d402      	bmi.n	8009656 <_vfiprintf_r+0x2a>
 8009650:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009652:	f7fd fd1a 	bl	800708a <__retarget_lock_acquire_recursive>
 8009656:	89ab      	ldrh	r3, [r5, #12]
 8009658:	071b      	lsls	r3, r3, #28
 800965a:	d501      	bpl.n	8009660 <_vfiprintf_r+0x34>
 800965c:	692b      	ldr	r3, [r5, #16]
 800965e:	b99b      	cbnz	r3, 8009688 <_vfiprintf_r+0x5c>
 8009660:	4629      	mov	r1, r5
 8009662:	4630      	mov	r0, r6
 8009664:	f000 f938 	bl	80098d8 <__swsetup_r>
 8009668:	b170      	cbz	r0, 8009688 <_vfiprintf_r+0x5c>
 800966a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800966c:	07dc      	lsls	r4, r3, #31
 800966e:	d504      	bpl.n	800967a <_vfiprintf_r+0x4e>
 8009670:	f04f 30ff 	mov.w	r0, #4294967295
 8009674:	b01d      	add	sp, #116	@ 0x74
 8009676:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800967a:	89ab      	ldrh	r3, [r5, #12]
 800967c:	0598      	lsls	r0, r3, #22
 800967e:	d4f7      	bmi.n	8009670 <_vfiprintf_r+0x44>
 8009680:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009682:	f7fd fd03 	bl	800708c <__retarget_lock_release_recursive>
 8009686:	e7f3      	b.n	8009670 <_vfiprintf_r+0x44>
 8009688:	2300      	movs	r3, #0
 800968a:	9309      	str	r3, [sp, #36]	@ 0x24
 800968c:	2320      	movs	r3, #32
 800968e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009692:	f8cd 800c 	str.w	r8, [sp, #12]
 8009696:	2330      	movs	r3, #48	@ 0x30
 8009698:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009848 <_vfiprintf_r+0x21c>
 800969c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80096a0:	f04f 0901 	mov.w	r9, #1
 80096a4:	4623      	mov	r3, r4
 80096a6:	469a      	mov	sl, r3
 80096a8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ac:	b10a      	cbz	r2, 80096b2 <_vfiprintf_r+0x86>
 80096ae:	2a25      	cmp	r2, #37	@ 0x25
 80096b0:	d1f9      	bne.n	80096a6 <_vfiprintf_r+0x7a>
 80096b2:	ebba 0b04 	subs.w	fp, sl, r4
 80096b6:	d00b      	beq.n	80096d0 <_vfiprintf_r+0xa4>
 80096b8:	465b      	mov	r3, fp
 80096ba:	4622      	mov	r2, r4
 80096bc:	4629      	mov	r1, r5
 80096be:	4630      	mov	r0, r6
 80096c0:	f7ff ffa2 	bl	8009608 <__sfputs_r>
 80096c4:	3001      	adds	r0, #1
 80096c6:	f000 80a7 	beq.w	8009818 <_vfiprintf_r+0x1ec>
 80096ca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80096cc:	445a      	add	r2, fp
 80096ce:	9209      	str	r2, [sp, #36]	@ 0x24
 80096d0:	f89a 3000 	ldrb.w	r3, [sl]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	f000 809f 	beq.w	8009818 <_vfiprintf_r+0x1ec>
 80096da:	2300      	movs	r3, #0
 80096dc:	f04f 32ff 	mov.w	r2, #4294967295
 80096e0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80096e4:	f10a 0a01 	add.w	sl, sl, #1
 80096e8:	9304      	str	r3, [sp, #16]
 80096ea:	9307      	str	r3, [sp, #28]
 80096ec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80096f0:	931a      	str	r3, [sp, #104]	@ 0x68
 80096f2:	4654      	mov	r4, sl
 80096f4:	2205      	movs	r2, #5
 80096f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096fa:	4853      	ldr	r0, [pc, #332]	@ (8009848 <_vfiprintf_r+0x21c>)
 80096fc:	f7f6 fd70 	bl	80001e0 <memchr>
 8009700:	9a04      	ldr	r2, [sp, #16]
 8009702:	b9d8      	cbnz	r0, 800973c <_vfiprintf_r+0x110>
 8009704:	06d1      	lsls	r1, r2, #27
 8009706:	bf44      	itt	mi
 8009708:	2320      	movmi	r3, #32
 800970a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800970e:	0713      	lsls	r3, r2, #28
 8009710:	bf44      	itt	mi
 8009712:	232b      	movmi	r3, #43	@ 0x2b
 8009714:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009718:	f89a 3000 	ldrb.w	r3, [sl]
 800971c:	2b2a      	cmp	r3, #42	@ 0x2a
 800971e:	d015      	beq.n	800974c <_vfiprintf_r+0x120>
 8009720:	9a07      	ldr	r2, [sp, #28]
 8009722:	4654      	mov	r4, sl
 8009724:	2000      	movs	r0, #0
 8009726:	f04f 0c0a 	mov.w	ip, #10
 800972a:	4621      	mov	r1, r4
 800972c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009730:	3b30      	subs	r3, #48	@ 0x30
 8009732:	2b09      	cmp	r3, #9
 8009734:	d94b      	bls.n	80097ce <_vfiprintf_r+0x1a2>
 8009736:	b1b0      	cbz	r0, 8009766 <_vfiprintf_r+0x13a>
 8009738:	9207      	str	r2, [sp, #28]
 800973a:	e014      	b.n	8009766 <_vfiprintf_r+0x13a>
 800973c:	eba0 0308 	sub.w	r3, r0, r8
 8009740:	fa09 f303 	lsl.w	r3, r9, r3
 8009744:	4313      	orrs	r3, r2
 8009746:	9304      	str	r3, [sp, #16]
 8009748:	46a2      	mov	sl, r4
 800974a:	e7d2      	b.n	80096f2 <_vfiprintf_r+0xc6>
 800974c:	9b03      	ldr	r3, [sp, #12]
 800974e:	1d19      	adds	r1, r3, #4
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	9103      	str	r1, [sp, #12]
 8009754:	2b00      	cmp	r3, #0
 8009756:	bfbb      	ittet	lt
 8009758:	425b      	neglt	r3, r3
 800975a:	f042 0202 	orrlt.w	r2, r2, #2
 800975e:	9307      	strge	r3, [sp, #28]
 8009760:	9307      	strlt	r3, [sp, #28]
 8009762:	bfb8      	it	lt
 8009764:	9204      	strlt	r2, [sp, #16]
 8009766:	7823      	ldrb	r3, [r4, #0]
 8009768:	2b2e      	cmp	r3, #46	@ 0x2e
 800976a:	d10a      	bne.n	8009782 <_vfiprintf_r+0x156>
 800976c:	7863      	ldrb	r3, [r4, #1]
 800976e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009770:	d132      	bne.n	80097d8 <_vfiprintf_r+0x1ac>
 8009772:	9b03      	ldr	r3, [sp, #12]
 8009774:	1d1a      	adds	r2, r3, #4
 8009776:	681b      	ldr	r3, [r3, #0]
 8009778:	9203      	str	r2, [sp, #12]
 800977a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800977e:	3402      	adds	r4, #2
 8009780:	9305      	str	r3, [sp, #20]
 8009782:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009858 <_vfiprintf_r+0x22c>
 8009786:	7821      	ldrb	r1, [r4, #0]
 8009788:	2203      	movs	r2, #3
 800978a:	4650      	mov	r0, sl
 800978c:	f7f6 fd28 	bl	80001e0 <memchr>
 8009790:	b138      	cbz	r0, 80097a2 <_vfiprintf_r+0x176>
 8009792:	9b04      	ldr	r3, [sp, #16]
 8009794:	eba0 000a 	sub.w	r0, r0, sl
 8009798:	2240      	movs	r2, #64	@ 0x40
 800979a:	4082      	lsls	r2, r0
 800979c:	4313      	orrs	r3, r2
 800979e:	3401      	adds	r4, #1
 80097a0:	9304      	str	r3, [sp, #16]
 80097a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097a6:	4829      	ldr	r0, [pc, #164]	@ (800984c <_vfiprintf_r+0x220>)
 80097a8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80097ac:	2206      	movs	r2, #6
 80097ae:	f7f6 fd17 	bl	80001e0 <memchr>
 80097b2:	2800      	cmp	r0, #0
 80097b4:	d03f      	beq.n	8009836 <_vfiprintf_r+0x20a>
 80097b6:	4b26      	ldr	r3, [pc, #152]	@ (8009850 <_vfiprintf_r+0x224>)
 80097b8:	bb1b      	cbnz	r3, 8009802 <_vfiprintf_r+0x1d6>
 80097ba:	9b03      	ldr	r3, [sp, #12]
 80097bc:	3307      	adds	r3, #7
 80097be:	f023 0307 	bic.w	r3, r3, #7
 80097c2:	3308      	adds	r3, #8
 80097c4:	9303      	str	r3, [sp, #12]
 80097c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097c8:	443b      	add	r3, r7
 80097ca:	9309      	str	r3, [sp, #36]	@ 0x24
 80097cc:	e76a      	b.n	80096a4 <_vfiprintf_r+0x78>
 80097ce:	fb0c 3202 	mla	r2, ip, r2, r3
 80097d2:	460c      	mov	r4, r1
 80097d4:	2001      	movs	r0, #1
 80097d6:	e7a8      	b.n	800972a <_vfiprintf_r+0xfe>
 80097d8:	2300      	movs	r3, #0
 80097da:	3401      	adds	r4, #1
 80097dc:	9305      	str	r3, [sp, #20]
 80097de:	4619      	mov	r1, r3
 80097e0:	f04f 0c0a 	mov.w	ip, #10
 80097e4:	4620      	mov	r0, r4
 80097e6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097ea:	3a30      	subs	r2, #48	@ 0x30
 80097ec:	2a09      	cmp	r2, #9
 80097ee:	d903      	bls.n	80097f8 <_vfiprintf_r+0x1cc>
 80097f0:	2b00      	cmp	r3, #0
 80097f2:	d0c6      	beq.n	8009782 <_vfiprintf_r+0x156>
 80097f4:	9105      	str	r1, [sp, #20]
 80097f6:	e7c4      	b.n	8009782 <_vfiprintf_r+0x156>
 80097f8:	fb0c 2101 	mla	r1, ip, r1, r2
 80097fc:	4604      	mov	r4, r0
 80097fe:	2301      	movs	r3, #1
 8009800:	e7f0      	b.n	80097e4 <_vfiprintf_r+0x1b8>
 8009802:	ab03      	add	r3, sp, #12
 8009804:	9300      	str	r3, [sp, #0]
 8009806:	462a      	mov	r2, r5
 8009808:	4b12      	ldr	r3, [pc, #72]	@ (8009854 <_vfiprintf_r+0x228>)
 800980a:	a904      	add	r1, sp, #16
 800980c:	4630      	mov	r0, r6
 800980e:	f7fc fcc1 	bl	8006194 <_printf_float>
 8009812:	4607      	mov	r7, r0
 8009814:	1c78      	adds	r0, r7, #1
 8009816:	d1d6      	bne.n	80097c6 <_vfiprintf_r+0x19a>
 8009818:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800981a:	07d9      	lsls	r1, r3, #31
 800981c:	d405      	bmi.n	800982a <_vfiprintf_r+0x1fe>
 800981e:	89ab      	ldrh	r3, [r5, #12]
 8009820:	059a      	lsls	r2, r3, #22
 8009822:	d402      	bmi.n	800982a <_vfiprintf_r+0x1fe>
 8009824:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009826:	f7fd fc31 	bl	800708c <__retarget_lock_release_recursive>
 800982a:	89ab      	ldrh	r3, [r5, #12]
 800982c:	065b      	lsls	r3, r3, #25
 800982e:	f53f af1f 	bmi.w	8009670 <_vfiprintf_r+0x44>
 8009832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009834:	e71e      	b.n	8009674 <_vfiprintf_r+0x48>
 8009836:	ab03      	add	r3, sp, #12
 8009838:	9300      	str	r3, [sp, #0]
 800983a:	462a      	mov	r2, r5
 800983c:	4b05      	ldr	r3, [pc, #20]	@ (8009854 <_vfiprintf_r+0x228>)
 800983e:	a904      	add	r1, sp, #16
 8009840:	4630      	mov	r0, r6
 8009842:	f7fc ff3f 	bl	80066c4 <_printf_i>
 8009846:	e7e4      	b.n	8009812 <_vfiprintf_r+0x1e6>
 8009848:	08009ce1 	.word	0x08009ce1
 800984c:	08009ceb 	.word	0x08009ceb
 8009850:	08006195 	.word	0x08006195
 8009854:	08009609 	.word	0x08009609
 8009858:	08009ce7 	.word	0x08009ce7

0800985c <__swbuf_r>:
 800985c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800985e:	460e      	mov	r6, r1
 8009860:	4614      	mov	r4, r2
 8009862:	4605      	mov	r5, r0
 8009864:	b118      	cbz	r0, 800986e <__swbuf_r+0x12>
 8009866:	6a03      	ldr	r3, [r0, #32]
 8009868:	b90b      	cbnz	r3, 800986e <__swbuf_r+0x12>
 800986a:	f7fd fae3 	bl	8006e34 <__sinit>
 800986e:	69a3      	ldr	r3, [r4, #24]
 8009870:	60a3      	str	r3, [r4, #8]
 8009872:	89a3      	ldrh	r3, [r4, #12]
 8009874:	071a      	lsls	r2, r3, #28
 8009876:	d501      	bpl.n	800987c <__swbuf_r+0x20>
 8009878:	6923      	ldr	r3, [r4, #16]
 800987a:	b943      	cbnz	r3, 800988e <__swbuf_r+0x32>
 800987c:	4621      	mov	r1, r4
 800987e:	4628      	mov	r0, r5
 8009880:	f000 f82a 	bl	80098d8 <__swsetup_r>
 8009884:	b118      	cbz	r0, 800988e <__swbuf_r+0x32>
 8009886:	f04f 37ff 	mov.w	r7, #4294967295
 800988a:	4638      	mov	r0, r7
 800988c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	6922      	ldr	r2, [r4, #16]
 8009892:	1a98      	subs	r0, r3, r2
 8009894:	6963      	ldr	r3, [r4, #20]
 8009896:	b2f6      	uxtb	r6, r6
 8009898:	4283      	cmp	r3, r0
 800989a:	4637      	mov	r7, r6
 800989c:	dc05      	bgt.n	80098aa <__swbuf_r+0x4e>
 800989e:	4621      	mov	r1, r4
 80098a0:	4628      	mov	r0, r5
 80098a2:	f7ff fdc7 	bl	8009434 <_fflush_r>
 80098a6:	2800      	cmp	r0, #0
 80098a8:	d1ed      	bne.n	8009886 <__swbuf_r+0x2a>
 80098aa:	68a3      	ldr	r3, [r4, #8]
 80098ac:	3b01      	subs	r3, #1
 80098ae:	60a3      	str	r3, [r4, #8]
 80098b0:	6823      	ldr	r3, [r4, #0]
 80098b2:	1c5a      	adds	r2, r3, #1
 80098b4:	6022      	str	r2, [r4, #0]
 80098b6:	701e      	strb	r6, [r3, #0]
 80098b8:	6962      	ldr	r2, [r4, #20]
 80098ba:	1c43      	adds	r3, r0, #1
 80098bc:	429a      	cmp	r2, r3
 80098be:	d004      	beq.n	80098ca <__swbuf_r+0x6e>
 80098c0:	89a3      	ldrh	r3, [r4, #12]
 80098c2:	07db      	lsls	r3, r3, #31
 80098c4:	d5e1      	bpl.n	800988a <__swbuf_r+0x2e>
 80098c6:	2e0a      	cmp	r6, #10
 80098c8:	d1df      	bne.n	800988a <__swbuf_r+0x2e>
 80098ca:	4621      	mov	r1, r4
 80098cc:	4628      	mov	r0, r5
 80098ce:	f7ff fdb1 	bl	8009434 <_fflush_r>
 80098d2:	2800      	cmp	r0, #0
 80098d4:	d0d9      	beq.n	800988a <__swbuf_r+0x2e>
 80098d6:	e7d6      	b.n	8009886 <__swbuf_r+0x2a>

080098d8 <__swsetup_r>:
 80098d8:	b538      	push	{r3, r4, r5, lr}
 80098da:	4b29      	ldr	r3, [pc, #164]	@ (8009980 <__swsetup_r+0xa8>)
 80098dc:	4605      	mov	r5, r0
 80098de:	6818      	ldr	r0, [r3, #0]
 80098e0:	460c      	mov	r4, r1
 80098e2:	b118      	cbz	r0, 80098ec <__swsetup_r+0x14>
 80098e4:	6a03      	ldr	r3, [r0, #32]
 80098e6:	b90b      	cbnz	r3, 80098ec <__swsetup_r+0x14>
 80098e8:	f7fd faa4 	bl	8006e34 <__sinit>
 80098ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098f0:	0719      	lsls	r1, r3, #28
 80098f2:	d422      	bmi.n	800993a <__swsetup_r+0x62>
 80098f4:	06da      	lsls	r2, r3, #27
 80098f6:	d407      	bmi.n	8009908 <__swsetup_r+0x30>
 80098f8:	2209      	movs	r2, #9
 80098fa:	602a      	str	r2, [r5, #0]
 80098fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009900:	81a3      	strh	r3, [r4, #12]
 8009902:	f04f 30ff 	mov.w	r0, #4294967295
 8009906:	e033      	b.n	8009970 <__swsetup_r+0x98>
 8009908:	0758      	lsls	r0, r3, #29
 800990a:	d512      	bpl.n	8009932 <__swsetup_r+0x5a>
 800990c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800990e:	b141      	cbz	r1, 8009922 <__swsetup_r+0x4a>
 8009910:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009914:	4299      	cmp	r1, r3
 8009916:	d002      	beq.n	800991e <__swsetup_r+0x46>
 8009918:	4628      	mov	r0, r5
 800991a:	f7fe fa31 	bl	8007d80 <_free_r>
 800991e:	2300      	movs	r3, #0
 8009920:	6363      	str	r3, [r4, #52]	@ 0x34
 8009922:	89a3      	ldrh	r3, [r4, #12]
 8009924:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8009928:	81a3      	strh	r3, [r4, #12]
 800992a:	2300      	movs	r3, #0
 800992c:	6063      	str	r3, [r4, #4]
 800992e:	6923      	ldr	r3, [r4, #16]
 8009930:	6023      	str	r3, [r4, #0]
 8009932:	89a3      	ldrh	r3, [r4, #12]
 8009934:	f043 0308 	orr.w	r3, r3, #8
 8009938:	81a3      	strh	r3, [r4, #12]
 800993a:	6923      	ldr	r3, [r4, #16]
 800993c:	b94b      	cbnz	r3, 8009952 <__swsetup_r+0x7a>
 800993e:	89a3      	ldrh	r3, [r4, #12]
 8009940:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8009944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009948:	d003      	beq.n	8009952 <__swsetup_r+0x7a>
 800994a:	4621      	mov	r1, r4
 800994c:	4628      	mov	r0, r5
 800994e:	f000 f883 	bl	8009a58 <__smakebuf_r>
 8009952:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009956:	f013 0201 	ands.w	r2, r3, #1
 800995a:	d00a      	beq.n	8009972 <__swsetup_r+0x9a>
 800995c:	2200      	movs	r2, #0
 800995e:	60a2      	str	r2, [r4, #8]
 8009960:	6962      	ldr	r2, [r4, #20]
 8009962:	4252      	negs	r2, r2
 8009964:	61a2      	str	r2, [r4, #24]
 8009966:	6922      	ldr	r2, [r4, #16]
 8009968:	b942      	cbnz	r2, 800997c <__swsetup_r+0xa4>
 800996a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800996e:	d1c5      	bne.n	80098fc <__swsetup_r+0x24>
 8009970:	bd38      	pop	{r3, r4, r5, pc}
 8009972:	0799      	lsls	r1, r3, #30
 8009974:	bf58      	it	pl
 8009976:	6962      	ldrpl	r2, [r4, #20]
 8009978:	60a2      	str	r2, [r4, #8]
 800997a:	e7f4      	b.n	8009966 <__swsetup_r+0x8e>
 800997c:	2000      	movs	r0, #0
 800997e:	e7f7      	b.n	8009970 <__swsetup_r+0x98>
 8009980:	20000184 	.word	0x20000184

08009984 <_raise_r>:
 8009984:	291f      	cmp	r1, #31
 8009986:	b538      	push	{r3, r4, r5, lr}
 8009988:	4605      	mov	r5, r0
 800998a:	460c      	mov	r4, r1
 800998c:	d904      	bls.n	8009998 <_raise_r+0x14>
 800998e:	2316      	movs	r3, #22
 8009990:	6003      	str	r3, [r0, #0]
 8009992:	f04f 30ff 	mov.w	r0, #4294967295
 8009996:	bd38      	pop	{r3, r4, r5, pc}
 8009998:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800999a:	b112      	cbz	r2, 80099a2 <_raise_r+0x1e>
 800999c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80099a0:	b94b      	cbnz	r3, 80099b6 <_raise_r+0x32>
 80099a2:	4628      	mov	r0, r5
 80099a4:	f000 f830 	bl	8009a08 <_getpid_r>
 80099a8:	4622      	mov	r2, r4
 80099aa:	4601      	mov	r1, r0
 80099ac:	4628      	mov	r0, r5
 80099ae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80099b2:	f000 b817 	b.w	80099e4 <_kill_r>
 80099b6:	2b01      	cmp	r3, #1
 80099b8:	d00a      	beq.n	80099d0 <_raise_r+0x4c>
 80099ba:	1c59      	adds	r1, r3, #1
 80099bc:	d103      	bne.n	80099c6 <_raise_r+0x42>
 80099be:	2316      	movs	r3, #22
 80099c0:	6003      	str	r3, [r0, #0]
 80099c2:	2001      	movs	r0, #1
 80099c4:	e7e7      	b.n	8009996 <_raise_r+0x12>
 80099c6:	2100      	movs	r1, #0
 80099c8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80099cc:	4620      	mov	r0, r4
 80099ce:	4798      	blx	r3
 80099d0:	2000      	movs	r0, #0
 80099d2:	e7e0      	b.n	8009996 <_raise_r+0x12>

080099d4 <raise>:
 80099d4:	4b02      	ldr	r3, [pc, #8]	@ (80099e0 <raise+0xc>)
 80099d6:	4601      	mov	r1, r0
 80099d8:	6818      	ldr	r0, [r3, #0]
 80099da:	f7ff bfd3 	b.w	8009984 <_raise_r>
 80099de:	bf00      	nop
 80099e0:	20000184 	.word	0x20000184

080099e4 <_kill_r>:
 80099e4:	b538      	push	{r3, r4, r5, lr}
 80099e6:	4d07      	ldr	r5, [pc, #28]	@ (8009a04 <_kill_r+0x20>)
 80099e8:	2300      	movs	r3, #0
 80099ea:	4604      	mov	r4, r0
 80099ec:	4608      	mov	r0, r1
 80099ee:	4611      	mov	r1, r2
 80099f0:	602b      	str	r3, [r5, #0]
 80099f2:	f7f8 fc3b 	bl	800226c <_kill>
 80099f6:	1c43      	adds	r3, r0, #1
 80099f8:	d102      	bne.n	8009a00 <_kill_r+0x1c>
 80099fa:	682b      	ldr	r3, [r5, #0]
 80099fc:	b103      	cbz	r3, 8009a00 <_kill_r+0x1c>
 80099fe:	6023      	str	r3, [r4, #0]
 8009a00:	bd38      	pop	{r3, r4, r5, pc}
 8009a02:	bf00      	nop
 8009a04:	20000570 	.word	0x20000570

08009a08 <_getpid_r>:
 8009a08:	f7f8 bc28 	b.w	800225c <_getpid>

08009a0c <__swhatbuf_r>:
 8009a0c:	b570      	push	{r4, r5, r6, lr}
 8009a0e:	460c      	mov	r4, r1
 8009a10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009a14:	2900      	cmp	r1, #0
 8009a16:	b096      	sub	sp, #88	@ 0x58
 8009a18:	4615      	mov	r5, r2
 8009a1a:	461e      	mov	r6, r3
 8009a1c:	da0d      	bge.n	8009a3a <__swhatbuf_r+0x2e>
 8009a1e:	89a3      	ldrh	r3, [r4, #12]
 8009a20:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009a24:	f04f 0100 	mov.w	r1, #0
 8009a28:	bf14      	ite	ne
 8009a2a:	2340      	movne	r3, #64	@ 0x40
 8009a2c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8009a30:	2000      	movs	r0, #0
 8009a32:	6031      	str	r1, [r6, #0]
 8009a34:	602b      	str	r3, [r5, #0]
 8009a36:	b016      	add	sp, #88	@ 0x58
 8009a38:	bd70      	pop	{r4, r5, r6, pc}
 8009a3a:	466a      	mov	r2, sp
 8009a3c:	f000 f848 	bl	8009ad0 <_fstat_r>
 8009a40:	2800      	cmp	r0, #0
 8009a42:	dbec      	blt.n	8009a1e <__swhatbuf_r+0x12>
 8009a44:	9901      	ldr	r1, [sp, #4]
 8009a46:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8009a4a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8009a4e:	4259      	negs	r1, r3
 8009a50:	4159      	adcs	r1, r3
 8009a52:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8009a56:	e7eb      	b.n	8009a30 <__swhatbuf_r+0x24>

08009a58 <__smakebuf_r>:
 8009a58:	898b      	ldrh	r3, [r1, #12]
 8009a5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a5c:	079d      	lsls	r5, r3, #30
 8009a5e:	4606      	mov	r6, r0
 8009a60:	460c      	mov	r4, r1
 8009a62:	d507      	bpl.n	8009a74 <__smakebuf_r+0x1c>
 8009a64:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8009a68:	6023      	str	r3, [r4, #0]
 8009a6a:	6123      	str	r3, [r4, #16]
 8009a6c:	2301      	movs	r3, #1
 8009a6e:	6163      	str	r3, [r4, #20]
 8009a70:	b003      	add	sp, #12
 8009a72:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a74:	ab01      	add	r3, sp, #4
 8009a76:	466a      	mov	r2, sp
 8009a78:	f7ff ffc8 	bl	8009a0c <__swhatbuf_r>
 8009a7c:	9f00      	ldr	r7, [sp, #0]
 8009a7e:	4605      	mov	r5, r0
 8009a80:	4639      	mov	r1, r7
 8009a82:	4630      	mov	r0, r6
 8009a84:	f7fe fd2a 	bl	80084dc <_malloc_r>
 8009a88:	b948      	cbnz	r0, 8009a9e <__smakebuf_r+0x46>
 8009a8a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009a8e:	059a      	lsls	r2, r3, #22
 8009a90:	d4ee      	bmi.n	8009a70 <__smakebuf_r+0x18>
 8009a92:	f023 0303 	bic.w	r3, r3, #3
 8009a96:	f043 0302 	orr.w	r3, r3, #2
 8009a9a:	81a3      	strh	r3, [r4, #12]
 8009a9c:	e7e2      	b.n	8009a64 <__smakebuf_r+0xc>
 8009a9e:	89a3      	ldrh	r3, [r4, #12]
 8009aa0:	6020      	str	r0, [r4, #0]
 8009aa2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009aa6:	81a3      	strh	r3, [r4, #12]
 8009aa8:	9b01      	ldr	r3, [sp, #4]
 8009aaa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009aae:	b15b      	cbz	r3, 8009ac8 <__smakebuf_r+0x70>
 8009ab0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009ab4:	4630      	mov	r0, r6
 8009ab6:	f000 f81d 	bl	8009af4 <_isatty_r>
 8009aba:	b128      	cbz	r0, 8009ac8 <__smakebuf_r+0x70>
 8009abc:	89a3      	ldrh	r3, [r4, #12]
 8009abe:	f023 0303 	bic.w	r3, r3, #3
 8009ac2:	f043 0301 	orr.w	r3, r3, #1
 8009ac6:	81a3      	strh	r3, [r4, #12]
 8009ac8:	89a3      	ldrh	r3, [r4, #12]
 8009aca:	431d      	orrs	r5, r3
 8009acc:	81a5      	strh	r5, [r4, #12]
 8009ace:	e7cf      	b.n	8009a70 <__smakebuf_r+0x18>

08009ad0 <_fstat_r>:
 8009ad0:	b538      	push	{r3, r4, r5, lr}
 8009ad2:	4d07      	ldr	r5, [pc, #28]	@ (8009af0 <_fstat_r+0x20>)
 8009ad4:	2300      	movs	r3, #0
 8009ad6:	4604      	mov	r4, r0
 8009ad8:	4608      	mov	r0, r1
 8009ada:	4611      	mov	r1, r2
 8009adc:	602b      	str	r3, [r5, #0]
 8009ade:	f7f8 fc25 	bl	800232c <_fstat>
 8009ae2:	1c43      	adds	r3, r0, #1
 8009ae4:	d102      	bne.n	8009aec <_fstat_r+0x1c>
 8009ae6:	682b      	ldr	r3, [r5, #0]
 8009ae8:	b103      	cbz	r3, 8009aec <_fstat_r+0x1c>
 8009aea:	6023      	str	r3, [r4, #0]
 8009aec:	bd38      	pop	{r3, r4, r5, pc}
 8009aee:	bf00      	nop
 8009af0:	20000570 	.word	0x20000570

08009af4 <_isatty_r>:
 8009af4:	b538      	push	{r3, r4, r5, lr}
 8009af6:	4d06      	ldr	r5, [pc, #24]	@ (8009b10 <_isatty_r+0x1c>)
 8009af8:	2300      	movs	r3, #0
 8009afa:	4604      	mov	r4, r0
 8009afc:	4608      	mov	r0, r1
 8009afe:	602b      	str	r3, [r5, #0]
 8009b00:	f7f8 fc24 	bl	800234c <_isatty>
 8009b04:	1c43      	adds	r3, r0, #1
 8009b06:	d102      	bne.n	8009b0e <_isatty_r+0x1a>
 8009b08:	682b      	ldr	r3, [r5, #0]
 8009b0a:	b103      	cbz	r3, 8009b0e <_isatty_r+0x1a>
 8009b0c:	6023      	str	r3, [r4, #0]
 8009b0e:	bd38      	pop	{r3, r4, r5, pc}
 8009b10:	20000570 	.word	0x20000570

08009b14 <_init>:
 8009b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b16:	bf00      	nop
 8009b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b1a:	bc08      	pop	{r3}
 8009b1c:	469e      	mov	lr, r3
 8009b1e:	4770      	bx	lr

08009b20 <_fini>:
 8009b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009b22:	bf00      	nop
 8009b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009b26:	bc08      	pop	{r3}
 8009b28:	469e      	mov	lr, r3
 8009b2a:	4770      	bx	lr
